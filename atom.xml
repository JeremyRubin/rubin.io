<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Jeremy Rubin</title>
 <link href="/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2025-06-01T21:06:34+00:00</updated>
 <id></id>
 <author>
   <name>Jeremy Rubin</name>
   <email></email>
 </author>

 
 <entry>
   <title>Grokking DelBrag: Out-of-Band On-Chain Fraud Proofs through Circuit Garbling @ Bitcoin++ Austin</title>
   <link href="/bitcoin/2025/05/04/delbrag-talk/"/>
   <updated>2025-05-04T00:00:00+00:00</updated>
   <id>/bitcoin/2025/05/04/delbrag-talk</id>
   <content type="html">&lt;p&gt;My talk at Bitcoin++ on how DelBrag protocols work, including detailed schematics and timing analysis.&lt;/p&gt;

&lt;p&gt;Also introduces new concepts of optimistic circuit consistency checks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/pdfs/delbrag-talk-btcpp-austin-2025.pdf&quot;&gt;Get the Slides Here&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Delbrag</title>
   <link href="/bitcoin/2025/04/04/delbrag/"/>
   <updated>2025-04-04T00:00:00+00:00</updated>
   <id>/bitcoin/2025/04/04/delbrag</id>
   <content type="html">&lt;p&gt;Delbrag is a paper explaining how garbled circuits can be applied to make BitVM style constructs fraud proofs substantially more efficient, at the cost of increased out-of-band information exchange.&lt;/p&gt;

&lt;p&gt;Delbrag was originally authored in November, 2024, but wasn’t published sooner as the author procrastinated.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/pdfs/delbrag.pdf&quot;&gt;Read the full paper.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Taproot Denial of Service Bug</title>
   <link href="/bitcoin/2025/03/11/core-vuln-taproot-dos/"/>
   <updated>2025-03-11T00:00:00+00:00</updated>
   <id>/bitcoin/2025/03/11/core-vuln-taproot-dos</id>
   <content type="html">&lt;p&gt;TL;DR: Taproot’s sighash implementation could cause blocks to take 60s or more to validate with specially crafted standard transactions. The patch adds a new cache during validation.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;patch:&lt;/td&gt;
      &lt;td&gt;https://github.com/bitcoin/bitcoin/pull/24105&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Patched:&lt;/td&gt;
      &lt;td&gt;24.x, 23.x.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Unpatched:&lt;/td&gt;
      &lt;td&gt;22.x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I discovered this vulnerability while addressing feedback on BIP-119 (CTV) regarding its denial of service risk mitigations.&lt;/p&gt;

&lt;p&gt;During the comparison of BIPs’ text on DoS mitigations, I identified this vulnerability in the core’s Taproot implementation, made a proof of concept exploit, and patched it.&lt;/p&gt;

&lt;p&gt;Special thanks to the reviewers and security maintainers of Bitcoin Core for assisting in resolving this issue.&lt;/p&gt;

&lt;h1 id=&quot;exploit-explanation--fix&quot;&gt;Exploit Explanation &amp;amp; Fix&lt;/h1&gt;

&lt;p&gt;The below code fragment is the core of the fix.&lt;/p&gt;

&lt;p&gt;Before the patch, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha_single_output&lt;/code&gt; is computed on the fly during script evaluation, potentially. Because it is not cached, it could potentially get re-hashed multiple times.&lt;/p&gt;

&lt;p&gt;After the patch, it is cached after the first evaluation (Cache on First Use).&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp
index 95ffe40a74..07b44971b7 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/src/script/interpreter.cpp
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/src/script/interpreter.cpp
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@@ -1568,9 +1568,12 @@&lt;/span&gt; bool SignatureHashSchnorr(uint256&amp;amp; hash_out, const ScriptExecutionData&amp;amp; execdata
     // Data about the output (if only one).
     if (output_type == SIGHASH_SINGLE) {
         if (in_pos &amp;gt;= tx_to.vout.size()) return false;
&lt;span class=&quot;gd&quot;&gt;-        CHashWriter sha_single_output(SER_GETHASH, 0);
-        sha_single_output &amp;lt;&amp;lt; tx_to.vout[in_pos];
-        ss &amp;lt;&amp;lt; sha_single_output.GetSHA256();
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+        if (!execdata.m_output_hash) {
+            CHashWriter sha_single_output(SER_GETHASH, 0);
+            sha_single_output &amp;lt;&amp;lt; tx_to.vout[in_pos];
+            execdata.m_output_hash = sha_single_output.GetSHA256();
+        }
+        ss &amp;lt;&amp;lt; execdata.m_output_hash.value();
&lt;/span&gt;     }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What could go wrong? Well, suppose I have a transaction that calls CHECKSIG with SIGHASH_SINGLE N times, and the corresponding SIGHASH_SINGLE output is length M. We can trigger &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(M*N)&lt;/code&gt; quadratic hashing.&lt;/p&gt;

&lt;p&gt;The below code can be put into the feature_taproot test, along with a few other tweaks, to test this behavior. It makes a script with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;40000&lt;/code&gt; CHECKSIGS that each have to hash &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;230,000&lt;/code&gt; bytes. I think this was the largest size / repetition count I could figure out, and it took about 60s on an M1 Mac to validate.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spenders_taproot_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Return a list of Spenders for testing post-Taproot activation behavior.&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;secs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate_privkey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pubs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compute_xonly_pubkey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;spenders&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Expensive -- Pile up N CHECKSIGs, minding WU for 
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# sigops constraints
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40000&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scripts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OP_DROP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OP_DROP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OP_DUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pubs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OP_CHECKSIGVERIFY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pubs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OP_CHECKSIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taproot_construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pubs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_spender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spenders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;standard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGHASH_SINGLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SINGLE_SIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spenders&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;big_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Add 1 Big Output with 0 bytes
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CTxOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_value&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;in_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nValue&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scriptPubKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;230000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are variants of this attack that can rely on standard transactions as well, but the caching should eliminate all potential concern with SIGHASH_SINGLE.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fun with CSFS I</title>
   <link href="/bitcoin/2025/03/05/csfs-fun/"/>
   <updated>2025-03-05T00:00:00+00:00</updated>
   <id>/bitcoin/2025/03/05/csfs-fun</id>
   <content type="html">&lt;p&gt;In this blog series, I’ll write up some fun uses for CSFS I’m aware of.&lt;/p&gt;

&lt;p&gt;The purpose is to document things that others might not know about.&lt;/p&gt;

&lt;p&gt;Did I invent these? Maybe. Maybe not. Citations to prior work welcome!&lt;/p&gt;

&lt;h1 id=&quot;irreplacable-irreusable-addresses&quot;&gt;Irreplacable Irreusable Addresses&lt;/h1&gt;

&lt;p&gt;You create a taproot that is a NUMS keypath (the NUMS keypath and single tapleaf is so that you learn all the spending info always), and a tapleaf that says either a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;PK&amp;gt; CHECKSIG&lt;/code&gt;, or a proof that there were &amp;gt;1 signatures produced by that key of any data that are distinct from one another and then either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;with CTV it can be sent to OP_RETURN, or;&lt;/li&gt;
  &lt;li&gt;without CTV it is anyonecanspend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means that as soon as you see a signature of a txn with this address, you know that there is no other txn that can be issued without harming the sender by making their funds burnable.&lt;/p&gt;

&lt;p&gt;for extra fun:&lt;/p&gt;

&lt;p&gt;The “equivocation bond” can be also in a different output, different address, to secure addresses with fresh collateral, even &lt;em&gt;retroactively&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;function-lookup-table-precompiles&quot;&gt;Function Lookup Table Precompiles&lt;/h1&gt;
&lt;p&gt;Suppose we want to add an opcode to Bitcoin that evaluates &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f(x)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let X = musig(big one time setup federation).

let CSFS(key, sig, data) = ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Recall &lt;a href=&quot;/bitcoin/2024/12/02/csfs-ctv-rekey-symmetry/&quot;&gt;key laddering&lt;/a&gt;…
make a script with the following logic, via laddering:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CSFS(X, sig_x, sig_arg)
CSFS(Tweaked(X, arg), sig_arg, arg)
CSFS(Tweaked(X, arg), sig_f, f(arg)))
sig_f != sig_arg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;now run (in signing committee) f(arg) over all values of arg.&lt;/p&gt;

&lt;p&gt;you now get a lookup table that can be used in any script for an arbitrary sized tree for a constant cost of 3 sigs and 2 keys ==&amp;gt; 256 bytes, which is cheaper than using taproot pre-generated trees in many cases.&lt;/p&gt;

&lt;p&gt;This technique can be modified to also work for multiple arguments, as long as the result can be precomputed. That rules out “big output spaces” like OP_CAT, but rules in lookup tables like e.g. merkle trees.&lt;/p&gt;

&lt;p&gt;And for use cases where, e.g., a merkle tree would be signed by a key anyways, this is trust wise equivalent. E.g., a tree of user balances can be done in this fashion, and any user can “look up” their balance from the signature set.&lt;/p&gt;

&lt;p&gt;For “standard library” type uses, big federations can be used for a one-time-trusted-setup.&lt;/p&gt;

&lt;h1 id=&quot;sighash-flag-detection&quot;&gt;SIGHASH Flag Detection&lt;/h1&gt;

&lt;p&gt;Presently, bitcoin scripts cannot restrict which sighash flags are used. CSFS enables a limited version of this in Taproot outoputs. Here’s how:&lt;/p&gt;

&lt;p&gt;You can use CSFS to get the tx digest onto the stack from a signature.&lt;/p&gt;

&lt;p&gt;without op_cat, this is of limited use…&lt;/p&gt;

&lt;p&gt;however, we have the following formula:&lt;/p&gt;

&lt;p&gt;^ What is the output length of SigMsg()? The total length of SigMsg() can be computed using the following formula: 174 - is_anyonecanpay * 49 - is_none * 32 + has_annex * 32&lt;/p&gt;

&lt;p&gt;which is at most 206 bytes (when has_annex is set).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;N.B. This number ends up being + 1 byte sighash epoch, + 64 bytes for the tag in taggedhash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;this means that using CSFS, you can restrict a signature to use some particular sighash flags, by using OP_SIZE.&lt;/p&gt;

&lt;p&gt;is_anyonecanpay=0, is_none=0, has_annex=0, size=174+65
is_anyonecanpay=0, is_none=0, has_annex=1, size=206+65
is_anyonecanpay=0, is_none=1, has_annex=0, size=142+65
is_anyonecanpay=0, is_none=1, has_annex=1, size=174+65
is_anyonecanpay=1, is_none=0, has_annex=0, size=125+65
is_anyonecanpay=1, is_none=0, has_annex=1, size=157+65
is_anyonecanpay=1, is_none=1, has_annex=0, size=93+65
is_anyonecanpay=1, is_none=1, has_annex=1, size=125+65&lt;/p&gt;

&lt;p&gt;this means you can use CSFS to differentiate flag combos with anyonecanpay and none and annex, except for when is_none + has_annex are both set or unset.&lt;/p&gt;

&lt;p&gt;alas, this means you should probably only be interested in the following ability:&lt;/p&gt;

&lt;p&gt;is_anyonecanpay=0, is_none=1, has_annex=0, size=142+65
is_anyonecanpay=1, is_none=1, has_annex=0, size=93+65&lt;/p&gt;

&lt;p&gt;and less interested but still interested in these, given the annex isn’t standard:&lt;/p&gt;

&lt;p&gt;is_anyonecanpay=0, is_none=0, has_annex=1, size=206+65
is_anyonecanpay=1, is_none=0, has_annex=1, size=157+65&lt;/p&gt;

&lt;p&gt;note: the other flags can still be set given these ones!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CSFS Re-Keying and Laddering, Deterministic Update Rekeying, & Applications to LN-Symmetry</title>
   <link href="/bitcoin/2024/12/02/csfs-ctv-rekey-symmetry/"/>
   <updated>2024-12-02T00:00:00+00:00</updated>
   <id>/bitcoin/2024/12/02/csfs-ctv-rekey-symmetry</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This is a collab post with &lt;a href=&quot;https://twitter.com/reardencode&quot;&gt;Rearden&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At Bitcoin++ in Austin this year Rearden showed that there are many ways
to realize Lightning Symmetry using various bitcoin upgrade proposals. All of
these methods require either an extra signing round-trip for each channel
update, or the ability to force the hash of the settlement transaction to be
visible with its corresponding update transaction. This can be generalized as
the requirement that the signature authorizing a given channel be both
rebindable (i.e. not commit to a specific prior UTXO) and commit to some
additional data being visible for that signature to be valid.&lt;/p&gt;

&lt;p&gt;We’ll start by exploring why Lightning Symmetry requires this data visibility
commitment, then dive into previously known solutions, and present a new
generalized technique for using CSFS to two or more variables. Finally, we will
present an optimized solution based on the principles we’ve developed to enable
Lightning Symmetry using one extra signature, but no extra signing round-trip
and without the need for concatenation or other explicit multi-commitments.&lt;/p&gt;

&lt;h2 id=&quot;less-common-definitions&quot;&gt;Less Common Definitions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APO&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGHASH_ANYPREVOUT&lt;/code&gt; as defined in &lt;a href=&quot;https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki&quot;&gt;BIP118&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IKEY&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OP_INTERNALKEY&lt;/code&gt; as defined in &lt;a href=&quot;https://github.com/bitcoin/bips/blob/master/bip-0349.md&quot;&gt;BIP349&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSFS&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OP_CHECKSIGFROMSTACK&lt;/code&gt; as defined in &lt;a href=&quot;https://github.com/bitcoin/bips/pull/1535&quot;&gt;BIP348&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;500,000,000&lt;/code&gt; the lock time threshold &lt;a href=&quot;https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h#L47&quot;&gt;defined in bitcoin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;naive-ctv-csfs-lightning-symmetry-transactions&quot;&gt;Naive CTV-CSFS Lightning Symmetry transactions&lt;/h2&gt;

&lt;p&gt;The scripts for a naive Taproot Lightning Symmetry channel are:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;channel:
tr(musig(keyA, keyB), raw(CTV IKEY CSFS VERIFY &amp;lt;S+1&amp;gt; CLTV))
update(n):
tr(musig(keyA, keyB), raw(DEPTH NOTIF &amp;lt;settlement-n-hash&amp;gt; CTV ELSE CTV IKEY CSFS VERIFY &amp;lt;S+n+1&amp;gt; CLTV ENDIF))
update-stack:
&amp;lt;update-n-sig&amp;gt; &amp;lt;update-n-hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If a channel enters force close, an update outpoint will be placed on chain by
A, and B will have a CSV delay encoded in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;settlement-n-hash&lt;/code&gt; before it
can be settled within which to respond with a later state. One of the stated
goals of Lightning Symmetry is to eliminate the need for each partner to store
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; state for each channel, but now we hit the problem. Because the update
script is not visible on chain, while B can find the update, they cannot
reconstruct the script without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;settlement-n-hash&lt;/code&gt; and only A knows that
hash unless B stores it for every state.&lt;/p&gt;

&lt;h2 id=&quot;apo-annex-solution&quot;&gt;APO-annex solution&lt;/h2&gt;

&lt;p&gt;In @instagibbs’ &lt;a href=&quot;https://delvingbitcoin.org/t/ln-symmetry-project-recap/359&quot;&gt;Lightning Symmetry
work&lt;/a&gt;, he used APO
and the Taproot Annex where both parties to a channel will only sign an update
transaction if their signatures commit to an annex containing the
corresponding settlement hash needed to reconstruct the update spend script.&lt;/p&gt;

&lt;p&gt;The scripts for this are (roughly):&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;channel:
tr(musig(keyA, keyB), raw(&amp;lt;1&amp;gt; CHECKSIGVERIFY &amp;lt;S+1&amp;gt; CLTV))
update(n):
tr(musig(keyA, keyB), raw(DEPTH NOTIF &amp;lt;sig&amp;gt; &amp;lt;01||G&amp;gt; CHECKSIG ELSE &amp;lt;1&amp;gt; CHECKSIGVERIFY &amp;lt;S+n+1&amp;gt; CLTV ENDIF))
update-stack:
&amp;lt;update-n-sig&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we see the use of APO as a covenant by precomputing a signature for the
secret key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; and public key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;G&lt;/code&gt;. Because CHECKSIG operations commit to the
Taproot Annex, these scripts require no special handling for the channel
parties to require each other to place the settlement transaction hash in the
annex and therefore make it possible for either party to later reconstruct any
prior state’s script for spending. Without the annex, an APO-based
implementation would either fall back to the additional signing round-trip, or
using an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OP_RETURN&lt;/code&gt; to force this data to be visible.&lt;/p&gt;

&lt;h2 id=&quot;naive-ctv-csfs-solution&quot;&gt;Naive CTV-CSFS solution&lt;/h2&gt;

&lt;p&gt;Can we just commit to an additional hash using an additional signature?&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;channel:
tr(musig(keyA, keyB), raw(CTV IKEY CSFS VERIFY IKEY CSFS VERIFY &amp;lt;S+1&amp;gt; CLTV))
update(n):
tr(musig(keyA, keyB), raw(DEPTH NOTIF &amp;lt;settlement-n-hash&amp;gt; CTV ELSE CTV IKEY CSFS VERIFY IKEY CSFS VERIFY &amp;lt;S+n+1&amp;gt; CLTV ENDIF))
update-stack:
&amp;lt;settlement-n-sig&amp;gt; &amp;lt;settlement-n-hash&amp;gt; &amp;lt;update-n-sig&amp;gt; &amp;lt;update-n-hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This method is broken because the two signatures are not linked in any way. A
malicious channel partner can place a mismatched settlement hash, and update
transaction on chain, preventing their partner who has a valid later update
from reconstructing the scripts and updating the channel state.&lt;/p&gt;

&lt;p&gt;One obvious solution would be to combine the update hash and the settlement
hash, but since bitcoin lacks a concatenation operator, we cannot do that.
Recently &lt;a href=&quot;https://x.com/4moonsettler&quot;&gt;@4moonsettler&lt;/a&gt; proposed
&lt;a href=&quot;https://github.com/bitcoin/bips/pull/1699&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OP_PAIRCOMMIT&lt;/code&gt;&lt;/a&gt; as an alternative
for this purpose.&lt;/p&gt;

&lt;h2 id=&quot;ctv-csfs-delegation-solution&quot;&gt;CTV-CSFS delegation solution&lt;/h2&gt;

&lt;p&gt;Now we come to the new solution that we’ve developed, which ties the update
and settlement hashes together by the keys which have signed them. CSFS is
known to be useful for delegation, so we initially delegate to a rekey:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;script(n):
    DUP TOALT DUP TOALT
    IKEY CSFS VERIFY
    OP_SIZE &amp;lt;32&amp;gt; EQUALVERIFY CTV
    2DUP EQUAL NOT VERIFY
    ROT SWAP FROMALT CSFS VERIFY
    FROMALT CSFS VERIFY &amp;lt;S+n+1&amp;gt; CLTV
channel:
    tr(musig(keyA, keyB), raw(&amp;lt;script(0)&amp;gt;))
update(n):
    tr(musig(keyA, keyB),
        raw(DEPTH NOTIF &amp;lt;settlement-n-hash&amp;gt; CTV ELSE &amp;lt;script(n)&amp;gt; ENDIF))
stack(n):
    &amp;lt;settlement-n-sig&amp;gt;
    &amp;lt;update-n-sig&amp;gt;
    &amp;lt;settlement-extradata&amp;gt;
    &amp;lt;update-n-ctv&amp;gt;
    &amp;lt;rekey-sig&amp;gt;
    &amp;lt;rekey&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rekey&lt;/code&gt; is an ephemeral key either randomly generated or derived
for each state using something like BIP32 and based on the channel key. What
matters is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rekey&lt;/code&gt; is never used to sign anything other than the two
messages corresponding to the update and settlement hashes for its state. In
this way they are only valid together and the correct settlement hash must be
available for a channel partner to reconstruct the scripts and update the
channel settlement. One quirk of this solution is that if the two signed items
are allowed to be equal, a malicious partner can simply place the same update
hash on the stack with its signature twice, so they must be checked for
inequality by the script.&lt;/p&gt;

&lt;p&gt;This scheme is secure  because of the length check for the arg &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update-n-ctv&lt;/code&gt;,
it should be ensured that the other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;settlement-extradata&amp;gt;&lt;/code&gt; is either not a
valid CTV hash or is not length 32.&lt;/p&gt;

&lt;h2 id=&quot;csfs-key-laddering&quot;&gt;CSFS Key Laddering&lt;/h2&gt;
&lt;p&gt;Key Laddering extends the rekeying approach shown above to allow recursively
rekeying to an arbitrary number of variables. This allows CSFS to be used without
OP_CAT to sign over collections of variables to be plugged into a script.&lt;/p&gt;

&lt;p&gt;For example, for 5 variables (not optimized, written for clarity):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DATASIGS: &amp;lt;sd1&amp;gt; &amp;lt;d1&amp;gt; &amp;lt;sd2&amp;gt; &amp;lt;d2&amp;gt; &amp;lt;sd3&amp;gt; &amp;lt;d3&amp;gt; &amp;lt;sd4&amp;gt; &amp;lt;d4&amp;gt; &amp;lt;sd5&amp;gt; &amp;lt;d5&amp;gt;
stack: DATASIGS + &amp;lt;k5&amp;gt; &amp;lt;s5&amp;gt; &amp;lt;k4&amp;gt; &amp;lt;s4&amp;gt; &amp;lt;k3&amp;gt; &amp;lt;s3&amp;gt; &amp;lt;k2&amp;gt; &amp;lt;s2&amp;gt; &amp;lt;k1&amp;gt; &amp;lt;s1&amp;gt;

program:

\\ First, check that k1 is signed by IKEY
    OVER IKEY CSFSV
    DUP TOALT

// Next, Check that k_i signs k_{i+1}
    // stack: DATASIGS + &amp;lt;k5&amp;gt; &amp;lt;s5&amp;gt; &amp;lt;k4&amp;gt; &amp;lt;s4&amp;gt; &amp;lt;k3&amp;gt; &amp;lt;s3&amp;gt; &amp;lt;k2&amp;gt; &amp;lt;s2&amp;gt; &amp;lt;k1&amp;gt;
    // altstack: &amp;lt;k1&amp;gt;

        3DUP ROT SWAP CSFSV 2DROP DUP TOALT

    // stack: DATASIGS + &amp;lt;k5&amp;gt; &amp;lt;s5&amp;gt; &amp;lt;k4&amp;gt; &amp;lt;s4&amp;gt; &amp;lt;k3&amp;gt; &amp;lt;s3&amp;gt; &amp;lt;k2&amp;gt;
    // altstack: &amp;lt;k1&amp;gt; &amp;lt;k2&amp;gt;

        3DUP ROT SWAP CSFSV 2DROP DUP TOALT

    // stack: DATASIGS + &amp;lt;k5&amp;gt; &amp;lt;s5&amp;gt; &amp;lt;k4&amp;gt; &amp;lt;s4&amp;gt; &amp;lt;k3&amp;gt;
    // altstack: &amp;lt;k1&amp;gt; &amp;lt;k2&amp;gt; &amp;lt;k3&amp;gt;

        3DUP ROT SWAP CSFSV 2DROP DUP TOALT

    // stack: DATASIGS + &amp;lt;k5&amp;gt; &amp;lt;s5&amp;gt; &amp;lt;k4&amp;gt;
    // altstack: &amp;lt;k1&amp;gt; &amp;lt;k2&amp;gt; &amp;lt;k3&amp;gt; &amp;lt;k4&amp;gt;

        3DUP ROT SWAP CSFSV 2DROP

    // stack: &amp;lt;sd1&amp;gt; &amp;lt;d1&amp;gt; &amp;lt;sd2&amp;gt; &amp;lt;d2&amp;gt; &amp;lt;sd3&amp;gt; &amp;lt;d3&amp;gt; &amp;lt;sd4&amp;gt; &amp;lt;d4&amp;gt; &amp;lt;sd5&amp;gt; &amp;lt;d5&amp;gt; &amp;lt;k5&amp;gt;
    // altstack: &amp;lt;k1&amp;gt; &amp;lt;k2&amp;gt; &amp;lt;k3&amp;gt; &amp;lt;k4&amp;gt;


        FROMALT FROMALT FROMALT FROMALT

    // stack: &amp;lt;sd1&amp;gt; &amp;lt;d1&amp;gt; &amp;lt;sd2&amp;gt; &amp;lt;d2&amp;gt; &amp;lt;sd3&amp;gt; &amp;lt;d3&amp;gt; &amp;lt;sd4&amp;gt; &amp;lt;d4&amp;gt; &amp;lt;sd5&amp;gt; &amp;lt;d5&amp;gt; &amp;lt;k5&amp;gt; &amp;lt;k4&amp;gt; &amp;lt;k3&amp;gt; &amp;lt;k2&amp;gt; &amp;lt;k1&amp;gt;
    // altstack:

// Now, check each signature of the data

    &amp;lt;6&amp;gt; PICK // sd5
    &amp;lt;6&amp;gt; PICK // d5
    &amp;lt;6&amp;gt; PICK // k5
    CSFSV

    &amp;lt;8&amp;gt; PICK // sd4
    &amp;lt;8&amp;gt; PICK // d4
    &amp;lt;5&amp;gt; PICK // k4
    CSFSV

    &amp;lt;10&amp;gt; PICK // sd3
    &amp;lt;10&amp;gt; PICK // d3
    &amp;lt;4&amp;gt; PICK // k3
    CSFSV

    &amp;lt;12&amp;gt; PICK // sd2
    &amp;lt;12&amp;gt; PICK // d2
    &amp;lt;3&amp;gt; PICK // k2
    CSFSV

    &amp;lt;14&amp;gt; PICK // sd1
    &amp;lt;14&amp;gt; PICK // d1
    &amp;lt;2&amp;gt; PICK // k1
    CSFSV

// Now, Check the inequalities that no key is used as data:
    // stack: &amp;lt;sd1&amp;gt; &amp;lt;d1&amp;gt; &amp;lt;sd2&amp;gt; &amp;lt;d2&amp;gt; &amp;lt;sd3&amp;gt; &amp;lt;d3&amp;gt; &amp;lt;sd4&amp;gt; &amp;lt;d4&amp;gt; &amp;lt;sd5&amp;gt; &amp;lt;d5&amp;gt; &amp;lt;k5&amp;gt; &amp;lt;k4&amp;gt; &amp;lt;k3&amp;gt; &amp;lt;k2&amp;gt; &amp;lt;k1&amp;gt;
    // altstack:

    // No need to check k1 != d0 since no d0

    // Check that k2 != d1
    &amp;lt;1&amp;gt; PICK
    &amp;lt;14&amp;gt; PICK
    NOT EQUAL VERIFY

    // Check that k3 != d2
    &amp;lt;2&amp;gt; PICK
    &amp;lt;12&amp;gt; PICK
    NOT EQUAL VERIFY


    // Check that k4 != d3
    &amp;lt;3&amp;gt; PICK
    &amp;lt;8&amp;gt; PICK
    NOT EQUAL VERIFY

    // check that k5 != d4
    &amp;lt;4&amp;gt; PICK
    &amp;lt;6&amp;gt; PICK
    NOT EQUAL VERIFY


// stack: &amp;lt;sd1&amp;gt; &amp;lt;d1&amp;gt; &amp;lt;sd2&amp;gt; &amp;lt;d2&amp;gt; &amp;lt;sd3&amp;gt; &amp;lt;d3&amp;gt; &amp;lt;sd4&amp;gt; &amp;lt;d4&amp;gt; &amp;lt;sd5&amp;gt; &amp;lt;d5&amp;gt; &amp;lt;k5&amp;gt; &amp;lt;k4&amp;gt; &amp;lt;k3&amp;gt; &amp;lt;k2&amp;gt; &amp;lt;k1&amp;gt;
// altstack:

2DROP 2DROP DROP
TOALT DROP
TOALT DROP
TOALT DROP
TOALT DROP
TOALT DROP

// stack:
// altstack: &amp;lt;d5&amp;gt; &amp;lt;d4&amp;gt; &amp;lt;d3&amp;gt; &amp;lt;d2&amp;gt; &amp;lt;d1&amp;gt;

// Whatever else


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This lets you sign an arbitrary number of variables in a sequence.&lt;/p&gt;

&lt;p&gt;One “gotcha” not shown in the above script is there is a need to ensure the signature over data and signatures over keys are not exchangable at each hop.
Care should be taken to ensure this.&lt;/p&gt;

&lt;p&gt;One alternative scheme is to do “signature laddering”. That is, instead of signing a key at each step, sign instead the next signature.&lt;/p&gt;

&lt;p&gt;E.g., re-key by signing with IKEY the first signature. Then verify it against any key / message pair it will validate against. The key can be used with a different signature for the value, and the message signed is the next signature. E.g.:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stack:
&amp;lt;sig B&amp;gt;
&amp;lt;key A&amp;gt;
&amp;lt;sig^IKEY(sig A)&amp;gt;
&amp;lt;sig^A(sig B)&amp;gt;

DUP TOALT
IKEY CSFS VERIFY
FROMALT

stack:
&amp;lt;sig B&amp;gt;
&amp;lt;key A&amp;gt;
&amp;lt;sig^A(sig B)&amp;gt;

ROT ROT CSFS VERIFY

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This laddering is convenient, because the first IKEY sig commits to the roles of
all the other data (key v.s. sig v.s. argument).&lt;/p&gt;

&lt;h2 id=&quot;ctv-csfs-with-derived-internal-keys-solution&quot;&gt;CTV-CSFS with derived internal keys solution&lt;/h2&gt;

&lt;p&gt;For Lightning Symmetry, each update transaction is signed with a specific
monotonically increasing locktime, and nothing requires the internal key to be
exactly the same for each update, so we can replace the internal key with a
key deterministically derived from the channel key and the locktime, and then
almost use the naive CTV-CSFS scripts:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;internalkey(n):
bip32_derive(musig(keyA, keyB), /&amp;lt;S+n+1&amp;gt;)
script(n):
CTV 2DUP EQUAL NOT VERIFY ROT SWAP IKEY CSFS VERIFY IKEY CSFS VERIFY &amp;lt;S+n+1&amp;gt; CLTV
channel:
tr(musig(keyA, keyB), raw(&amp;lt;script(0)&amp;gt;))
update:
tr(internalkey(n), raw(DEPTH NOTIF &amp;lt;settlement-n-hash&amp;gt; CTV ELSE &amp;lt;script(n)&amp;gt; ENDIF))
update-stack:
&amp;lt;settlement-n-sig&amp;gt; &amp;lt;update-n-sig&amp;gt; &amp;lt;settlement-n-hash&amp;gt; &amp;lt;update-n-hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Either channel partner can deterministicaly derive the correct internal key
needed to reconstruct the spend stack from any update from the locktime of the
update transaction itself. These derived internal keys are only used to sign
one pair of update and settlement hash, and the script checks that the two
signatures are for different data.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;These techniques remove the need for bitcoin upgrade proposals which enable
Lightning Symmetry to include a specific function for committing to multiple
items with a single signature. Of course if a more efficient method for
combining items into a single commitment is available Lightning developers
will be able to take advantage of it and reduce the witness space required for
Lightning Symmetry.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Un-FE’d Covenants</title>
   <link href="/bitcoin/2024/11/26/unfed-covenants/"/>
   <updated>2024-11-26T00:00:00+00:00</updated>
   <id>/bitcoin/2024/11/26/unfed-covenants</id>
   <content type="html">&lt;p&gt;Covenants in Bitcoin represent a method to restrict how and where coins can
move. Functional Encryption (FE) offers an exciting avenue to implement
covenants without native protocol changes. However, FE remains impractical with
current cryptographic tools. In this work, we propose a practical
implementation using an oracle-assisted model that combines off-chain
computation, key management, and a BitVM-style economic incentive structure
to enforce covenants without requiring a Bitcoin soft fork.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/pdfs/unfedcovenants.pdf&quot;&gt;Read the full paper.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>FE'd Up Covenants</title>
   <link href="/bitcoin/2024/05/29/fed-up-covenants/"/>
   <updated>2024-05-29T00:00:00+00:00</updated>
   <id>/bitcoin/2024/05/29/fed-up-covenants</id>
   <content type="html">&lt;p&gt;Covenants are a way of expressing restrictions on Bitcoin. Covenants, while
possible to implement as an extension to Bitcoin, do not exist natively. To
enable them requires the Bitcoin community to agree upon upgrades such as CTV,
CAT, CSFS, and more.  This paper serves to demonstrate at a high level how
covenants could be introduced to Bitcoin without a soft fork using Functional
Encryption and Zero Knowledge Proofs.
&lt;a href=&quot;/public/pdfs/fedcov.pdf&quot;&gt;Read the full paper.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Spookchains: Drivechain Analog with Trusted Setup & APO</title>
   <link href="/bitcoin/2022/09/14/drivechain-apo/"/>
   <updated>2022-09-14T00:00:00+00:00</updated>
   <id>/bitcoin/2022/09/14/drivechain-apo</id>
   <content type="html">&lt;p&gt;This post draws heavily from &lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019976.html&quot;&gt;Zmnscpxj’s fantastic
post&lt;/a&gt;
showing how to make drivechains with recursive covenants. In this post, I will
show similar tricks that can accomplish something similar using ANYPREVOUT with
a one time trusted setup ceremony.&lt;/p&gt;

&lt;p&gt;This post presents general techniques that could be applied to many
different types of covenant.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;note: I originally wrote this around May 5th, 2022, and shared it with a
limited audience&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/spookchain.png&quot; alt=&quot;Spooky Chains&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;peano-counters&quot;&gt;Peano Counters&lt;/h1&gt;

&lt;p&gt;The first component we need to build is a Peano counter graph. Instead
of using sha-256, like in Zmnscpxj’s scheme, we will use a key and
build a simple 1 to 5 counter that has inc / dec.&lt;/p&gt;

&lt;p&gt;Assume a key K1…K5, and a point NUMS which is e.g.
HashToCurve(“Spookchains”).&lt;/p&gt;

&lt;p&gt;Generate scripts as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;1 || K1&amp;gt; CHECKSIG
...
&amp;lt;1 || K5&amp;gt; CHECKSIG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now generate 2 signatures under Ki with flags &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGHASH_SINGLE |
SIGHASH_ANYONECANPAY | SIGHASH_ANYPREVOUT&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;rule-increment&quot;&gt;Rule Increment&lt;/h2&gt;
&lt;p&gt;For each Ki, when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i &amp;lt; 5&lt;/code&gt;, create a signature that covers a
transaction described as:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Amount: 1 satoshi
Key: Tr(NUMS, {&amp;lt;1 || K{i+1}&amp;gt; CHECKSIG})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rule-decrement&quot;&gt;Rule Decrement&lt;/h2&gt;
&lt;p&gt;For each Ki, when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i &amp;gt; 1&lt;/code&gt; The second signature should cover:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Amount: 1 satoshi
Key: Tr(NUMS, {&amp;lt;1 || K{i-1}&amp;gt; CHECKSIG})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Are these really Peano?&lt;/em&gt; Sort of. While a traditional Peano numeral
is defined as a structural type, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Succ(Succ(Zero))&lt;/code&gt;, here we
define them via a Inc / Dec transaction operator, and we have to
explicitly bound these Peano numbers since we need a unique key per
element. They’re at least spiritually similar.&lt;/p&gt;

&lt;h2 id=&quot;instantiation&quot;&gt;Instantiation&lt;/h2&gt;
&lt;p&gt;Publish a booklet of all the signatures for the Increment and
Decrement rules.&lt;/p&gt;

&lt;p&gt;Honest parties should destroy the secret key sets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To create a counter, simply spend to output C:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Amount: 1 satoshi
Key: Tr(NUMS, {&amp;lt;1 || K1&amp;gt; CHECKSIG})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The signature from K1 can be bound to C to ‘transition’ it to (+1):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Amount: 1 satoshi
Key: Tr(NUMS, {&amp;lt;1 || K2&amp;gt; CHECKSIG})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which can then transition to (+1):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Amount: 1 satoshi
Key: Tr(NUMS, {&amp;lt;1 || K3&amp;gt; CHECKSIG})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which can then transition (-1) to:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Amount: 1 satoshi
Key: Tr(NUMS, {&amp;lt;1 || K2&amp;gt; CHECKSIG})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can repeat indefinitely.&lt;/p&gt;

&lt;p&gt;We can generalize this technique from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1...5&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1...N&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;handling-arbitrary-deposits--withdrawals&quot;&gt;Handling Arbitrary Deposits / Withdrawals&lt;/h1&gt;

&lt;p&gt;One issue with the design presented previously is that it does not
handle arbitrary deposits well.&lt;/p&gt;

&lt;p&gt;One simple way to handle this is to instantiate the protocol for every
amount you’d like to support.&lt;/p&gt;

&lt;p&gt;This is not particularly efficient and requires a lot of storage
space.&lt;/p&gt;

&lt;p&gt;Alternatively, divide (using base 2 or another base) the deposit
amount into a counter utxo per bit.&lt;/p&gt;

&lt;p&gt;For each bit, instead of creating outputs with 1 satoshi, create
outputs with 2^i satoshis.&lt;/p&gt;

&lt;p&gt;Instead of using keys &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K1...KN&lt;/code&gt;, create keys &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K^i_j&lt;/code&gt;, where i
represents the number of sats, and j represents the counter. Multiple
keys are required per amount otherwise the signatures would be valid
for burning funds.&lt;/p&gt;

&lt;h2 id=&quot;splitting-and-joining&quot;&gt;Splitting and Joining&lt;/h2&gt;

&lt;p&gt;For each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K^i_j&lt;/code&gt;, it may also be desirable to allow splitting or
joining.&lt;/p&gt;

&lt;p&gt;Splitting can be accomplished by pre-signing, for every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K^i_j&lt;/code&gt;, where
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i!=0&lt;/code&gt;, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGHASH_ALL | SIGHASH_ANYPREVOUT&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Input: 2^i sats with key K^i_j
Outputs: 
    - 2^i-1 sats to key K^{i-1}_j
    - 2^i-1 sats to key K^{i-1}_j
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Joining can be accomplished by pre-signing, for every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K^i_j&lt;/code&gt;, where
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i!=MAX&lt;/code&gt;, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGHASH_ALL | SIGHASH_ANYPREVOUT&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Inputs:
    - 2^i sats with key K^i_j
    - 2^i sats with key K^i_j
Outputs: 
    - 2^i+1 sats to key K^{i+1}_j
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;N.B.: Joining allows for third parties to deposit money in externally,
that is not a part of the covenant.&lt;/p&gt;

&lt;p&gt;The splitting and joining behavior means that spookchain operators
would be empowered to consolidate UTXOs to a smaller number, while
allowing arbitrary deposits.&lt;/p&gt;

&lt;h1 id=&quot;one-vote-per-block&quot;&gt;One Vote Per Block&lt;/h1&gt;

&lt;p&gt;To enforce that only one vote per block mined is allowed, ensure that
all signatures set the input sequence to 1 block. No CSV is required
because nSequence is in the signatures already.&lt;/p&gt;

&lt;h1 id=&quot;terminal-states--thresholds&quot;&gt;Terminal States / Thresholds&lt;/h1&gt;

&lt;p&gt;When a counter reaches the Nth state, it represents a certain amount
of accumulated work over a period where progress was agreed on for
some outcome.&lt;/p&gt;

&lt;p&gt;There should be some viable state transition at this point.&lt;/p&gt;

&lt;p&gt;One solution would be to have the money at this point sent to an
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OP_TRUE&lt;/code&gt; output, which the miner incrementing that state is
responsible for following the rules of the spookchain. Or, it could be
specified to be some administrator key / federation for convenience,
with a N block timeout that degrades it to fewer signers (eventually
0) if the federation is dead to allow recovery.&lt;/p&gt;

&lt;p&gt;This would look like, from any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K^i_j&lt;/code&gt;, a signature for a transaction
putting it into an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OP_TRUE&lt;/code&gt; and immediately spending it. Other
spookchain miners would be expected to orphan that miner otherwise.&lt;/p&gt;

&lt;h1 id=&quot;open-states--proposals&quot;&gt;Open States / Proposals&lt;/h1&gt;

&lt;p&gt;From a state &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K^i_1&lt;/code&gt;, the transaction transitioning to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K^i_2&lt;/code&gt; can be
treated as ‘special’ and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OP_RETURN&lt;/code&gt; output type can be used to
commit to, e.g., the outputs that must be created in when the Terminal
State is reached. This clarifies the issue of “what is being voted
on”.&lt;/p&gt;

&lt;p&gt;This method does not &lt;em&gt;lock in&lt;/em&gt; at a consensus layer what Terminal
State is being voted on.&lt;/p&gt;

&lt;p&gt;In certain circumstances, without violating the one-time-setup
constraint, if a fixed list of withdrawer’s addresses is known in
advance, the Open States could cover withdrawals to specific
participants, which then must collect a certain number of votes from
miners.  However, it seems impossible, without new primitives, for an
arbitrary transaction proposal to be voted on.&lt;/p&gt;

&lt;h1 id=&quot;setup-variants&quot;&gt;Setup Variants&lt;/h1&gt;

&lt;h2 id=&quot;xpubs&quot;&gt;xpubs&lt;/h2&gt;

&lt;p&gt;Instead of using randomly generated keys for each state, define each
to be an xpub and derive a path where it is k/i/j for each
state/satoshi amount. This saves some data, and also requires less
entropy.&lt;/p&gt;

&lt;h3 id=&quot;trustless-data-commit&quot;&gt;Trustless Data Commit:&lt;/h3&gt;

&lt;p&gt;commit to the hash of the entire program spec as a tweak to the xpub,
so that someone can quickly verify if they have all the signatures you
are expected to generate if honest.&lt;/p&gt;

&lt;p&gt;One way to do this is to convert a hash to a list of HD Child Numbers
(9 of them) deterministically, and tweak the xpub by that. This is a
convenient, yet inefficient, way to tweak an xpub because the child
has a normal derivation path for signing devices.&lt;/p&gt;

&lt;h2 id=&quot;single-party&quot;&gt;Single Party&lt;/h2&gt;

&lt;p&gt;A single party pre-signs all the transactions for the spookchain, and
then deletes their xpriv.&lt;/p&gt;

&lt;p&gt;You trust them to have deleted the key, and signed properly, but you
do not trust whoever served you the spookchain blob to have given you
all the state transitions because of the trustless data commitment.&lt;/p&gt;

&lt;h2 id=&quot;musig-multi-party&quot;&gt;MuSig Multi-Party&lt;/h2&gt;

&lt;p&gt;Define a MuSig among all participants in the setup ceremony, N-of-N.&lt;/p&gt;

&lt;p&gt;Now you simply trust that any one person in the one-time-setup was
honest! Very good.&lt;/p&gt;

&lt;h2 id=&quot;unaggregated-multi-party&quot;&gt;Unaggregated Multi-Party&lt;/h2&gt;

&lt;p&gt;Allow for unaggregated multi-sig keys in the spec. This grows with
O(signers), however, it means that a-la-carte you can aggregate setups
from random participants who never interacted / performed setup
ceremonies independently if they signed the same specs.&lt;/p&gt;

&lt;p&gt;Can also combine multiple MuSig Multi-Parties in this way.&lt;/p&gt;

&lt;p&gt;This is nice because MuSig inherently implies the parties colluded at
one point to do a MuSig setup, whereas unaggregated multi-sig could be
performed with no connectivity between parties.&lt;/p&gt;

&lt;h2 id=&quot;soft-forking-away-trust&quot;&gt;Soft Forking Away Trust&lt;/h2&gt;

&lt;p&gt;Suppose a spookchain becomes popular. You could configure your client
to reject invalid state transitions, or restrict the spookchain keys
to only sign with the known signatures. This soft fork would smoothly
upgrade the trust assumption.&lt;/p&gt;

&lt;h2 id=&quot;symmetry-of-state-transition-rules--dag-covenants&quot;&gt;Symmetry of State Transition Rules &amp;amp; DAG Covenants&lt;/h2&gt;

&lt;p&gt;We could have our increment state transitions be done via a trustless
covenant, and our backwards state transitions be done via the setup.&lt;/p&gt;

&lt;p&gt;This would look something like the following for state i:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Tr(NUMS, {
    `&amp;lt;sig for state K_{i+1}&amp;gt; &amp;lt;1 || PK_nonsecret&amp;gt; CHECKSIG`,
    `&amp;lt;1 || Ki&amp;gt; CHECKSIG`
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The advantage of such an optimization is theoretically nice because it
means that &lt;em&gt;only&lt;/em&gt; the non-destructuring recursive part of the
computation is subject to the one-time-setup trust assumption, which
might be of use in various other protocols, where recursivity might
only be unlocked e.g. after a timeout (but for spookchains it is used
at each step).&lt;/p&gt;

&lt;p&gt;A compiler writer might perform this task by starting with an arbitrary
abstract graph, and then removing edges selectively (a number of heuristics may
make sense, e.g., to minimize reliance on one-time-setup or minimize costs)
until the graph is a Directed Acyclic Graph, consisting of one or more
components, compiling those with committed covenants, and then adding the
removed edges back using the one-time-setup key materials.&lt;/p&gt;

&lt;h1 id=&quot;commentary-on-trust-and-covenantiness&quot;&gt;Commentary on Trust and Covenantiness&lt;/h1&gt;

&lt;p&gt;Is this a covenant? I would say “yes”. When I defined covenants in my
&lt;em&gt;Calculus of Covenants&lt;/em&gt; post, it was with a particular set of
assumptions per covenant.&lt;/p&gt;

&lt;p&gt;Under that model, you could, e.g., call a 7-10 multi-sig with specific
committed instructions as 4-10 honest (requires 4 signatories to be
honest to do invalid state transition) and 4-10 killable (requires 4
signatories to die to have no way of recovering).&lt;/p&gt;

&lt;p&gt;For emulations that are pre-signed, like the varieties used to emulate
CTV, it is a different model because if your program is correct and
you’ve pre-gotten the signatures for N-N it is 1-N honest (only 1
party must be honest to prevent an invalid state transition) and
unkillable (all parties can safely delete keys).&lt;/p&gt;

&lt;p&gt;I model these types of assumptions around liveness and honesty as
different ‘complexity classes’ than one another.&lt;/p&gt;

&lt;p&gt;What I would point out is that with the counter model presented above,
this is entirely a pre-signed 1-N honest and unkillable covenant that
requires no liveness from signers. Further, with APO, new instances of
the covenant do not require a new set of signers, the setup is truly
one-time. Therefore this type of covenant exists in an even lower
trust-complexity class than CTV emulation via presigneds, which
requires a new federation to sign off on each contract instance.&lt;/p&gt;

&lt;p&gt;With that preface, let us analyze this covenant:&lt;/p&gt;

&lt;p&gt;1) A set of sets of transaction intents (a family), potentially
recursive or co-recursive (e.g., the types of state transitions that
can be generated).  These intents can also be represented by a
language that generates the transactions, rather than the literal
transactions themselves. We do the family rather than just sets at
this level because to instantiate a covenant we must pick a member of
the family to use.&lt;/p&gt;

&lt;p&gt;The set of sets of transaction intents is to increment / decrement to
a successor or predecessor, or to halve into two instances or double
value by adding funds. Each successor or predecessor is the same type
of covenant, with the excetion of the first and last, which have some
special rules.&lt;/p&gt;

&lt;p&gt;2) A verifier generator function that generates a function that
accepts an intent that is any element of one member of the family of
intents and a proof for it and rejects others.&lt;/p&gt;

&lt;p&gt;The verifier generator is the simple APO CHECKSIG script.&lt;/p&gt;

&lt;p&gt;3) A prover generator function that generates a function that takes an
intent that is any element of one member of the family and some extra
data and returns either a new prover function, a finished proof, or a
rejection (if not a valid intent).&lt;/p&gt;

&lt;p&gt;The prover generator is the selection of the correct signature from a
table for a given script.&lt;/p&gt;

&lt;p&gt;Run the prover generator with the private keys present &lt;em&gt;once&lt;/em&gt; to
initialize over all reachable states, and cache the signatures, then
the keys may be deleted for future runs.&lt;/p&gt;

&lt;p&gt;4) A set of proofs that the Prover, Verifier, and a set of intents are
“impedance matched”, that is, all statements the prover can prove and
all statements the verifier can verify are one-to-one and onto (or
something similar), and that this also is one-to-one and onto with one
element of the intents (a set of transactions) and no other.&lt;/p&gt;

&lt;p&gt;At a given key state the only things that may happen are signed
transactions, no other data is interpreted off of the stack. Therefore
there is perfect impedance match.&lt;/p&gt;

&lt;p&gt;5) A set of assumptions under which the covenant is verified (e.g., a
multi-sig covenant with at least 1-n honesty, a multisig covenant with
any 3-n honesty required, Sha256 collision resistance, Discrete Log
Hardness, a SGX module being correct).&lt;/p&gt;

&lt;p&gt;Uniquely, that during the setup phase at least one of the keys
were faithfully deleted.&lt;/p&gt;

&lt;p&gt;The usual suspects for any bitcoin transaction are also assumed for
security.&lt;/p&gt;

&lt;p&gt;6) Composability:&lt;/p&gt;

&lt;p&gt;The Terminal State can pay out into a pre-specified covenant if
desired from any other family of covenants.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>7 Theses on a next step for BIP-119</title>
   <link href="/bitcoin/2022/04/17/next-steps-bip119/"/>
   <updated>2022-04-17T00:00:00+00:00</updated>
   <id>/bitcoin/2022/04/17/next-steps-bip119</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Warning: this post assumes a great deal of context on CTV is already
understood by the reader.  If you are not familiar, you may wish to start with
&lt;a href=&quot;https://utxos.org&quot;&gt;utxos.org&lt;/a&gt;, &lt;a href=&quot;https://rubin.io/advent21&quot;&gt;the advent
calendar&lt;/a&gt;, and the &lt;a href=&quot;https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki&quot;&gt;BIP-119
text&lt;/a&gt; and
&lt;a href=&quot;https://github.com/bitcoin/bitcoin/pull/21702&quot;&gt;reference implementation&lt;/a&gt;, as
those may provide much needed context about what CTV is and why a next step is
being discussed. If you only have a little time, minimally I would advise these
two from the advent calendar as the minimum required context: &lt;a href=&quot;https://rubin.io/bitcoin/2021/12/05/advent-8/&quot;&gt;Contracting
Primitives and Upgrades to
Bitcoin&lt;/a&gt; and &lt;a href=&quot;https://rubin.io/bitcoin/2021/12/24/advent-27/&quot;&gt;RoadMap or Load o’
Crap?&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This post starts with a conclusion:&lt;/p&gt;

&lt;p&gt;Within a week from today, you’ll find software builds for a CTV Bitcoin Client
for all platforms linked here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mac OSX TODO:&lt;/li&gt;
  &lt;li&gt;Windows TODO:&lt;/li&gt;
  &lt;li&gt;Linux TODO:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These will be built using GUIX, which are reproducible for verification.  The
intended code to be built will be
https://github.com/JeremyRubin/bitcoin/tree/checktemplateverify-v23.0rc5-paramsv0
which is based on Bitcoin Core v23.0 release candidate 5, with commit hash
dd9a4e0ea8a109d1607ca1ec16119b1bc952d8b0. You can begin testing this
immediately, and even producing your own GUIX builds as well.&lt;/p&gt;

&lt;p&gt;Signatures for the builds will be available below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TODO: … .asc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source tarball:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TODO: … .tar.gz&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The client has a Speedy Trial release similar to Taproots with parameters
proposed to be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Signal Start MTP: 1651708800 (May 5th, 2022, 00:00 UTC)&lt;/li&gt;
  &lt;li&gt;Signal Timeout MTP: 1660262400 (August 12th, 2022, 00:00 UTC)&lt;/li&gt;
  &lt;li&gt;Activation Height: 762048 (Approximately Nov 9th)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the appendix to verify these parameters.&lt;/p&gt;

&lt;p&gt;This ensures 6 signalling periods to activate CTV. The Start and Timeout are
targeting mid-period (if hashrate stays steady) times to ensure that it is
unlikely we would have more or fewer periods.&lt;/p&gt;

&lt;p&gt;The week delay between this post and builds is to provide time for review on
the selection of parameters as well as ability to rebase onto a final v23.0
release, should it become ready within the week. Backports are in the works for
v22.0, but release builds may not be made available as Bitcoin’s release build
processes have changed since v22.0 to use GUIX. The branch for backports is
available here:
https://github.com/JeremyRubin/bitcoin/tree/checktemplateverify-v22.0 with
current commit hash 4d2c39314834a28cd46da943a12300cca8ffcb10, if you would like
to help with testing.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;why-this-why-now&quot;&gt;Why this, why now?&lt;/h2&gt;

&lt;p&gt;I’ve just returned from the Bitcoin Miami “Bacchanal”. Personally, I had a
couple different goals for being there&lt;sup id=&quot;fnref:skate&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:skate&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. One of my primary focuses was
on talking to as many people as possible about BIP-119 and the future road to
take.&lt;/p&gt;

&lt;p&gt;While consensus has to happen among a much broader set of people than can fit
in a conference in Miami, the reality is that there were more than 20,000
Bitcoiners at this event and a good representation across industry, developers,
journalists, podcasters, plebs, whales, pool operators, miners, venture
capitalists, and more. To say it was a representative sample wouldn’t be fair,
but it certainly was not a homogeneous crowd. And I spoke to as many people as
I could.&lt;/p&gt;

&lt;p&gt;There were a couple common threads across the feedback I received:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Agree or disagree with CTV in particular, folks generally liked how/that I
was driving a conversation forward, and respected the hustle required to do
so.&lt;/li&gt;
  &lt;li&gt;A lot of people felt that CTV would help them in a tangible way, and more
than a few times, individuals approached me with a concrete use case they
&lt;em&gt;needed&lt;/em&gt; but had not fully written it up yet.&lt;/li&gt;
  &lt;li&gt;A lot of people wanted to know what the next step was and what I was
planning to do to get it activated and when.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some people had some suggestions on what I should do as a next step:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Some folks said I should just do a UASF and rally the users.&lt;/li&gt;
  &lt;li&gt;Some said I needed to organize a summit for developers to explore covenants&lt;sup id=&quot;fnref:pleb&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:pleb&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
  &lt;li&gt;Some said I didn’t need to do a UASF, nor advocate for it, but I &lt;em&gt;did&lt;/em&gt; need
to decide on exact release parameters and distribute a reproducible binary
so that it was clear what should be run and when so that end-to-end
activation testing could proceed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s (un?)remarkably difficult to integrate all feedback on a complex topic
like a Bitcoin upgrade coherently. But, having thought it through, I decided
that the approach above was the correct next step. Below, you’ll find some
reasoning on why I believe this to be proper and not out-of-line with how soft-fork
development should go.&lt;/p&gt;

&lt;p&gt;However, if I’m wrong &lt;em&gt;in your view&lt;/em&gt;, consider me a mere messenger and &lt;em&gt;please
don’t shoot the messenger&lt;/em&gt;. You just need to communicate clearly to the
community why they should &lt;em&gt;not&lt;/em&gt; run and signal for CTV and I’m confident that
the wisdom of the consensus set will decide in it’s best interests.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So why ship a binary and release parameters?&lt;/p&gt;

&lt;h1 id=&quot;1-ctv-passes-a-basic-pre-flight-checklist&quot;&gt;1) CTV passes a basic pre-flight checklist.&lt;/h1&gt;

&lt;p&gt;This discussion has to start anchored in a “pre-flight checklist” for CTV.
These are fundamental questions that we should be able to tick boxes for for
&lt;em&gt;any&lt;/em&gt; proposed upgrade…  Sadly, the community at large doesn’t have a
codified checklist&lt;sup id=&quot;fnref:doit&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:doit&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, but personally I tick off the following boxes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;No material changes to the BIP/Spec/Ref Impl necessary for ~2 years (beyond rebases).&lt;/li&gt;
  &lt;li&gt;A reasonably well reviewed and tested PR-implementation exists.&lt;/li&gt;
  &lt;li&gt;~5 Months of a 5.5 BTC Bounty for bugs in CTV&lt;/li&gt;
  &lt;li&gt;I socialized a similar
&lt;a href=&quot;https://rubin.io/bitcoin/2021/12/24/advent-27/&quot;&gt;roadmap&lt;/a&gt; 5 months ago,
which received a reasonably warm response so there are ‘few surprises’ here
against previously communicated intent.&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://utxos.org/signals&quot;&gt;community&lt;/a&gt; of supporters: breakdown, 16
supporting orgs, 109 individuals, 3 mining pools (totalling about 15-18%
depending on when you look).&lt;/li&gt;
  &lt;li&gt;Only 3 individual NACKs + 1 org (owned by one
of the individuals).
You should read them yourself, but I think the NACKs are summarizable as “it’s
too soon” and “there should be a different process” rather than “I have
identified a flaw in the proposal”. See section 4 for more on this.
 The NACKs are linked below:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/JeremyRubin/utxos.org/issues/27&quot;&gt;Michael Folkson&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/JeremyRubin/utxos.org/issues/28&quot;&gt;John Carvalho/Synonym&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/JeremyRubin/utxos.org/issues/39&quot;&gt;Dr M Robotix&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ample time to have produced a nack with a technical basis.&lt;/li&gt;
  &lt;li&gt;7 regular meetings over ~16 weeks to discuss the upgrade.&lt;/li&gt;
  &lt;li&gt;There exists software from multiple different parties for using CTV to
accomplish various tasks. None of these users have uncovered issue or difficulty
with CTV.&lt;/li&gt;
  &lt;li&gt;Many in the community are arguing for &lt;em&gt;more&lt;/em&gt; functionality than what CTV
offers, rather than that the functionality of CTV might be unsafe. CTV ends up
being close to a subset of functionality offered by these upgrades.&lt;/li&gt;
  &lt;li&gt;CTV does not impose a substantial validation burden and is designed carefully to
not introduce any Denial of Service vectors.&lt;/li&gt;
  &lt;li&gt;There exists a Signet with CTV active where people have been able to experiment.&lt;/li&gt;
  &lt;li&gt;Backports for current release and prior release (will be) available.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;2-unforced-errors&quot;&gt;2) Unforced errors&lt;/h1&gt;

&lt;p&gt;In tennis, an unforced error is a type of lost point where a player loses
because of their own mistake. For example, suppose your opponent shoots a shot
that’s a lob high in the air and slow. But it looks like it’s going out, so you
do a little victory dance only to uncover that… the ball lands in. You had enough
time to get to the ball, but you chose not to because you didn’t think it would
go in. Contrast this to a forced error – your opponent hits a shot so hard and
fast across the court no human could reach it let alone return it&lt;sup id=&quot;fnref:winner&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:winner&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;What’s this got to do with Bitcoin?&lt;/p&gt;

&lt;p&gt;Community consensus is the ball, and we don’t know if by August it will be in
or out.&lt;/p&gt;

&lt;p&gt;Getting to where the ball might land is preparing a software artifact that can
activate.&lt;/p&gt;

&lt;p&gt;If an artifact isn’t prepared that does this, even if community consensus is
ready by then, it’s an unforced error that it wasn’t ready which precludes us
from being live in August.&lt;/p&gt;

&lt;p&gt;When should you avoid an unforced error like this? When the cost of getting to
the ball is sufficiently small.&lt;/p&gt;

&lt;p&gt;I’m already maintaining a backportable to Bitcoin Core 23 and 22 patchset for
CTV. It’s not much work to set parameters and do a release.&lt;/p&gt;

&lt;p&gt;Which brings us to…&lt;/p&gt;

&lt;h1 id=&quot;3-product-management-is-not-my-job--its-yours&quot;&gt;3) Product Management is not “my Job” – it’s yours.&lt;/h1&gt;

&lt;p&gt;Devs don’t swing the racquet, we get to the ball. It’s the community’s job to
decide to swing or not. One might rebutt this point – the community isn’t well
informed to make that call, but fortunately devs and other tuned in individuals
can serve as “coaches” to the public and advise on if the swing should happen.&lt;/p&gt;

&lt;p&gt;Producing the code, the tools, the reviews, the builds, the dates, these are all
getting to the ball activities.&lt;/p&gt;

&lt;p&gt;It’s possible that as a developer, one could say that we should not get to the ball
unless we know the community wants to swing.&lt;/p&gt;

&lt;p&gt;But that’s false. What if the community wants to take a swing at it but
developers haven’t gotten to the ball? What if developers &lt;em&gt;refuse&lt;/em&gt; to get to the
ball because they don’t want the community to take that shot? Well, tennis can
be a game of doubles (I’m really sticking with this metaphor), and maybe your
teammate – the community itself – strives to go for it and sprints cross court
to make up and take a shot. Maybe that shot looks like a UASF, maybe it looks
like a hard fork, maybe it’s lower quality since there was less time to make the
right shot placement (worse code if usual devs don’t review). But ultimately,
the economic majority is what backstops this, the devs just have the
opportunity to help it along, perhaps, a little smoother.&lt;/p&gt;

&lt;p&gt;Largely, the formal critiques of CTV (the 3 NACKs) are based on topics of
whether or not to swing the racquet, not if we should be at the ball.
&lt;em&gt;There are other critiques as well, about the generality of the upgrade, but
we’ll discuss those later in this post.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ll excerpt some quotes from the NACKs below:&lt;/p&gt;

&lt;p&gt;Michael writes,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I also think attempting regular soft forks with single features is a
disturbing pattern to get into having just activated Taproot. As I say in the
linked post it means less and less community scrutiny of consensus changes, it
becomes a full time job to monitor the regular soft forks being activated (or
attempting to be activated) and only a tiny minority of the community can
dedicate the time to do that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So this seems to be a point largely about product management – we should only
take a shot when we can line up more than once, due to the cost of swinging the
racquet. Not really my job, it’s the communities.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hence I’d like to register a “No” soft signal as I fundamentally disagree that a
CTV soft fork should be attempted in the near future and my concerns over
premature activation outweigh my enthusiasm for digging into the speculated real
world use cases of CTV.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you disagree that it should be attempted, that’s fine. Your time to voice
your concerns is in making the swing.&lt;/p&gt;

&lt;p&gt;John writes,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Generally, I do not think Bitcoin is ready for any new soft forked features at
all in the short term. Taproot just arrived and there is already so much work to
be done to adopt and utilize it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a product management point. “Work on feature X should block all work on
other features”. It’s not a point on if CTV is a feature of independent merit.&lt;/p&gt;

&lt;p&gt;Further, it’s a layer violation. Wallet progress is wholly independent of
consensus upgrades, and generally, we don’t operate on a waterfall development
model.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Any improvements CTV-eltoo may bring to LN are not significant enough to claim
they are urgent for adoption or R&amp;amp;D for LN progress and adoption.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, a product management point. How do we measure what is important to the
Lightning Community?  Oh, on &lt;a href=&quot;https://utxos.org/signals&quot;&gt;utxos.org&lt;/a&gt;, there are
multiple Lightning Network companies and individuals (Lightning Labs, Muun
Wallet, Roasbeef, ZmnSCPxj, LN Markets, Breez, fiatjaf, and more). So if &lt;em&gt;that&lt;/em&gt;
represents the community, then it seems like a greenlight.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Since I am not qualified, nor are 99% of Bitcoiners, to evaluate this deeply,
I feel much more time and scrutiny is required to accept CTV and the related
projects Jeremy has prepared with it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;If you’re not qualified, remind me why we’re listening?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sorry, I couldn’t help the snark. Graciously, let’s accept the framing for a
second – who are the stakeholders who need to sign off? What is this process
like, concretely?&lt;/p&gt;

&lt;p&gt;Is this a process that happens before or after we ‘get to the ball’?&lt;/p&gt;

&lt;p&gt;It can definitely be after we get to the ball, and the decision to swing or not
is a bit too product-management-y for how a dev should engage.&lt;/p&gt;

&lt;p&gt;Also, related projects are a bit like the mix-ins at Cold Stone Creamery™. You
are free, of course, to just get ice cream! That there are a myriad of uses
doesn’t mean you need to accept all of them, it’s sufficient to just consider
the one or two you care about.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I am currently happy with what we have in Bitcoin, and would prefer Core
development prioritize optimizations and cleanup work over more and more
features that have no urgent need or chance of adoption anytime soon.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This belies a basic misunderstanding of FLOSS:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;People work on what they want to&lt;/li&gt;
  &lt;li&gt;CTV is already ‘finished’&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A non-dev’s preference to spend time on cleanup or optimization doesn’t make
any dev write that code or shift focus. Most core devs don’t have a boss, and
if they do, it’s probably not you! It’s structurally impossible to direct the
attention of developers.&lt;/p&gt;

&lt;p&gt;And it so happens that &lt;em&gt;I&lt;/em&gt; am not happy with what we have in Bitcoin, so I did
something about it. With respect to adoption,  people will likely be using CTV
pretty soon after it’s available, since it is a big step up for a number of
critical uses like vaults. These applications are already being built. They can
be used on signet which can be deployed to mainnet immediately&lt;sup id=&quot;fnref:sec&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:sec&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;. The
implementation details for basic custody contracts are pretty simple and don’t
require the level of coordination for support that other contracts like
lightning or DLCs, so adoption can be at the individual level.&lt;/p&gt;

&lt;p&gt;The path around prioritization remains a product management question, and not
something devs can be compelled to follow.&lt;/p&gt;

&lt;h1 id=&quot;4-there-are-other-things-to-work-on&quot;&gt;4) There are other things to work on.&lt;/h1&gt;

&lt;p&gt;I can get to the ball for this shot, but then I’d like to work on getting in
position for the next shot on time.&lt;/p&gt;

&lt;p&gt;There are other important technologies to work on, keeping covenants in limbo
ties up a lot of human capital in trying to solve for &lt;em&gt;getting something&lt;/em&gt;, vs.
&lt;em&gt;having something&lt;/em&gt; and being able to work on building solutions using it plus
designing new technologies that make Bitcoin even better in different or
complimentary ways.&lt;/p&gt;

&lt;p&gt;What’s the right amount of rumination (chewing) to swallowing? Eventually, the
mouthful you have is stopping you from taking the next bite.&lt;/p&gt;

&lt;h1 id=&quot;5-consensus-is-memoryless&quot;&gt;5) Consensus is memoryless&lt;/h1&gt;

&lt;p&gt;A memoryless process is something that “never makes progress”. For example,
consider a board game, where you need to roll a 6 to win. You expect to need 6
rolls to win. You roll a 5. How many more rolls do you need? It’s not 5. It’s 6
– the process is memoryless.&lt;/p&gt;

&lt;p&gt;Clearly consensus isn’t entirely memoryless. Something that is a concept only
obviously has to be turned into a hard artifact.&lt;/p&gt;

&lt;p&gt;CTV has been a ‘hard artifact’ for 2 years. 2 years ago I took a poll of 40 or
so developers who attended my utxos.org workshop in Feb 2020. An average
sentiment was that maybe we try to do CTV in a year or so, and that we could
definitely do it maybe in 2 years.&lt;/p&gt;

&lt;p&gt;I hear the same today from people who advocate a slower process. Maybe a year
from now, we could definitely do it in maybe 2 years.&lt;/p&gt;

&lt;p&gt;In 2 years, if we wait, won’t we hear the same?&lt;/p&gt;

&lt;p&gt;Here’s a few reason why we might hear the same complaints in the future:&lt;/p&gt;

&lt;p&gt;In 2 years, suppose Bitcoin is ~2x the price.&lt;/p&gt;

&lt;p&gt;Shouldn’t we acknowledge twice as much at risk and do twice as much work to
security audit things going into it? What if it’s not just El Salvador with
Bitcoin as a national currency, but now Guatamala too?&lt;/p&gt;

&lt;p&gt;Suppose we want to get to a point where 50% of the community has reviewed a
change. In 2 years, what if the community is 2x the size?  Then even if we hit
50% of today’s community, we only have 25% of the community read up.&lt;/p&gt;

&lt;p&gt;Hopefully we keep innovating. And if we do keep innovating, we’ll come up with
new things.  If we come up with a new thing that’s 2x as good as CTV in 2 years,
but it takes another 2 years to implement it concretely, should we wait till we
finish that? But what happens when we come up with something 2x better than
that? Wait another 2 years? Now we’re 4 years out from when the swing to get CTV
over the net was doable, and we’d have 0 in hand solutions for the problems CTV
tries to solve.&lt;/p&gt;

&lt;p&gt;All this points to the nature of the memorylessness of trying to get consensus
in an open network.&lt;/p&gt;

&lt;p&gt;The best I can do is to get to the ball and let the community decide to take the
shot.&lt;/p&gt;

&lt;p&gt;Concretely – what is the cost to having CTV in bitcoin during this time while
the “better” alternative is being worked on, if we do decide to activate
knowing we might one day obsolete CTV? What are the benefits to having 3-5
years of basic covenants in the meantime? On the balance it seems, to me, net
positive. It also seems to be a decision that the community at large can judge
if the costs are worth the benefits.&lt;/p&gt;

&lt;h1 id=&quot;6-you-can-fight-against-it&quot;&gt;6) You can fight against it.&lt;/h1&gt;

&lt;p&gt;A criticism of the soft fork process is it’s not safe with Speedy Trial (ST)
and ST is bad so we shouldn’t do it.  This is not a strong criticism: with
Taproot,  our most important upgrade in years, went smoothly even though there
was sharp disagreement over the safety of the mechanism at the time.&lt;/p&gt;

&lt;p&gt;Here’s a breakdown of why Speedy Trial is OK from the perspective of different participants:&lt;/p&gt;

&lt;h2 id=&quot;you-want-ctv-and-wont-take-no-for-an-answer&quot;&gt;You want CTV and won’t take no for an answer.&lt;/h2&gt;

&lt;p&gt;Start with a ST. After 3 months, it either goes or it doesn’t. At least we were
at the ball.  Now, let’s do a UASF with a LOT=true setting. Because ST is a fail
fast, it’s in theory using time where otherwise we’d have to spend coordinating
for the harsher realities of a LOT=true effort, so it’s a happy-path
optimization.&lt;/p&gt;

&lt;p&gt;If you’re a miner, you should signal during the period.&lt;/p&gt;

&lt;h2 id=&quot;youd-like-ctv-and-might-take-no&quot;&gt;You’d like CTV and might take no.&lt;/h2&gt;

&lt;p&gt;ST is for you. Can always follow up with another ST if the first fails, or
another option if your opinion changes.&lt;/p&gt;

&lt;p&gt;If you’re a miner, you should signal during the period.&lt;/p&gt;

&lt;h2 id=&quot;you-do-not-want-ctv-but-if-others-do-want-it-whatever&quot;&gt;You do not want CTV, but if others do want it, whatever.&lt;/h2&gt;

&lt;p&gt;ST is for you – it only goes through if others signal for it.&lt;/p&gt;

&lt;p&gt;If you’re a miner, you can signal no during the period, and you can write a
blogpost on why you don’t.&lt;/p&gt;

&lt;h2 id=&quot;you-do-not-want-ctv-and-will-not-take-yes-for-an-answer&quot;&gt;You do not want CTV, and will not take yes for an answer.&lt;/h2&gt;

&lt;p&gt;I’ve written &lt;a href=&quot;https://github.com/jeremyrubin/forkd&quot;&gt;forkd software&lt;/a&gt; in 40 lines
of python which guarantees you to be on a non-activating chain.  Resist my
evil&lt;sup id=&quot;fnref:really&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:really&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; fork!&lt;/p&gt;

&lt;p&gt;If you’re a miner, you signal no during this period. You may want to optimize
the forkd code for never building on the chain you don’t like.&lt;/p&gt;

&lt;h1 id=&quot;7-bitcoin-core-is-not-bitcoin&quot;&gt;7) Bitcoin Core is not Bitcoin&lt;/h1&gt;

&lt;p&gt;Bitcoin Core is a ‘reference client’ for the Bitcoin network, but it is not the
job of &lt;em&gt;any&lt;/em&gt; of the maintainers of Bitcoin Core to decide what happens with respect to
consensus upgrades.&lt;/p&gt;

&lt;p&gt;When I’ve previously asked maintainers for clarity on what ‘merge rubric’ they
might apply to the CTV pull request, I’ve been effectively stonewalled with no
criterion (even for things that were historically merged) and claims that
soft-fork discussion is outside the purview of maintainership. To be clear, I’m
not asking maintainers &lt;em&gt;to merge&lt;/em&gt;, merely when they do make the decision to,
what they are evaluating. The reticence to make clear guidelines around this
was surprising to me, at first.&lt;/p&gt;

&lt;p&gt;But then I understood: it isn’t the maintainer’s fault that they cannot give me
any guidance, it’s how it &lt;strong&gt;must&lt;/strong&gt; be.&lt;/p&gt;

&lt;p&gt;The idea that Bitcoin Core might serve as the deciding body for consensus
upgrades puts developers of Bitcoin Core into a dangerous position in the
future, whereby various agents might wrongfully attempt to compel Core
developers (e.g., using the legal system) to release a soft-fork client for
whatever nefarious goal. Making it clear that soft-forks are released by
independent efforts and adopted by the community at large is the only process
we can take that keeps Bitcoin Core apolitical and unexposed.&lt;/p&gt;

&lt;p&gt;We’ve seen in other communities what it looks like when lead devs exert too
much influence over the protocol and reference clients directly. Not good. We
do not want to have a similar precedent for Bitcoin.&lt;/p&gt;

&lt;p&gt;While previous soft-forks have generally been released by Core, I have no
qualms with leading by example for how future soft-fork development should be.
And if Core wants to merge CTV and do a release with compatible parameters,
they are welcome to, without such a release being driven by the project
maintainers directly, but rather to maintain compatibility with the will of the
community.&lt;/p&gt;

&lt;p&gt;Thus, &lt;em&gt;Alea Iacta Est&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;bonus-what-do-i-do-now&quot;&gt;Bonus: What do I do now?&lt;/h1&gt;

&lt;p&gt;I believe the community’s next steps are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Evaluate the software proposed above and find any bugs (claim 5.5 BTC Bounties?)&lt;/li&gt;
  &lt;li&gt;Discuss vociferously through the next few months if BIP-119 should be
activated or not (that means you should e.g. post publicly if you/your org endorses
this particular path, cover it in your news org, etc).&lt;/li&gt;
  &lt;li&gt;Before the end of July, Miners should signal if the speedy trial should succeed&lt;/li&gt;
  &lt;li&gt;Before November, if Speedy Trial passes, then all users should ensure they
upgrade to validate CTV&lt;/li&gt;
  &lt;li&gt;If Speedy Trial fails, at least we were at the ball, and we can either try
again &lt;em&gt;next year&lt;/em&gt;, meaning CTV would be availble for use in at minimum 1.5
years, or we can re-evaluate the design of CTV against alternatives that
would take more time to prepare engineering wise (e.g., more general
covenants, small tweaks to CTV).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-is-jeremy-rubin-going-to-do&quot;&gt;What is &lt;em&gt;Jeremy Rubin&lt;/em&gt; going to do?&lt;/h2&gt;

&lt;p&gt;Well, at this point I am unemotional about any outcome. Judica, my startup, is
focused on Bitcoin infrastructure that can be used to great impact with or
without CTV, so I’ve explicitly positioned myself to be personally indifferent
to outcome. I personally think that CTV is ready to go, and will deliver
immense benefits to the network, so I’ll advocate for signalling for it.&lt;/p&gt;

&lt;p&gt;However, in my advocacy, I’ll be careful to note that it’s not a &lt;em&gt;must&lt;/em&gt;. All
actors must decide if it’s in their own rational self-interest to have the
soft-fork proceed.&lt;/p&gt;

&lt;h2 id=&quot;but-what-about-uasf&quot;&gt;But what about UASF?&lt;/h2&gt;

&lt;p&gt;Regrettably, no one has produced the ST compatible UASF code since last year,
for various reasons. I understand the motives and tradeoffs of a UASF out the
gate, but I still personally believe a UASF is best done as a follow-up to a
ST, as I detailed in my mailing list post on the subject
&lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018833.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;appendix-parameter-check&quot;&gt;Appendix: Parameter Check!&lt;/h1&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gdate &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;@1651708800 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;
Thu May  5 00:00:00 UTC 2022
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gdate &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;@1660262400 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;
Fri Aug 12 00:00:00 UTC 2022
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The below script simulates the passage of time and confirms that we are
beginning at an expected mid-period time, and we are also ending near a
mid-period time, given the assumed number of SIGNAL_PERIODS. This technique
should guarantee with high certainty at least SIGNAL_PERIODS - 1, and
repeating the simulation with up-to-date numbers as the signalling window
progresses will produce more accurate forecasts.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SIGNAL_PERIODS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1650301349&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;height_now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;732450&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;minutes_till_may_5th&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23457&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height_now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutes_till_may_5th&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expected Height&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;start_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expected Start Height&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Start is mid period: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2016.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;minutes_from_now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;In This many Minutes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutes_from_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;In This many days&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutes_from_now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;60.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;24.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stop_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGNAL_PERIODS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Stopping at height&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;total_blocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_now&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_blocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;End of signalling at expected time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromtimestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;active_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;762048&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;secs_till_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;active_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Active at&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromtimestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secs_till_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Expected Height 734795
Expected Start Height 735840
Start is mid period:  0.5183531746031746
In This many Minutes 33900
In This many days 23.541666666666668
Stopping at height 749952
End of signalling at expected time 2022-08-10 23:02:29
Active at 2022-11-09 23:02:29
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:skate&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;including roller skating along the beach of course… &lt;a href=&quot;#fnref:skate&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:pleb&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;in theory, pleb.fi was intended to be part of this… &lt;a href=&quot;#fnref:pleb&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:doit&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I think defining such a process more formally would be great, but it’d be controversial. &lt;a href=&quot;#fnref:doit&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:winner&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;technically, if you don’t touch it, this is a winner. A forced error, as &lt;a href=&quot;https://twitter.com/bitcoins/status/1516522926463410187&quot;&gt;Mike West&lt;/a&gt; notes, is where you still got your racquet to the ball. However, winners and forced errors are pretty similar in contrast to unforced errors. &lt;a href=&quot;#fnref:winner&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:sec&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;probably following a thorough security review &lt;a href=&quot;#fnref:sec&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:really&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;sigh, if you really think I’m not working in good faith it’s a lost cause… &lt;a href=&quot;#fnref:really&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A Calculus of Covenants</title>
   <link href="/bitcoin/2022/04/12/calc-cov/"/>
   <updated>2022-04-12T00:00:00+00:00</updated>
   <id>/bitcoin/2022/04/12/calc-cov</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This originally appeared on the &lt;a href=&quot;https://gnusha.org/pi/bitcoindev/CAD5xwhjBkKVuiPaRJZrsq+GcvSeht+SHvmmiH2MjnU2k1m_4gw@mail.gmail.com/&quot;&gt;mailing list&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a framework for thinking about covenants. It is most useful for modeling local covenants, that is, covenants where only one coin must be examined, and not multi-coin covenants whereby you could have issues with protocol forking requiring a more powerful stateful prover. It’s the model I use in Sapio.&lt;/p&gt;

&lt;p&gt;This is from the perspective of a developer trying to build infrastructure for covenants. from the perspective of bitcoin consensus, a covenant enforcing primitve would be something like OP_TLUV and less so it’s use in conjunction with other opcodes, e.g. OP_AMOUNT.&lt;/p&gt;

&lt;p&gt;One must also analyze all the covenants that one could author using a primitive, in some sense, to demonstrate that our understanding is sufficient. As a trivial example, you could use OP_DELETE_BITCOIN_ENTIRELY_IF_KNOWS_PREIMAGE_TO_X_OR_TLUV and just because you could use it safely for TLUV would not mean we should add that opcode if there’s some way of using it negatively.&lt;/p&gt;

&lt;p&gt;With that said, let us begin:&lt;/p&gt;

&lt;p&gt;I define a covenant primitive as follows:&lt;/p&gt;

&lt;p&gt;1) A set of sets of transaction intents (a family), potentially recursive or co-recursive (e.g., the types of state transitions that can be generated). These intents can also be represented by a language that generates the transactions, rather than the literal transactions themselves. We do the family rather than just sets at this level because to instantiate a covenant we must pick a member of the family to use.
2) A verifier generator function that generates a function that accepts an intent that is any element of one member of the family of intents and a proof for it and rejects others.
3) A prover generator function that generates a function that takes an intent that is any element of one member of the family and some extra data and returns either a new prover function, a finished proof, or a rejection (if not a valid intent).
4) A set of proofs that the Prover, Verifier, and a set of intents are “impedance matched”, that is, all statements the prover can prove and all statements the verifier can verify are one-to-one and onto (or something similar), and that this also is one-to-one and onto with one element of the intents (a set of transactions) and no other.
5) A set of assumptions under which the covenant is verified (e.g., a multi-sig covenant with at least 1-n honesty, a multisig covenant with any 3-n honesty required, Sha256 collision resistance, DLog Hardness, a SGX module being correct).&lt;/p&gt;

&lt;p&gt;To instantiate a covenant, the user would pick a particular element of the set of sets of transaction intents. For example, in TLUV payment pool, it would be the set of all balance adjusting transactions and redemptions. Note, we can ‘cleave’ covenants into separate bits – e.g. one TLUV + some extra CTV paths can be ‘composed’, but the composition is not guaranteed to be well formed.&lt;/p&gt;

&lt;p&gt;Once the user has a particular intent, they then must generate a verifier which can receive any member of the set of intents and accept it, and receive any transaction outside the intents and reject it.&lt;/p&gt;

&lt;p&gt;With the verifier in hand (or at the same time), the user must then generate a prover function that can make a proof for any intent that the verifier will accept. This could be modeled as a continuation system (e.g., multisig requires multiple calls into the prover), or it could be considered to be wrapped as an all-at-once function. The prover could be done via a multi-sig in which case the assumptions are stronger, but it still should be well formed such that the signers can clearly and unambiguously sign all intents and reject all non intents, otherwise the covenant is not well formed.&lt;/p&gt;

&lt;p&gt;The proofs of validity of the first three parts and the assumptions for them should be clear, but do not require generation for use. However, covenants which do not easily permit proofs are less useful.&lt;/p&gt;

&lt;p&gt;We now can analyze three covenants under this, plain CTV, 2-3 online multisig, 3-3 presigned + deleted.&lt;/p&gt;

&lt;p&gt;CTV:
1) Intent sets: the set of specific next transactions, with unbound inputs into it that can be mutated (but once the parent is known, can be filled in for all children).
2) Verifier: The transaction has the hash of the intent
3) Prover: The transaction itself and no other work
4) Proofs of impedance: trivial.
5) Assumptions: sha256
6) Composition: Any two CTVs can be OR’d together as separate leafs&lt;/p&gt;

&lt;p&gt;2-3 Multisig:
1) Intent: All possible sets of transactions, one set selected per instance
2) Verifier: At least 2 signed the transition
3) Prover: Receive some ‘state’ in the form of business logic to enforce, only sign if that is satisfied. Produce a signature.
4) Impedance: The business logic must cover the instance’s Intent set and must not be able to reach any other non-intent
5) Assumptions: at least 2 parties are ‘honest’ for both liveness and for correctness, and the usual suspects (sha256, schnorr, etc)
6) Composition: Any two groups can be OR’d together, if the groups have different signers, then the assumptions expand&lt;/p&gt;

&lt;p&gt;3-3 Presigned:
Same as CTV except:
5) Assumptions: at least one party deletes their key after signing&lt;/p&gt;

&lt;p&gt;You can also think through other covenants like TLUV in this model.&lt;/p&gt;

&lt;p&gt;One useful question is the ‘cardinality’ of an intent set. The useful notion of this is both in magnitude but also contains. Obviously, many of these are infinite sets, but if one set ‘contains’ another then it is definitionally more powerful. Also, if a set of transitions is ‘bigger’ (work to do on what that means?) than another it is potentially more powerful.&lt;/p&gt;

&lt;p&gt;Another question is around composition of different covenants inside of an intent – e.g., a TLUV that has a branch with a CTV or vice versa. We consider this outside the model, analysis should be limited to “with only these covenants what could you build”. Obviously, one recursive primitive makes all primitives recursive.&lt;/p&gt;

&lt;p&gt;Another question is ‘unrollability’. Can the intents, and the intents of the outputs of the intents, be unrolled into a representation for a specific instantiation? Or is that set of possible transactions infinite? How infinite? CTV is, e.g., unrollable.&lt;/p&gt;

&lt;p&gt;Last note on statefulness: The above has baked into it a notion of ‘statelessness’, but it’s very possible and probably required that provers maintain some external state in order to prove (whether multisig or not). E.g., a multisig managing an account model covenant may need to track who is owed what. This data can sometimes be put e.g. in an op return, an extra tapleaf branch, or just considered exogenous to the covenant. But the idea that a prover isn’t just deciding on what to do based on purely local information to an output descriptor is important.&lt;/p&gt;

&lt;p&gt;For Sapio in particular, this framework is useful because if you can answer the above questions on intents, and prover/verifier generators, then you would be able to generate tooling that could integrate your covenant into Sapio and have things work nicely. If you can’t answer these questions (in code?) then your covenant might not be ‘well formed’. The efficiency of a prover or verifier is out of scope of this framework, which focuses on the engineering + design, but can also be analyzed.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sapio Studio Tutorial for CTV Meeting</title>
   <link href="/bitcoin/2022/03/22/sapio-studio-btc-dev-mtg-6/"/>
   <updated>2022-03-22T00:00:00+00:00</updated>
   <id>/bitcoin/2022/03/22/sapio-studio-btc-dev-mtg-6</id>
   <content type="html">&lt;p&gt;Other people have followed this tutorial with some success:&lt;/p&gt;

&lt;p&gt;Common sticking points include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Not building latest sapio binary before starting&lt;/li&gt;
  &lt;li&gt;Not building latest sapio-studio project before starting&lt;/li&gt;
  &lt;li&gt;Not having the correct clang version (&amp;gt;=12)&lt;/li&gt;
  &lt;li&gt;brew installing clang somewhere else (try /opt/homebrew, but also /usr/local/Cellar)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;Set up a signet node.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Build this branch https://github.com/JeremyRubin/bitcoin/tree/checktemplateverify-signet-23.0-alpha&lt;/p&gt;

&lt;p&gt;You’ll likely want settings like this in
   your bitcoin.conf too:&lt;/p&gt;
&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[signet]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;txindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;signetchallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;512102946e8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ba&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;eca&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;597194e7&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ed&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90377&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;bbebc&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9609&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ab&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3e35&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;706612&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ee&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;882759351&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ae&lt;/span&gt; 
&lt;span class=&quot;err&quot;&gt;rpcport=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18332&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;rpcworkqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;fallbackfee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0002&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;addnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.18.75.225&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;minrelaytxfee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;You’ll need to create a new wallet, if you’ve not done it before&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bitcoin-cli &lt;span class=&quot;nt&quot;&gt;-signet&lt;/span&gt; createwallet sapio-studio-tutorial &lt;span class=&quot;c&quot;&gt;# If you've done this before fine&lt;/span&gt;
./bitcoin-cli &lt;span class=&quot;nt&quot;&gt;-signet&lt;/span&gt; getnewaddress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Get coins to your address https://faucet.ctvsignet.com/ / DM me for more&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Follow the install instructions on
https://learn.sapio-lang.org/ch01-01-installation.html You can skip the the
sapio-studio part / pod part and just do the Local Quickstart up until
“Instantiate a contract from the plugin”.&lt;/li&gt;
  &lt;li&gt;run cargo build –release from the root directory to build the sapio-cli.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;start-up-sapio-studio&quot;&gt;Start Up Sapio Studio&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Get &lt;a href=&quot;https://yarnpkg.com/getting-started/install&quot;&gt;Yarn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install Sapio Studio
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt; 1 git@github.com:sapio-lang/sapio-studio.git &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;sapio-studio
yarn &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Start react server
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn start-react
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Leave that running in  tab&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Start electron server
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn start-electron
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once it launches this is what you should see:
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/1-sapio-studio-init.png&quot; alt=&quot;&quot; /&gt;
Go ahead and click on settings to configure the sapio cli for the first time.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.16.35-AM.png&quot; alt=&quot;&quot; /&gt;
First, let’s configure our sapio-cli. Go head and do “Configured Here” and leave
everything blank. Click on the select file and point sapio studio to your (freshly done) release build of sapio-cli.&lt;/p&gt;

&lt;p&gt;Click Save Settings.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.17.37-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, you should see the following confirmation.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.18.09-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next let’s configure your node. Clikc select file and point it to your
.cookie file and then configure the node as Signet &amp;amp; set the RPC port to whatever you used. Save it.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.18.59-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click test connection – it should tell you… something.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.19.39-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Navigate back to wallet. You should see some balance or something (assuming you did the faucet).
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.20.12-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, click “Load WASM Plugin” and find your plugin-example/target/wasm32-unknown-unknown/debug/*.wasm files. Go ahead and pick the jamesob vault one.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.20.41-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, click Create new contract.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.21.17-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ll see a little applet for the JameVault. Look at that handsome guy!
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.22.07-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to create some Taproot keys for this – gonna need some command line action:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bitcoin-cli &lt;span class=&quot;nt&quot;&gt;-signet&lt;/span&gt; getaddressinfo &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;./bitcoin-cli &lt;span class=&quot;nt&quot;&gt;-signet&lt;/span&gt; getnewaddress &lt;span class=&quot;s2&quot;&gt;&quot;vault_project&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bech32m&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then copy the witness program. do this twice – one for cold one for hot.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.27.25-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now click on your applet and start filling it out. You can get new addresses by clicking on Bitcoin Node (just not keys yet)
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.35.18-AM.png&quot; alt=&quot;&quot; /&gt;
n.b. sometimes things are in btc, sometimes in sats. c’est la vie.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.35.48-AM.png&quot; alt=&quot;&quot; /&gt;
finish up and click submit
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.36.02-AM.png&quot; alt=&quot;&quot; /&gt;
If all is right, you should see a contract get created!
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.36.17-AM.png&quot; alt=&quot;&quot; /&gt;
To actually create it, click on the parent txn and then sign it…
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.36.51-AM.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.37.00-AM.png&quot; alt=&quot;&quot; /&gt;
and then broadcast it (with real money you’ll want to verify before doing this)
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.37.03-AM.png&quot; alt=&quot;&quot; /&gt;
it’ll now pop up in the mempool.&lt;/p&gt;

&lt;p&gt;n.b. BUG ALERT: the viewer on the right hand side is a little glitchy. before playing
with the psbts/txn signing logic, always close it and re-open by clicking on the txn 
you want.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.37.14-AM.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.37.25-AM.png&quot; alt=&quot;&quot; /&gt;
Now you can click on the begin redeem txn and broadcast and sign that one so it’s in the mempool
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.44.38-AM.png&quot; alt=&quot;&quot; /&gt;
Click on the updatable output, and you’ll see some options.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.44.57-AM.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-11.53.45-AM.png&quot; alt=&quot;&quot; /&gt;
click on spend hot, and fill out the form. Hit submit, and then hit recompile.&lt;/p&gt;

&lt;p&gt;Be sure to pick an amount that is amount in input - fee (todo: make this smarter!).
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-11.53.54-AM.png&quot; alt=&quot;&quot; /&gt;
if all is well, you’ll see a hot spend.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-11.47.10-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;if you picked a relative timelock &amp;gt; 1 block, try playing with the simulate tab :D.&lt;/p&gt;

&lt;p&gt;If you navigate back to the CONTRACTS tab you can pull up contracts you previously made /
recompilations with effects, even across sessions.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-11.47.20-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>London Advancing Bitcoin Tutorial</title>
   <link href="/bitcoin/2022/03/04/london-tutorial/"/>
   <updated>2022-03-04T00:00:00+00:00</updated>
   <id>/bitcoin/2022/03/04/london-tutorial</id>
   <content type="html">&lt;p&gt;Other people have followed this tutorial with some success:&lt;/p&gt;

&lt;p&gt;https://gnusha.org/ctv-bip-review/2022-02-22.log&lt;/p&gt;

&lt;p&gt;If you’re having a problem, see above log where people have had issues. Common problems include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Not building latest sapio binary&lt;/li&gt;
  &lt;li&gt;Not having the correct clang version (&amp;gt;=12)&lt;/li&gt;
  &lt;li&gt;brew installing clang somewhere else (try /opt/homebrew, but also /usr/local/Cellar)&lt;/li&gt;
  &lt;li&gt;xargs not liking something (working to debug it, you can open the JSONs with vi and do by hand some of the steps).&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;Install JQ (json manipulating tool) if you don’t have it / other things
needed to run a bitcoin node.&lt;/li&gt;
  &lt;li&gt;Set up a signet node.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Build this branch https://github.com/JeremyRubin/bitcoin/tree/checktemplateverify-signet-23.0-alpha&lt;/p&gt;

&lt;p&gt;You’ll likely want settings like this in
   your bitcoin.conf too:&lt;/p&gt;
&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[signet]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# generate this yourself                                                                                                                    rpcauth=generateme:fromtherpcauth.pyfile     &lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;txindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;signetchallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;512102946e8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ba&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;eca&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;597194e7&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ed&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90377&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;bbebc&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9609&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ab&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3e35&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;706612&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ee&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;882759351&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ae&lt;/span&gt; 
&lt;span class=&quot;err&quot;&gt;rpcport=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18332&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;rpcworkqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;fallbackfee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0002&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Get coins https://faucet.ctvsignet.com/ / DM me&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Follow the install instructions on
https://learn.sapio-lang.org/ch01-01-installation.html You can skip the the
sapio-studio part / pod part and just do the Local Quickstart up until
“Instantiate a contract from the plugin”. You’ll also want to run cargo
build –release from the root directory to build the sapio-cli.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Open up the site https://rjsf-team.github.io/react-jsonschema-form/&lt;/li&gt;
  &lt;li&gt;Run sapio-cli contract api –file
plugin-example/target/wasm32-unknown-unknown/debug/sapio_wasm_plugin_example.wasm&lt;/li&gt;
  &lt;li&gt;Copy the resulting JSON into the RJSF site&lt;/li&gt;
  &lt;li&gt;Fill out the form as you wish. You should see a JSON like
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;network&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Signet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;effects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;effects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;arguments&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;TreePay&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;fee_sats_per_tx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;participants&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tb1pwqchwp3zur2ewuqsvg0mcl34pmcyxzqn9x8vn0p5a4hzckmujqpqp2dlma&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tb1pwqchwp3zur2ewuqsvg0mcl34pmcyxzqn9x8vn0p5a4hzckmujqpqp2dlma&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;radix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;You may have to delete some extra fields (that site is a little buggy).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Optionally, just modify the JSON above directly.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy the JSON and paste it into a file ARGS.json&lt;/li&gt;
  &lt;li&gt;Find your sapio-cli config file (mine is at
~/.config/sapio-cli/config.json). Modify it to look like (enter your rpcauth
credentials):
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;testnet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;signet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;active&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;api_node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://0.0.0.0:18332&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;UserPass&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YOUR RPC NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YOUR PASSWORD HERE&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;emulator_nodes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;enabled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;emulators&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;threshold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;plugin_map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;regtest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a contract template:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;ARGS.json| ./target/release/sapio-cli contract create  &lt;span class=&quot;nt&quot;&gt;--file&lt;/span&gt; plugin-example/target/wasm32-unknown-unknown/debug/sapio_wasm_plugin_example.wasm  | jq &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; UNBOUND.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Get a proposed funding &amp;amp; binding of the template to that utxo:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;UNBOUND.json| ./target/release/sapio-cli contract &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; | jq &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; BOUND.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;Finalize the funding tx:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;BOUND.json | jq &lt;span class=&quot;s2&quot;&gt;&quot;.program[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;funding&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;].txs[0].linked_psbt.psbt&quot;&lt;/span&gt; | xargs &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; | xargs &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;% ./bitcoin-cli &lt;span class=&quot;nt&quot;&gt;-signet&lt;/span&gt; utxoupdatepsbt % |  xargs &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;% ./bitcoin-cli &lt;span class=&quot;nt&quot;&gt;-signet&lt;/span&gt; walletprocesspsbt % | jq &lt;span class=&quot;s2&quot;&gt;&quot;.psbt&quot;&lt;/span&gt; | xargs &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;% ./bitcoin-cli &lt;span class=&quot;nt&quot;&gt;-signet&lt;/span&gt; finalizepsbt % | jq &lt;span class=&quot;s2&quot;&gt;&quot;.hex&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Review the hex transaction/make sure you want this contract… and then
send to network:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bitcoin-cli -signet sendrawtransaction 020000000001015e69106b2eb00d668d945101ed3c0102cf35aba738ee6520fc2603bd60a872ea0000000000feffffff02e8c5eb0b000000002200203d00d88fd664cbfaf8a1296d3f717625595d2980976bbf4feeb
10ab090180ccdcb3faefd020000002251208f7e5e50ce7f65debe036a90641a7e4d719d65d621426fd6589e5ec1c5969e200140a348a8711cb389bdb3cc0b1050961e588bb42cb5eb429dd0a415b7b9c712748fa4d5d
fe2bb9c4dc48b31a7e3d1a66d9104bbb5936698f8ef8a92ac27a650663500000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Send the other transactions:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat BOUND.json| jq .program | jq &quot;.[].txs[0].linked_psbt.psbt&quot; | xargs -I% ./target/release/sapio-cli psbt finalize --psbt %  | xargs -I% ./bitcoin-cli -signet sendrawtransaction %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now what?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Maybe load up the Sapio Studio and try it through the GUI?&lt;/li&gt;
  &lt;li&gt;Modify the congestion control tree code and recompile it?&lt;/li&gt;
  &lt;li&gt;How big of a tree can you make (I did about 6000 last night)?&lt;/li&gt;
  &lt;li&gt;Try out other contracts?&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>RoadMap or Load o' Crap?</title>
   <link href="/bitcoin/2021/12/24/advent-27/"/>
   <updated>2021-12-24T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/24/advent-27</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 27 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I know, I know.&lt;/p&gt;

&lt;p&gt;God forbid, a roadmap. People hate roadmaps. As I’ve noted
&lt;a href=&quot;/blog/2021/07/02/covenants/&quot;&gt;before&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Bitcoin Eschews Roadmaps and Agendas.&lt;/strong&gt;
I provide this maxim to make clear that this document is by no means an official
roadmap, narrative, or prioritization. However, it is my own assessment of what
the current most pragmatic approach to upgrading Bitcoin is, based on my
understanding of the state of outstanding proposals and their interactions.&lt;/p&gt;

  &lt;p&gt;My priorities in producing this are to open a discussion on potential new
features, risk minimization, and pragmatic design for Bitcoin.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you didn’t click, I definitely recommend reading &lt;a href=&quot;/blog/2021/07/02/covenants/&quot;&gt;the quoted
post&lt;/a&gt; in conjunction with this one. As well as, if
you’re a first time visitor to the Advent Calendar, the preceding 26 posts.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In contrast to my prior post, this roadmap is going to be less about full
justifications and unbiased weightings and tallyings of sentiments and more just
me spitting out a timeline we could introduce changes on. It’s not a final
answer, and in no way authoritative, but it’s a launch point for a discussion
that has to happen in some way at some point in order to advance a soft-fork.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Consider this as being posted for the sake of public review. If you disagree
with this, let me know why! But please no attacks just for the act of discussing
the topic of soft-fork activation&lt;sup id=&quot;fnref:ordo&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:ordo&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So buckle up here’s how we could make Bitcoin kick ass in 2022 and beyond:&lt;/p&gt;

&lt;h1 id=&quot;2022-the-year-of-the-covenant&quot;&gt;2022: The Year of the Covenant&lt;/h1&gt;

&lt;h2 id=&quot;bip-119-timeline&quot;&gt;BIP-119 Timeline&lt;/h2&gt;
&lt;p&gt;CheckTemplateVerify is getting close to ready to go. There are numerous
&lt;a href=&quot;https://utxos.org/signals&quot;&gt;supporters (listed on utxos.org)&lt;/a&gt;, few detractors,
and a bumper crop of amazing use cases (did you read the calendar?) waiting for
us on the other side of CTV activation. The major critiques are that we might want
something that does ‘more’ than CTV itself, or to include it in a bundle of
things.&lt;/p&gt;

&lt;p&gt;My take: we’re not Gordon Gecko. Greed is &lt;em&gt;Not&lt;/em&gt; Good. CTV represents a clean, well
contained, unproblematic upgrade that’s going to deliver hella functionality in
service of scaling, decentralization, self custody, and privacy. Let’s secure
the bag for Bitcoin users everywhere and make it happen. We can always do more,
later, informed by what extensions we need for rapidly maturing tools like
Sapio. CTV is also technically specified and implemented sufficiently – a view
I’ve confirmed with a couple other devs – that it is able to be considered for
release.&lt;/p&gt;

&lt;h3 id=&quot;what-would-have-to-happen-to-release-ctv&quot;&gt;What would have to happen to release CTV?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;More signalers would need to be on
&lt;a href=&quot;https://utxos.org/signals&quot;&gt;utxos.org/signals&lt;/a&gt; or other platforms to demonstrate
interest and demand for CTV, ideally explaining which use cases are important to
them and why. Every voice counts for consensus. There is no list long enough to
capture what it would mean to have consensus, so there is not some threshold
that implies a ‘go ahead’, but N+1 is clearly better than N.&lt;/li&gt;
  &lt;li&gt;More “regular contributors” would need to spend time reviewing the code and BIP to
assure themselves of correctness and safety.  Nothing can move forward with out,
no matter the count of casual contributors. Many regular contributors don’t want
to ‘get political’ and look at forks. Fortunately, while all consensus changes
are complex, CTV is a very tiny and easy to review change in comparison with
SegWit or Taproot (more similar to CheckLockTimeVerify – a couple hundred lines
of consensus code, a couple hundred lines of non consenus code, and a couple
thousand lines of tests, no cryptographic primitives). &lt;strong&gt;NOTE:&lt;/strong&gt; This is a big
if!  Every contributor has the right to review, and ACK or provide a reasoned
NACK.  Even if everyone else is excited about something doesn’t mean there isn’t
space for new thought-through dissent. At the end of the article, I discuss
some concrete next steps to ensure more developer review occurs.&lt;/li&gt;
  &lt;li&gt;We would need to merge the implementation. This is simple, but enough ACKs have to
come in and rebases on other subsequent changes to get it in. This can
happen ahead of ‘full consensus’ since there are no deployment parameters,
but aids in increasing the testing priority of CTV.&lt;/li&gt;
  &lt;li&gt;We would need to get a majority of miners/pools primed to accept the upgrade.&lt;/li&gt;
  &lt;li&gt;Major alternative implementation maintainers (e.g., BTCD, Knots) should show
willingness to implement or accept patches for the new rules (although it’s a
soft-fork, this is good to do).&lt;/li&gt;
  &lt;li&gt;We would need to decide on release parameters for the implementation.&lt;/li&gt;
  &lt;li&gt;We would need to merge and release a client with release parameters&lt;/li&gt;
  &lt;li&gt;The client would needs to lock-in by a supermajority of miners signalling.&lt;/li&gt;
  &lt;li&gt;Then, and only then, would CTV be fully available.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;whats-the-maximally-aggressiveoptimistic-timeline&quot;&gt;What’s the Maximally Aggressive/Optimistic Timeline?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Soft Signals / Developer Review: 2-3 months required to get ACKs on the
implementation, assuming no major changes required.&lt;/li&gt;
  &lt;li&gt;Merge: Instant, just whenever there are ACKs against the implementation being
safe and matching BIP. Usually, enough ACKs for a PR is 2 regular contributors,
the comitter, and a maintainer, but for consensus changes there is no threshold
at which Bitcoin considers a change sufficiently peer reviewed. A consensus
change should see higher quality reviews, as well as external consensus that the
change is desired.&lt;/li&gt;
  &lt;li&gt;Getting miners primed to signal: ~20% of pools are on
&lt;a href=&quot;https://utxos.org/signals&quot;&gt;utxos.org/signals&lt;/a&gt;, more should be coming on board
soon. Don’t expect this to take additional time if in conjunction with Developer
review.&lt;/li&gt;
  &lt;li&gt;Debating Timelines: ~1 month to agree on a release timeline&lt;/li&gt;
  &lt;li&gt;Preparing a release: ~1 month to do release candidates and testing.&lt;/li&gt;
  &lt;li&gt;Speedy Trial: 3 months of signalling, 3 months of waiting for lock-in to active.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;overall-it-could-look-like-this&quot;&gt;Overall, it could look like this:&lt;/h3&gt;

&lt;p&gt;On March 15th developers reach agreement on merging BIP-119’s implementation.
On April 15th, agreement is reached on release parameters for signalling from ~
June 1st to ~September 1st. The activation height would be November 10th.  A client
is prepared, and tested, and released. No issues are found. The miners signal at
some point in the 3 month window above the threshold. CTV locks-in. Developers
can prep wallet software for deeper integration. CTV activates before
Thanksgiving, avoiding the “dire straits” of
thanksgiving-hanukkah-christmas-chinese-new-year-valentines-day season.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;but that’s basically identical to Taproot’s timeline?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Exactly. If we act on this timeline starting in early January 2022, it is
possible to meet an almost identical timeline for CTV as Taproot.&lt;/p&gt;

&lt;p&gt;Part of why it works is that the next major release is scheduled for 2022-04-01.
Soft forks are usually released as a minor patch on top of a few recent major
releases. So CTV could be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Code included in 23.0 for CTV, no activation parameters&lt;/li&gt;
  &lt;li&gt;Activation parameters in 23.1, and backported to 22.x, 21.x, and (really this is up to maintainers how far to backport!).&lt;/li&gt;
  &lt;li&gt;23.1 released before June 1st, 2022.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;What could go wrong?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Concern:&lt;/strong&gt; There could be  a small tweak to CTV that makes it marginally
better, and it’s worth adding some extra review time as a result.&lt;br /&gt;
&lt;strong&gt;Rebuttal:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;CTV is highly design specific, so it’s unlikely there could be a change needed,
but not impossible. Changes would be unlikely to be large, though, e.g. perhaps
comitting to the same fields in a different order. Taproot saw some small
changes about a month before being merged.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Concern:&lt;/strong&gt; Release process has a delay due to an issue uncovered in non-CTV code.&lt;br /&gt;
&lt;strong&gt;Rebuttal:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Soft fork releases are usually a minor patch onto an existing version, so it’s
unlikely that there would be a new bug, but the release would still be planned
and could resume as soon as patched. Speedy Trial’s ‘delayed activation’ also
helps with providing more time for (non-consensus) bug fixes in the client
between lock-in and activation.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Concern:&lt;/strong&gt; Release process has a delay due to an issue uncovered in CTV’s code.&lt;br /&gt;
&lt;strong&gt;Rebuttal:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;If the issue is a bug, it would merit more strict scrutiny on the code and
tests (which are pretty comprehensive currently) as to how they could be passing
with an issue like that. Once patched and reviewed, it’s still possible to merge
and release. However, the issue could also be a conceptual bug (e.g., here’s how
to do recursive covenants with CTV), which would certainly delay (and I’d be the
first to say it!) continuing with CTV at the present time. The former issue is
likely more likely than the latter, and that risk is defrayed by thorough code
review and testing.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Concern:&lt;/strong&gt; There’s not enough developer consensus conceptually.&lt;br /&gt;
&lt;strong&gt;Rebuttal:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;There are many developers supporting on
&lt;a href=&quot;https://utxos.org/signals&quot;&gt;utxos.org/signals&lt;/a&gt;. I’ve also made an effort to
reach out to a variety of developers who are not on the site to seek out
dissent, and I do not think there are any current safety concerns, which is
positive for developers who might not Ack but don’t have a ‘this is a grave
mistake’ Nack up their sleeves. Again, there’s no well defined threshold for
what is “enough”.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Concern:&lt;/strong&gt; Miners don’t want CTV and don’t signal for it.&lt;br /&gt;
&lt;strong&gt;Rebuttal:&lt;/strong&gt;&lt;br /&gt;
_20% of the hash pools already say they do want it, and more should be joining
that list soon™. Should that not happen, there could be a UASF effort to ensure
the activation of BIP-119 if users want CTV strongly enough. _&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Concern:&lt;/strong&gt; Disagreement on Activation mechanism.&lt;br /&gt;
&lt;strong&gt;Rebuttal:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Taproot’s Speedy Trial (ST) worked very well. Big Success. No need to mess with
the recipe. UASF-clienters know how to make the mods to the activation logic for
whatever they want as a competing client. But perhaps that’s not a comfortable
status quo, so this is certainly one to watch. I’ve made my own remarks on what
order of operations I think ST/UASF/etc should go in
&lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018833.html%5C&quot;&gt;here&lt;/a&gt;,
but there’s not consensus on this topic. Notably, there is some dissent from
reusing ST at all. While important, activation logic is a secondary (but still
critical) concern to the decision to accept the current specification and
implementation of CTV in the first place, and discussion on that can proceed
in parallel to progress on consensus on the implementation.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;and-then-what&quot;&gt;And Then What?&lt;/h2&gt;

&lt;p&gt;After the release of CTV Soft Fork Client, what goes next?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Jeremy takes a vacation for a month.&lt;/li&gt;
  &lt;li&gt;Sapio continues to improve dramatically, as detailed in the last post.&lt;/li&gt;
  &lt;li&gt;Work begins on new Opcodes.&lt;/li&gt;
  &lt;li&gt;More fun applications get built on CTV/Sapio (for examples, review the entire series of
&lt;a href=&quot;/advent21&quot;&gt;the Advent Calendar&lt;/a&gt;, but a few of my favorites are &lt;a href=&quot;/bitcoin/2021/12/10/advent-13/&quot;&gt;Payment
Pools&lt;/a&gt;,
&lt;a href=&quot;/bitcoin/2021/12/07/advent-10/&quot;&gt;Vaults&lt;/a&gt;, and &lt;a href=&quot;/bitcoin/2021/12/17/advent-20/&quot;&gt;Bonded
Oracles&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Non-Interactive Lightning Channel BOLT drops.&lt;/li&gt;
  &lt;li&gt;Payment Pool spec drops with LN integration.&lt;/li&gt;
  &lt;li&gt;(Privacy + Scale)++&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;new-opcodes-you-say&quot;&gt;New Opcodes you say?&lt;/h2&gt;

&lt;p&gt;Yep, new opcodes. As soon as CTV is merged, there are some new features that
could be tooled into BIPs without much controversy, given their simplicity:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;New Math Opcodes&lt;/li&gt;
  &lt;li&gt;OP_AMOUNT&lt;/li&gt;
  &lt;li&gt;OP_CSFS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are “universally agreed on” bits of functionality that have very little
wiggle room in how they might be specified. Therefore their implementation,
testing, and release is mostly mechanical. This makes them good bets for a
concrete timeline because they’re a rote-development task with few research
dependencies and easily agreed on design.&lt;/p&gt;

&lt;p&gt;With hard work, these could be reviewed and tested in time for Speedy Trial
signalling in June 2023 (+1 year), with realllllly hard work 6 months earlier
(but there are conflicting priorities for developer’s time – e.g., building
stuff with/for CTV and Taproot – that make that super unlikely).&lt;/p&gt;

&lt;h3 id=&quot;what-about-anyprevout&quot;&gt;What about Anyprevout&lt;/h3&gt;

&lt;p&gt;Anyprevout is 1000000% not ruled out here for advancing to the consensus stage
in 2022. There are a couple things happening on Anyprevout that make me suspect
it might be more primed towards early-mid 2024 best case.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Taproot upgraded channels taking some steam away from Eltoo with AJ’s
proposal to do state compaction via PTLCs.&lt;/li&gt;
  &lt;li&gt;Disagreement over no justice transactions in the community for high value
channels.&lt;/li&gt;
  &lt;li&gt;Open research on specific Eltoo protocol implementation / need for other
tools (like SIGHASH_BUNDLE).&lt;/li&gt;
  &lt;li&gt;Lack of an open PR and test suite for it.&lt;/li&gt;
  &lt;li&gt;CSFS + CTV permitting a version of Eltoo.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of these reasons point to it being highly unlikely APO could be finished on
the timeline presented for CTV, but also that given a desire to see a working LN
client (ensuring the protocol is sound end-to-end without modifications) leads
to additional engineering complexity.&lt;/p&gt;

&lt;p&gt;I’ve heard on the rumour vine some excellent engineers might start working on an
Eltoo implementation, I believe that work to be of tremendous value to gain
consensus on deploying anyprevout.&lt;/p&gt;

&lt;p&gt;Given that a couple years seems like the best case for a set of upgrades around
APO to deliver Eltoo, if we have the ability to deliver CTV now, it is a good
asymmetric bet for delivering utility to Bitcoin’s users.&lt;/p&gt;

&lt;p&gt;Suppose I’m wrong, and Anyprevout really could get done in 2022. Shouldn’t it
be ‘next’ and CTV can wait?&lt;/p&gt;

&lt;p&gt;The notion that any soft-fork is “next” for consideration and blocks any other
from being considered is somewhat contrary to the support for parallel
soft-forks with distinct version bits used for signalling. The possibility of
deploying soft forks on independent bits means things can be ultimately
“proposed” whenever they’re mature enough to enter the “final stage” and the
timing fits with Bitcoin’s general release schedule. The chief counterarguments
to this are twofold: One, review resources are finite and we can’t even think
about \(&amp;gt;1\) thing at a time; Two, it’s bad if the protocol is simultaneously
deploying \(N\) upgrades and any of them might fail, leading to \(2^N\)
potential protocol states. It’s actually the other way around: if things can
proceed in parallel we can get more review, because developers won’t feel that
reviewing others work has the potential to slow down their own, and we’ll be
more certain that the upgrades we release are strongly desired by the community
(i.e., will end in a UASF if not activated due to miner apathy).&lt;/p&gt;

&lt;h3 id=&quot;what-about-tapleafupdateverify&quot;&gt;What about TapLeafUpdateVerify&lt;/h3&gt;

&lt;p&gt;If I had to estimate, I’d say TLUV needs another year or so of people ‘stewing’
on the possibilities and design before it could move forward. It would then
probably need at least a year of tinkering to get a well-accepted
implementation, and then a year for release process. So let’s say best case it
could be a 2024 thing, more likely 2025 given Anyprevout is seen as higher
priority for the engineering work.&lt;/p&gt;

&lt;h3 id=&quot;what-about-inherited-ids-iids&quot;&gt;What about Inherited IDs (IIDs)?&lt;/h3&gt;

&lt;p&gt;They didn’t make the cut in the earlier piece since they’re a bit more abstract,
but I’d posit that IIDs could also approach a 2024 timeline were the developer
of the idea to spend a heckin’ big amount of time on advocacy for the concept in
2022, and present a clean implementation of the concept (&amp;amp; demonstration of
overheads) by 2023. This is complicated by the issue that he would have to also
solve issues with requiring a new index, such as helping assist assumeutxo
compatibility, write reindexing logic from genesis (or somehow exclude old
coins?), and also work on utreexo compatibility. Those all seem tractable,
but very hard to do for someone who is not a full-time long-time contributor
to the project, but I’m a believer that the job could be done given the quality
of the insights in the IIDs paper.&lt;/p&gt;

&lt;h2 id=&quot;parallel-developments&quot;&gt;Parallel Developments?&lt;/h2&gt;

&lt;p&gt;In parallel to the above, there are some things that I think are &lt;em&gt;very cool&lt;/em&gt;
that should remain under development, but don’t have a clear path to inclusion
presently.&lt;/p&gt;

&lt;p&gt;The first is &lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018168.html&quot;&gt;Transaction Sponsorship&lt;/a&gt;, which could substantially 
simplify many protocols on top of Bitcoin, especially things like Eltoo and CTV
stuff. We can’t predict that too well because it will depend on what developers
end up running up against with current best practices around CPFP/RBF, but
I suspect it might become popular if a small group of developers prioritizes
such an approach as a unified front. Since it’s technically simple, it wouldn’t
take much time to implement, but because there’s very little consensus for
it right now it’s not fit for inclusion in a roadmap.&lt;/p&gt;

&lt;p&gt;The next is &lt;a href=&quot;https://blog.blockstream.com/en-simplicity-github/&quot;&gt;Simplicity&lt;/a&gt;. Simplicity could completely change how Bitcoin
scripting works and is super duper exciting. I guess it’s going out on Elements
sometime soon? However, it’s stupidly complicated for most devs to fully
understand (although it is called simplicity…), so it would take a fair
amount of time (read: years) before the implementation could be sufficiently
independently reviewed by the intersection of qualified Bitcoin and Programming
Language theory reviewers. The interesting thing about Simplicity with respect
to this roadmap is that because it’s so general, as soon as it seems like
Simplicity would be on Bitcoin within ~1.5 years, it’s likely all other
scripting soft fork developers would “stop” development&lt;sup id=&quot;fnref:note&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:note&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and focus on
deployment as Simplicity Jets.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;concrete-next-steps&quot;&gt;Concrete Next Steps&lt;/h1&gt;
&lt;p&gt;Should this plan not seem feasible to the near unanimity of the community for us
the deliver on (e.g., with +2-3 months of the suggested timeline), I don’t think
there is another good opportunity to enact on an activation of CTV and the best
course of action would be to delay +1 year. There could be a UASF for it, since
there is strong user demand for CTV, but I wouldn’t personally lead the charge
on that beyond ensuring that the BIP-119 code remains up-to-date and is
implemented correctly.&lt;/p&gt;

&lt;p&gt;Assuming someone doesn’t make a bold argument that gives me or the aggregate
current supporters of CTV pause, I plan to begin holding a fortnightly CTV
review session to iron out any details, additional testing, code review, and
activation plans. I would also like to help a third party host a &lt;a href=&quot;https://bitcoincore.reviews&quot;&gt;review
club&lt;/a&gt;, although the focus of Review Club is more
educational for the reviewers as opposed to for the purpose of formally
reviewing the code for merge.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;You’ve now reached the end of Rubin’s Bitcoin Advent Calendar, 2021! Congrats.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wc -w $(ls | grep advent)&lt;/code&gt; tells me that means you read 50,773 words total of
me rambling on about covenants. That’s PhD thesis length! I really hope you
found something to enjoy.&lt;/p&gt;

&lt;p&gt;A special thanks to all who helped review this post in particular and provided
feedback in ensuring I’ve done an OK job capturing the complexity of gaining
consensus. To the extent that I haven’t succeeded in representing your
perspectives here, I take sole responsibility for the inadequacy. Your
constructive feedback on how to improve is welcomed. A further special thanks to
Ryan Gentry who encouraged me to produce the series in the first place, and to
Sarah Satoshi for her support as I battled my way through this task.&lt;/p&gt;

&lt;p&gt;As for me, I’m off to sip some Eggnog and eat some holiday cookies! I’ll take a
little bit of a break, and be back in the New Year following up on next steps
and dropping fresh content for y’all as always.&lt;/p&gt;

&lt;p&gt;Merry Christmas and Happy New Years,&lt;/p&gt;

&lt;p&gt;Jeremy&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:ordo&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;You do you though. It’d really hurt my feelings if you called me a Smelly Weasel attacking Bitcoin. &lt;a href=&quot;#fnref:ordo&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:note&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Transaction Sponsorship cannot be done, as far as I understand, as a part of Simplicty. Things like that would progress independently. &lt;a href=&quot;#fnref:note&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>The History and Future of Sapio</title>
   <link href="/bitcoin/2021/12/23/advent-26/"/>
   <updated>2021-12-23T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/23/advent-26</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 26 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sapio began as little more than a slide in presentations I would give on what
BIP-119 could be with the support of a programming environment.&lt;/p&gt;

&lt;p&gt;While my conceptions of what could be built with CTV were about on-par with
where they are today, the tools available were very clunky. You can see
one of the original diagrams from the C++ Code below (&lt;a href=&quot;https://github.com/JeremyRubin/bitcoin/blob/8f297449ff296533d7dd0ac44b62cb3cc33d1b83/src/wallet/rpcwallet.cpp#L1339&quot;&gt;code here&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
    *                   [      vault_to_vault n  ]
    *                     |a                   |b
    *                    (0)                  (1)
    *                    /\                   /\
    * wait + maturity   /  \                 /  \ wait + step_period    (attached)
    * [   hot_to_hot   ]   /  [vault_to_cold]    [vault_to_vault n - 1]
    *                     /                         |           |
    *        [hot_to_cold]                         (0)         (1)
    *                                               .           .
    *                                               .           .
    *                                                           .
    *                                                     wait + step_period * n   (attached)
    *                                                   [vault_to_vault 0]
    *                                                      |
    *                                                     (0)
    *                                                     */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;style&gt;
code {
    font-size: 0.75em !important;
}
&lt;/style&gt;

&lt;p&gt;When I presented it on February 1st, 2020 at the CTV workshop, one of the last
Bitcoin events before the pandemic began&lt;sup id=&quot;fnref:mit&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:mit&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, I knew I had to present a more
concrete vision on how smart contracts could be built, rather than spit-and-glue
C++.&lt;/p&gt;

&lt;p&gt;And so I included slide inspired by the hand rolled smart contracts I was making
in C++ about how the technique could be generalized.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/sapio-future/sapio-idea.svg&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;a slide at the feb. 2020 CTV workshop.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a research project I am interested in pursuing. We have a few
scripting languages. We have Dan here who wrote Ivy. There’s also Balzac and
Solidity. It’s poorly named, but it actually has some really interesting ideas
that aren’t in other scripting languages for bitcoin. There’s some notion of
participants with private state they are storing, and has some notion of
interactivity. I also threw up there BlueSpec which is like a VHDL competitor
that is pretty neat. If you think about it, there’s a software layer for
controlling vaults but there’s also a hardware layer- so how can we describe
transactional hardware? You wind up with similar controls as a BlueSpec-like
language where you are creating plumbing and a description of how things are
moving rather than something that has imperative state.&lt;/p&gt;

  &lt;p&gt;As an example, one of the properties with OP_CHECKTEMPLATEVERIFY that is cool is
the narrow window of a standard OP_CHECKTEMPLATEVERIFY script is that you have
this composability property where for a given model that goes to arbitrary
address outputs, you can just throw another one inside it. As the outputs of
that annuinity, you can put undo send as the outputs of that annunity, and you
can tag on more and more programs into that if you want. On this slide is a
templately description of a language, which helps if someone else given the same
program description can verify that the hash is the same for the given inputs.
Instead of sending you a million branches, you can generate them yourselves.&lt;/p&gt;

  &lt;p&gt;Q: Is there code for your metascript thing?&lt;/p&gt;

  &lt;p&gt;A: No. It’s just an idea I’ve been toying with. I got relatively close to
metascript just writing in C++ just writing with C++ templates. Then I got ready
to kill myself doing that because writing templates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’d discussed similar slides at earlier events, usually included it as an
example of something &lt;em&gt;someone else&lt;/em&gt; could build while I kept pluggin’ away
working on Bitcoin Core. Eventually I realized that me claiming that CTV could
be used to do these things and CTV demonstrably doing these things was an
obstacle… I needed to make the prototype.&lt;/p&gt;

&lt;p&gt;So I set off hacking together a prototype… I spent an afternoon or two mucking
around in C++ only to realize that wasn’t going to happen, and then I switched
to python. Python was a great choice, and after quite a bit of time pluggin
away, I had something that actually worked.&lt;/p&gt;

&lt;p&gt;There was a moment of magic where I connected it to the Sapio Studio (which
actually existed long before Sapio as just a visualizer for a set of
transactions) to load a contract written in python and…  it worked. Really
well. It felt incredible. I began talking more about what Sapio could do,
thinking through some of the problems and solutions. I  even gave a talk in the
metaverse with Udi where I dropped my virtual laser pointer on the ground for a
minute and couldn’t pick it back up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/sapio-future/reckless.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;there were more people sitting further back I swear…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At a certain point I decided to start working on cleaning up Sapio by using
Python’s gradual typing and trying to convert to using Miniscript instead of my
custom-made Sapio script fragment builder. I was neck deep in type refactors and
then I had a deep realization:&lt;/p&gt;

&lt;h2 id=&quot;python-fucking-sucks&quot;&gt;Python FUCKING SUCKS&lt;/h2&gt;

&lt;p&gt;I was incredibly greatful for the rapid iterating that python allowed me, but I
realized at this point that it was going to be nearly impossible to make Sapio
actually good and not just a toy working in python.  What had started as a proof
of concept for someone to do “for real” had gotten good enough conceptually but
was bursting at the seams and was not going to ever yield something production grade.&lt;/p&gt;

&lt;p&gt;So I did a reset.&lt;/p&gt;

&lt;p&gt;I started building Sapio in Rust, re-implementing (but much more cleanly) the
paradigms that I had previously developed, relying on well tested and type
rust-bitcoin libraries instead of janky test-framework python code from Bitcoin
Core.&lt;/p&gt;

&lt;p&gt;And one day – almost like Deja Vu – I plugged the Sapio Rust served in place
of the Python one for the Sapio Studio and everything Just Worked™.&lt;/p&gt;

&lt;p&gt;Since then, Sapio has only matured and gotten better and better with each
passing month.  I’ve added tons of new features, improved the underlying
architecture, made the ABIs more well defined, built stronger intergrations with
the GUI, and more. Today, Sapio is actually usable on mainnet (if you’re an
expert at least), and I’ve used to do congestion control payments and art
projects.&lt;/p&gt;

&lt;p&gt;Sapio has helped me cut through the content for this Advent Calendar like a
swiss army knife.  It’s actually becoming a pretty decent tool!&lt;/p&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h1&gt;

&lt;p&gt;Sapio needs to get to the next level. There are many major areas of work in the
pipeline. You might think of this as “Sapio is so incomplete it’s not ready”.
I think of it more as Sapio is just getting started:&lt;/p&gt;

&lt;h4 id=&quot;upgrade-to-taproot&quot;&gt;Upgrade to Taproot&lt;/h4&gt;

&lt;p&gt;Support for Taproot in rust-bitcoin and rust-miniscript is coming! Once that
lands, I need to rebase (and maybe upstream?) some Sapio features, and then
update the compiler to always use Taproot outputs!&lt;/p&gt;

&lt;h4 id=&quot;improve-sapio-ctv-emulators-with-taproot-if-ctv-seems-to-be-slow&quot;&gt;Improve Sapio CTV Emulators with Taproot (if ctv seems to be slow)&lt;/h4&gt;

&lt;p&gt;Once taproot lands, the multi-sig federated oracle designs can be set up to do a
MuSig Schnorr signature instead of just a bare multi-sig, allowing wider federations.&lt;/p&gt;

&lt;p&gt;This engineering work only really matters if CTV seems unlikely, but could
be useful to have anyways for future purposes &amp;amp; extensions to Sapio.&lt;/p&gt;

&lt;h4 id=&quot;build-out-some-full-featured-applications-backed-by-sapio&quot;&gt;Build out some “full featured” applications backed by Sapio&lt;/h4&gt;

&lt;p&gt;Right now Sapio works for making little Applets, but there is no “end to end”
software (e.g., vaults) made in Sapio.&lt;/p&gt;

&lt;p&gt;This requires work on both the Sapio Studio front and potentially on a website
for things like Sapio NFTs.&lt;/p&gt;

&lt;p&gt;This will push the boundaries on integrating Sapio into real applications.&lt;/p&gt;

&lt;p&gt;One particular feature that would be great is ‘auto-signing’ on valid state
transitions proposed at a certain continuation point. For example, if we have an
NFT we want to dutch auction, we should be able to have a sapio module running
that is happy to spit out the relevant transactions with a nice API.&lt;/p&gt;

&lt;h4 id=&quot;more-advanced-programming-of-transactions&quot;&gt;More advanced programming of transactions&lt;/h4&gt;

&lt;p&gt;Currently the Sapio transaction builder from within Sapio branches is a bit
limited in what it can express.&lt;/p&gt;

&lt;p&gt;Augmenting it with the ability to more fully describe partially signed bitcoin
transactions (PSBTs), e.g., when used in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;continuation&lt;/code&gt; context would
advance the state of the art.&lt;/p&gt;

&lt;h5 id=&quot;key-management&quot;&gt;Key Management&lt;/h5&gt;
&lt;p&gt;Relatedly, it would be really useful if you could tell Sapio how to access a
signing module and have sapio use that external key to generate the appropriate
signatures for the state transitions.&lt;/p&gt;

&lt;h4 id=&quot;better-sapio-cli--server-that-can-keep-wasm-modules-loaded-in-memory-aiding-performance&quot;&gt;Better sapio-cli / server that can keep WASM modules loaded in memory, aiding performance&lt;/h4&gt;

&lt;p&gt;Right now every time a module is used the entire thing has to reload which is
super slow.&lt;/p&gt;

&lt;p&gt;It should be possible to have a single server instances that manages a cache of
all modules, greatly boosting performance, especially for recursive cross-module
calling contracts.&lt;/p&gt;
&lt;h4 id=&quot;client-side-verification-caching-across-module-boundaries&quot;&gt;Client Side Verification Caching Across Module Boundaries&lt;/h4&gt;

&lt;p&gt;For things like NFTs that we saw, we have to always re-compile the &lt;em&gt;entire&lt;/em&gt;
history of the NFT to do state transitions. However, many of these state
transitions are just doing the exact same thing every time, re-verifying from
genesis. We should be able to cache the compilations at well defined boundaries.&lt;/p&gt;

&lt;h4 id=&quot;better-formal-analysis-tools--type-system-on-top-of-sapio&quot;&gt;Better formal analysis tools / type system on top of Sapio&lt;/h4&gt;
&lt;p&gt;Currently Sapio has the ability to define various interfaces for composing Sapio contracts cleanly.&lt;/p&gt;

&lt;p&gt;But we don’t have a great way of proving what we want a contract to do v.s. what it does.&lt;/p&gt;

&lt;p&gt;This work will start as being able to express more properties about a module in
it’s “manifest”, and will culminate in being able to check the validity of compositions
of contracts based on them.&lt;/p&gt;

&lt;p&gt;If anyones looking to do a PhD thesis on Sapio, this is prolly it.&lt;/p&gt;

&lt;h4 id=&quot;more-module-types&quot;&gt;More Module Types&lt;/h4&gt;

&lt;p&gt;Right now all WASM modules are for generating a ‘Compiled’ contract from a JSON.&lt;/p&gt;

&lt;p&gt;I would love to add defined module types to cover all the standard components like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Miniscript Fragments&lt;/li&gt;
  &lt;li&gt;Then Functions&lt;/li&gt;
  &lt;li&gt;Continuation Functions&lt;/li&gt;
  &lt;li&gt;Transaction Template Generators&lt;/li&gt;
  &lt;li&gt;Trait Verifiers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and more.&lt;/p&gt;

&lt;h4 id=&quot;more-emulator-types&quot;&gt;More Emulator Types&lt;/h4&gt;

&lt;p&gt;Sapio works &lt;em&gt;today&lt;/em&gt; with CTV &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt; functions because the functionality can be
emulated by a federation of signers.&lt;/p&gt;

&lt;p&gt;Figuring out how to cleanly extend the signing server paradigm to a number of
different types of Covenant proposal (e.g. APO, TLUV, CAT) or other opcodes
could add a lot of value for making Sapio the defacto platform and proving
ground for upgrades to Bitcoin.&lt;/p&gt;

&lt;h4 id=&quot;unifying-then-and-continuation&quot;&gt;Unifying Then and Continuation&lt;/h4&gt;

&lt;p&gt;Then and Continuation really are the same thing conceptually, it would be&lt;/p&gt;

&lt;h4 id=&quot;standard-library-of-useful-applications--plugins&quot;&gt;Standard Library of useful applications / Plugins&lt;/h4&gt;

&lt;p&gt;Title says it all. There should be more off the shelf things to use!&lt;/p&gt;

&lt;h4 id=&quot;wallet-stack-for-sapio-contracts&quot;&gt;Wallet Stack for Sapio Contracts&lt;/h4&gt;

&lt;p&gt;The Sapio Studio is rapidly imporving as a system for engaging with Sapio
contracts, but it’s lacking in the management and storage of all of a user’s
contracts. We can, and will, do a better job with this.&lt;/p&gt;

&lt;p&gt;This includes being able to make watchtower-like functionality for Sapio. It’s
coming, but will likely require a lot of new features to the language spec to
express if this then that monitoring conditions. And with features comes
complexity.&lt;/p&gt;

&lt;p&gt;You can see hints to this in the slide earlier, being able to react to e.g.
confirmation or mempool events.&lt;/p&gt;

&lt;p&gt;This also includes dramatic improvements needed to the GUI so that users
can understand much more deeply what contracts are doing.&lt;/p&gt;

&lt;h4 id=&quot;binary-releases&quot;&gt;Binary Releases&lt;/h4&gt;

&lt;p&gt;Right now Sapio is just DIY to build and run it yourself, but we really ought to
work towards stable binary releases to quickstart users.&lt;/p&gt;

&lt;h4 id=&quot;visual-programming-for-building-sapio-contracts&quot;&gt;Visual Programming for Building Sapio Contracts&lt;/h4&gt;

&lt;p&gt;When composing together Sapio modules, I would &lt;em&gt;really&lt;/em&gt; like for it to be kind
 of labview like interface for adding data or other modules, where you can
 “typecheck” that the wires (module names) are composing into slots they work.
 If that sounded like gibberish, I just mean that I want to be able to plug in a
 module hash for a NFT Sale contract into my NFT contract and have the UX give
 me real time feedback if I should be able to do that.&lt;/p&gt;

&lt;h4 id=&quot;sapio-package-manager--deterministic-builds--signers&quot;&gt;Sapio Package Manager / Deterministic Builds / Signers&lt;/h4&gt;

&lt;p&gt;As more modules become commonly used (e.g., like NFTs) we want to ensure all
 users can build an exact copy themselves (Deterministic Builds) or that they
 can find a build signed by a number of respected code signers (Signers). While
 we can use Cargo / crates.io for the package management of our actual rust code,
 we need something to distribute the sapio wasm blobs nicely!&lt;/p&gt;

&lt;h4 id=&quot;testing&quot;&gt;Testing&lt;/h4&gt;

&lt;p&gt;Writing tests for Sapio contracts is hard as heck. We need some bold ideas on
 what sorts of properties would be useful to test for. Fortunately, a lot of
 properties we care about (like not wasting money) can be checked by the sapio
 library to be safe, but we still want to be able to ensure we never lose a
 users funds out of Sapio.&lt;/p&gt;

&lt;p&gt;#### Getting CTV Locked in&lt;/p&gt;

&lt;p&gt;Duh!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If I get even a tenth of this completed 2022 will be a good year for Sapio.&lt;/p&gt;

&lt;p&gt;But I plan to get it all done.&lt;/p&gt;

&lt;p&gt;Perhaps with your support – if you’re an engineer or funder interested
 in helping propel this, please reach out!&lt;/p&gt;

&lt;p&gt;p.s. safe holiday travels!&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:mit&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;That honor I think goes to the MIT Bitcoin Expo. &lt;a href=&quot;#fnref:mit&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Decentralized Autonomous Organizations (DAOs) Will Save Bitcoin</title>
   <link href="/bitcoin/2021/12/22/advent-25/"/>
   <updated>2021-12-22T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/22/advent-25</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 25 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The title of this article is a joke. Gotcha!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/dao/bart.png&quot; alt=&quot;Bart Simpson writing &amp;quot;DAOs are just fancy multisigs&amp;quot;.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Decentralized Autonomous Organization is pretty much what’s called an &lt;em&gt;&lt;a href=&quot;http://itre.cis.upenn.edu/~myl/languagelog/archives/003555.html&quot;&gt;orphan
initialism&lt;/a&gt;&lt;/em&gt;.
So while DAO doesn’t really mean anything is decentralized, autonomous, or an
organization, but the term DAO has stuck around anyways. Even moreso than NFT!
More or less, DAOs are just fancy multisigs. But they’ve been used for all sorts
of things, ranging from attempting to buy the US Constitution as a group,
investing in startups, buying Ross Ulbricht’s NFTs, or maybe even buying my
undies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/dao/nytimes.jpeg&quot; alt=&quot;yes this is a joke&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This post has some required reading. You have to have read through at least up
to &lt;a href=&quot;/bitcoin/2021/12/10/advent-13/&quot;&gt;payment pools&lt;/a&gt; in the advent calendar, but
ideally you’d have read all the posts…&lt;/p&gt;

&lt;p&gt;So how will fancy-multisigs save Bitcoin? In this post we’ll work through an
example of building a DAO to fund Bitcoin Core Developers, like a Bitcoin native
Gitcoin competitor.&lt;/p&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;what-do-we-want-from-our-dao&quot;&gt;What do we want from our DAO:&lt;/h1&gt;

&lt;p&gt;The DAO will serve three functions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To Add members who pay in&lt;/li&gt;
  &lt;li&gt;To make Payments if a Majority of the payers by value vote&lt;/li&gt;
  &lt;li&gt;To mint commemorative NFTs&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;majority-rules&quot;&gt;Majority rules&lt;/h2&gt;

&lt;p&gt;DAOs are little democracies, and as such we need a voting scheme to do rule
changes whereby a threshold (e.g., 51%) decides what happens next. We have two
options, we can either count individuals as equal, or we can weight by amount of
funds contributed. We can do any threshold we like, it’s just “this many people
could steal the whole pot”.&lt;/p&gt;

&lt;p&gt;For this post, we’ll do the weighted by funds contributed because that feels
closer to what’s happening in Ethereum land. Unfortunately a couple components
around generated arbitrary weighted signatures&lt;sup id=&quot;fnref:frost&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:frost&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; just “aren’t quite there” or have
messy tradeoffs so we won’t consider those – yet. Instead we’ll just make a silly
limit: we will allow at most 24 participants&lt;sup id=&quot;fnref:combo&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:combo&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&quot;implementing-a-dao&quot;&gt;Implementing a DAO&lt;/h2&gt;

&lt;p&gt;First let’s define the basics. A DAO should have Members who each are ID’d by a
key and have an amount of votes.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;#[derive(Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;relative_votes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[derive(Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Pool Members&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// map of all initial balances as PK to BTC&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BTreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The current sequence number (for authenticating state updates)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hold_vote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Members can hold a vote on a proposal of some kind. Let’s do proposals
that can make payments, mint NFTs, or add some noobs:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// New Update message for generating a transaction from.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Serialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Proposal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Payments&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// A mapping of public key in members to signed list of payouts with a fee rate.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Payments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BTreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountU64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Some purpose for this proposal, as a String.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Mint&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Make some NFTs&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Mint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;minting_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SapioHostAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mint_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Add People&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;noobs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BTreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// required...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Proposal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatefulArgumentsTrait&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Proposal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// helper for rust type system issue&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default_coerce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatefulArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can implement the main logic of the DAO. We want it to compute keys for
the majority to rule, and we want it to allow a majority to vote on a Proposal.
Note how when we make a payment, unlike in the Payment Pool, we decrease all
member’s proportional ownership in the pool&lt;sup id=&quot;fnref:rat&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:rat&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, so that new owners are not
disadvantaged. But we could change that, to time-weight how long members have
been part of the DAO as well, or give people ‘special voting weight’
disconnected from money added. It’s really up to whatever you want…&lt;/p&gt;

&lt;p&gt;We’ll implement the logic for each type of proposal (minting, adding, or paying).&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Sum Up all the balances&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.relative_votes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// all signed the transaction!&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;majority_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
            &lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.relative_votes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// TODO: we should probably make guards return Result...&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;key_groups_to_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compute_key_groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Well Formed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// This Function will create a proposed transaction that is safe to sign&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// given a list of data from participants.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[continuation(&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;web_api,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::majority_rules]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;coerce_args&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;default_coerce&quot;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hold_vote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// don't allow empty updates.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;minting_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mint_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minting_module&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// let's now compile a new 'mint' of the NFT&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_nft_contract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateArgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContextualArguments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;effects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mint_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mint_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_contract_by_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.map_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.ok_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_nft_contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noobs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noobs&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.relative_votes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;noobs&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter_mut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.for_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;.entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;.and_modify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.relative_votes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.relative_votes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;.or_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Payments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.is_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// collect members with updated balances here&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.fold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spent&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_btc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_btc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_members&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;new_members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.values_mut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.for_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.relative_votes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.relative_votes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// for each payment...&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// Send any leftover funds to a new pool&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// optional: we could commit to the reason somewhere in metadata &lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// e.g. a tapleaf branch... we don't do this here because meh.&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.try_into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;REGISTER!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;logo.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, we need some super special sneaky algorithm fun to implement signing authorities
based on majority value. As noted, special uses of FROST could replace this, or future
research on better weighted key protocols.&lt;/p&gt;

&lt;p&gt;For now, we limit ourselves to 25 keys so that compilation isn’t too slow. We can afford
having hundreds of thousands or millions of groups because of Taproot :).&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_groups_to_clause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clause&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;.enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;.filter_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compute_key_groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.is_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// sort for stable ordering&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// The bitmasks for which keys to participate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// BEGIN ALGORITHM:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// if we see a bit set out of range, we can stop.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail_if_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// we know that 0 elements is invalid, we need up to el.len()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// get the first member of our permutation&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;element_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// if any bits are set in the failure zone stop&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail_if_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// compute the sum of the elements in this mask&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
                &lt;span class=&quot;py&quot;&gt;.sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// this set is a candidate!&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// subtract the smallest value (this is why we sorted) -- if it&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// fails it is not a minimal set because there exists a passing&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// set without this element.&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// note: trailing zeros is guaranteed to be in bounds&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.trailing_zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// it did fail, so save it&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sets&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// get the next ct&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// Adapted from https://www.alexbowe.com/popcount-permutations/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Compute the lexicographically next bit permutation&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Taken from http://graphics.stanford.edu/~seander/bithacks.html&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// t gets v's least significant 0 bits set to 1&lt;/span&gt;
                              &lt;span class=&quot;c&quot;&gt;// Next set to 1 the most significant bit to change,&lt;/span&gt;
                              &lt;span class=&quot;c&quot;&gt;// set to 0 the least significant ones, and add the necessary 1 bits.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.wrapping_neg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.trailing_zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///    Generates first permutation with a given amount of set bits, which is&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///    used to generate the rest.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;element_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All done! Not too bad huh? I think you’re really getting the hang of this thing!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;using-a-dao&quot;&gt;Using a DAO&lt;/h1&gt;

&lt;p&gt;Now that we have this DAO we can get together a group of people and share a UTXO.&lt;/p&gt;

&lt;p&gt;With that shared balance, we can get everyone in some kind of chat room and ‘govern’
what proposals folks want to vote on.&lt;/p&gt;

&lt;p&gt;In particular, I would be very excited to see DAOs emerge for funding Bitcoin
Developers.  This type of structure can potentially help folks communally
allocate capital. Often times the biggest barrier is finding deals that make
sense, and DAOs would enable you to share with a group of friends and they could
make decisions for you.&lt;/p&gt;

&lt;p&gt;It would even be possible to create DAOs on behalf of third parties and fund
them. For example, let’s say I get PKs for 10 devs I like and put a 10 BTC into
it and set the shares up so that there is a ‘leader’ with 30%, and the rest
split 70% of voting shares. The leader could just steal the money with another
21%, but would they? I hope not! Instead, they can vote on good things as
intended.  It’d also be possible for the DAO creator to embed an ‘oversight
comittee’ that can yank the funds if not being used.&lt;/p&gt;

&lt;p&gt;Minting NFTs is kind of a cool feature since anyone can see they came from the
DAO if they track the DAO’s state updates (conceivably these get published for
auditing). NFTs could be issued as medals of honor for devs who follow their
grants. Or, if you really like NFTs, they could be used to issue software
licenses in exchange for contributing funds to the DAO operators.&lt;/p&gt;

&lt;h1 id=&quot;does-this-need-ctv&quot;&gt;Does this need CTV?&lt;/h1&gt;

&lt;p&gt;Nope. Just a fancy multisig, right?&lt;/p&gt;

&lt;p&gt;Where CTV is useful is if we want to vote on proposals to put things into CTV
contracts, like subscriptions to developer grants, opening channels, etc.
Imagine the developer gets a contract where they get paid out every week, but
there is a auditing comittee that can be used to terminate the subscription and
return funds to the DAO if misbehavior is detected.&lt;/p&gt;

&lt;p&gt;While you don’t need CTV in the DAO backbone, it would help open up new use
cases.&lt;/p&gt;

&lt;p&gt;It would also be possible to add some ‘liveness’ smooth degradations of the DAO,
whereby half the majority (e.g., if majority is 50%, 25%) could vote that the
DAO is dead, and after a period of time for the majority recovery, distribute
the funds on a pre-comitted schedule.&lt;/p&gt;

&lt;p&gt;We don’t show that here, but it wouldn’t be too hard now would it?&lt;/p&gt;

&lt;h1 id=&quot;generalizing&quot;&gt;Generalizing&lt;/h1&gt;

&lt;p&gt;One could go ahead and implement a DAO trait that all DAOs could share and build
a common UX for managing DAOs with a wide variety of custom logic…&lt;/p&gt;

&lt;p&gt;It’d also be possible to have a DAO backbone which is a single UTXO, and have
other UTXOs ‘owned’ by the DAO that can get merged in later as a proposal. This
way contributions to the DAO don’t always require a state update from the DAO
itself.&lt;/p&gt;

&lt;p&gt;For future work :)&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:frost&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;FROST allows n-M threshold Schnorr signatures, which can turn into a weighted solution by making M the total value and each party have W amount of keys for their contribution. But this scales poorly because you need to exchange keys and signatures linear in the Amount, which is up to a 51-bit number. &lt;a href=&quot;#fnref:frost&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:combo&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;We are going to brute force all the N-N key combinations, so we pick a low number like 24 and things stay ‘small’ enough. &lt;a href=&quot;#fnref:combo&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:rat&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;please please if you’re implementing this for real use rational types not floats. &lt;a href=&quot;#fnref:rat&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>POWSWAP: Oracle Free Bitcoin Hashrate Derivatives</title>
   <link href="/bitcoin/2021/12/21/advent-24/"/>
   <updated>2021-12-21T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/21/advent-24</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 24 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today’s post is near and dear to my heart – years ago I put up an interest form
for &lt;a href=&quot;https://powswap.com&quot;&gt;powswap.com&lt;/a&gt;, but as I went down the rabbit hole I
realized how badly I wanted generic tooling to automate the building of these
which is partly what led to Sapio!&lt;/p&gt;

&lt;p&gt;So therefore it’s very exciting to show you the basics of powswap in Sapio. You
can see how bad the early version was
&lt;a href=&quot;https://gist.github.com/JeremyRubin/8bacafdb997c588ef2a203ffeb726b83&quot;&gt;here&lt;/a&gt;. If
you want to contrast life with Sapio and without.&lt;/p&gt;

&lt;h1 id=&quot;what-is-a-powswap&quot;&gt;What is a Powswap?&lt;/h1&gt;

&lt;p&gt;The basic idea of Powswap is super simple. It is a contract that measures a
block surplus or deficit – a Block Delta Contract (BDC). A  BDC allows
counterparties to bet on statements like “at the end of 6 months, we will be +/-
1000 blocks against the current expected number of blocks”, and program a payoff
curve based on the binary outcome of that. The block delta should be – and this
is a matter for the analysts to price on and model – correlated with changes in
hashrate.&lt;/p&gt;

&lt;h3 id=&quot;who-the-f-cares&quot;&gt;WHO THE F CARES&lt;/h3&gt;

&lt;p&gt;Well imagine you are about to buy a new fancy mining rig to mine with. But you
have a moment of doubt – what if everyone else is doing that right now too?&lt;/p&gt;

&lt;p&gt;You could buy hashrate derivatives where you win money if the hashrate increases
and lose if it stays the same.&lt;/p&gt;

&lt;p&gt;This would de-risk your investment in mining.&lt;/p&gt;

&lt;p&gt;You can also lever-up and increase profit if you’re adding a lot of hashrate,
doubling down that hashrate goes up, but let’s not entertain the degens shall
we.&lt;/p&gt;

&lt;h3 id=&quot;ok-ok-how-can-i-do-it&quot;&gt;OK OK How can I do it?&lt;/h3&gt;

&lt;p&gt;One could imagine making a BDC based on the Oracle system we saw in yesterday’s
post.  But the magic of Powswap is that we will do this without using any oracle
whatsoever, just measuring the blocks directly.&lt;/p&gt;

&lt;p&gt;How do we do this?&lt;/p&gt;

&lt;p&gt;The answer is actually really simple. Suppose Alice wants to get 1 Bitcoin if
100 blocks are missing at the end of the week (the 28th, let’s say expected 1000
blocks), and Bob wants to win 1 Bitcoin if they are actually there.&lt;/p&gt;

&lt;p&gt;All we have to do is have Alice and Bob agree to a multisig to deposit 0.5 BTC
each to, and then pre-sign from it two transactions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If the date is the 28th at noon and the height is greater than 1000, Bob gets paid 1 BTC&lt;/li&gt;
  &lt;li&gt;If the date the date is the 28th at noon + 8 hours, Alice gets paid 1 BTC&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s think it through:&lt;/p&gt;

&lt;p&gt;Suppose that Alice is right and blocks are 100 short by
noon.&lt;/p&gt;

&lt;p&gt;In the next 8 hours, only 48 blocks should be mined (and probably less, if the
hashrate has actually decreased).&lt;/p&gt;

&lt;p&gt;After that point, Alice has 8 more hours (again, probably more if hashrate
actually decreased) to broadcast and claim her BTC.&lt;/p&gt;

&lt;p&gt;Suppose that Bob is right and blocks reach 1000 at noon. Bob has 8 hours to
claim the BTC before Alice can.&lt;/p&gt;

&lt;h3 id=&quot;metastability&quot;&gt;Metastability&lt;/h3&gt;

&lt;p&gt;Where this is a bit wonky is that the result is metastable. Let’s assume that
neither Alice nor Bob is right: The deficit is 50 blocks short.&lt;/p&gt;

&lt;p&gt;At noon, Bob cannot claim. But in 8 hours he can! But also in 8 hours Alice can
claim too.&lt;/p&gt;

&lt;p&gt;So who wins?&lt;/p&gt;

&lt;p&gt;The answer is either! Using a POWSWAP you either want to be really right or
really wrong.&lt;/p&gt;

&lt;p&gt;We’ll see some cool results around why this might not be a huge deal later.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Let’s flip the powswap around now, for a surplus of blocks. Bob thinks the
blocks will be 1000, Alice thinks 1100.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If the date is the 28th at noon + 8 hours, Bob gets paid 1 BTC&lt;/li&gt;
  &lt;li&gt;If the date the date is the 28th at noon and there are 1100 blocks, Alice gets paid 1 BTC&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Under this model if Alice is right there should be that many blocks by that
time, and if Bob is right there should not be and a resaonable amount of time
later Bob can claim.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It’s a bit harder to see, but we can even implement this logic more simply as just:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If we reach +1 week, give Bob 1 BTC&lt;/li&gt;
  &lt;li&gt;If we reach +1100 blocks, give Alice 1 BTC&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then, if a week goes by first without seeing 1100 blocks, Bob can claim. If the
1100 blocks show well before the week is up, then Alice can claim. If neither
are really right then it’s metastable and either could win.&lt;/p&gt;

&lt;h2 id=&quot;we-are-not-going-there&quot;&gt;We are not going there!&lt;/h2&gt;

&lt;p&gt;There are a myriad of different combinations of locktimes and heights that you
can use to do this correctly, we won’t focus too much on that in this post, and
we’ll let our contract users decide what parameters they want.  Let the analysts
figure out what the right combo of locktimes and stuff is to hedge different
risks. They should get paid for something, right?&lt;/p&gt;

&lt;p&gt;One of the wrinkles is that the less time you have in your contract, the more
metastable it is.  The more time you have, expecially across difficulty
adjustments, the more the deficits can be erased.&lt;/p&gt;

&lt;h1 id=&quot;implementing-a-powswap&quot;&gt;Implementing a Powswap&lt;/h1&gt;

&lt;h2 id=&quot;is-ctv-required&quot;&gt;Is CTV Required?&lt;/h2&gt;

&lt;p&gt;In the example I gave above, it is not! However, if you have CTV then one party
can unilaterally open a hashrate derivative for other parties, and that matters
quite a lot!&lt;/p&gt;

&lt;p&gt;This means that when we do implement it, we will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt; because if you
want the pre-signature version you can use CTV Emulators.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;First we’ll start by writing some code to be able to describe the locktimes
under which some outcome is considered “resolved”. We’ll write a container type
(the data we actually need) and then we’ll write a verifier type that makes
for a convenient API for human input. It’s kind of gross, so you can skip
the verifier type code and just imagine you put in the correct parameters.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// `ContractVariant` ensures that we either set a Relative Height and Absolute&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Time or a Relative Time and Absolute Height, the two valid combinations, or&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// just one.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Note these are unlocking conditions for each participant.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Validity is ensured through smart constructor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Copy)]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[serde(try_from&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ValidContractVariant&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ContractVariant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnyRelTimeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnyAbsTimeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// In order to test for coherence here, we should convert&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// ValidContractVariant to ContractVariant.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// The coherence rules should match one ruleset of:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// - a single type of TimeLock (Relative Height, Relative Time, Absolute Time,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///   Absolute Height)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// - a mixed TimeLock of just Relative Height/Absolute Time or just Relative&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///   Time/Absolute Height&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ValidContractVariant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnyTimeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TryFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValidContractVariant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContractVariant&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;try_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vcv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValidContractVariant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vcv&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.filter_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vcv&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.filter_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_rh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;matches!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyRelTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_rt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;matches!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyRelTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;#[derive(Debug)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LocalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'static&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Display&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_rh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_rt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LocalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;Must have some timelock set!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_ah&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;matches!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyAbsTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;matches!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyAbsTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_ah&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LocalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;Incoherent Absolute Timelocks (mixed height/time)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.max_by_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyRelTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.max_by_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyAbsTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;matches!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LocalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;Must have some timelock set!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_rt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_rh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_rt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LocalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;Must mix {Relative,Absolute} Height and Absolute time!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContractVariant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContractVariant&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyRelTimeLock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;RelTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyAbsTimeLock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;AbsHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;try_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that out of the way, let’s now define our contract data:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// Instructions for a Payment from an outcome&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pays&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountU64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// A `Outcome` is a contract where&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Outcome&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Variant&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// if the base is time or height for the relative leg.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unlocks_if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContractVariant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Outcome&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Payments to make (should be &amp;gt;= 1)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// A `PowSwap` is a contract where&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PowSwap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Parties&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outcomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Outcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Cooperate Key&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;coop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PowSwap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cooperate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, it’s pretty simple. We just need a set of keys to ‘opt out’ of
the on-chain execution, and a set of outcomes and their unlocking conditions.
We can pay an arbitrary number of parties.&lt;/p&gt;

&lt;p&gt;Now to finish, let’s implement the logic. It’s really simple, we just create the
(2) transactions and assign the sequences/locktimes properly.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PowSwap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cooperate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.coop&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_payoffs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pays&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bld&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sats&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;payoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.outcomes&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.derive_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.make_payoffs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.outcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.set_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.unlocks_if&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.set_lock_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.unlocks_if&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That wasn’t so bad now, was it?&lt;/p&gt;

&lt;h1 id=&quot;using-powswap&quot;&gt;Using PowSwap&lt;/h1&gt;

&lt;p&gt;We already said we’re not going to analyze the profit of these contracts, but I
want to give a couple cool ways to use these.&lt;/p&gt;

&lt;h2 id=&quot;when-to-cooperate&quot;&gt;When to Cooperate?&lt;/h2&gt;

&lt;p&gt;One thing that I think would be important to settling a hashrate derivative would be
to set it for, say, 6 months forecast and then try to roll the strategy at 3 months cooperatively.&lt;/p&gt;

&lt;p&gt;This way you don’t have trouble with metastability as you and your counterparty
can update forecasts and re-enter the contract, or go separate ways.&lt;/p&gt;

&lt;h2 id=&quot;take-it-to-the-limit&quot;&gt;TAKE IT TO THE LIMIT&lt;/h2&gt;

&lt;p&gt;Well what if instead of settling on-chain, you nested these in LN channels? And
then every microsecond you don’t see a block being advertised and broadcast, you
update your probabilities and try to adjust with your counterparty. It becomes
pretty neat becuase you essentially make a hashrate perpetual where if your
counterparty dies then you settle on-chain (if they’re really dead, you just
win), but you can update your forecasts on whatever frequency you want. All
trustlessly.&lt;/p&gt;

&lt;h3 id=&quot;the-information-market-for-relaying&quot;&gt;The Information Market for Relaying&lt;/h3&gt;

&lt;p&gt;This opens the door for HFT-ing information about the rate of block production.
Knowing a block is mined and getting it relayed to you before your counterparty
gives you an edge in trading.&lt;/p&gt;

&lt;p&gt;Maybe this pays for really really good block relaying infrastructure?&lt;/p&gt;

&lt;h2 id=&quot;galaxy-brain-me&quot;&gt;GALAXY BRAIN ME&lt;/h2&gt;

&lt;p&gt;Hey, it’s me. Your old friend Decentralized Coordination Free Mining Pools. What
if we made – using CTV – the channels/payouts by default resolve into some sort
of hashrate future, and we had an automated hedging market maker that could incorporate
your desired side of a trade from old hash shares into opening new positions for you every block.
If it was in channels you could immediately turn these into hashrate perps.&lt;/p&gt;

&lt;h3 id=&quot;metastability-1&quot;&gt;Metastability&lt;/h3&gt;
&lt;p&gt;If you’re a miner and you mine, say, 2 blocks a day, then you can usually expect
to be able to settle your own metastable hashrate derivatives as long as the
metastable window isn’t smaller than ~12 hours. This means that while normie
pleb users might struggle with closing their derivatives, miner-to-miner
hashrate derivatives should be actually pretty safe if you stay in your
bounds.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Can we really do this? How effective is it? Honestly I have no idea I just think
it’s mind-blowing.&lt;/p&gt;

&lt;h2 id=&quot;gimme-all-my-options&quot;&gt;Gimme all My Options&lt;/h2&gt;

&lt;p&gt;This idea composes beautifully with the options we saw yesterday. What if I want
the &lt;em&gt;option&lt;/em&gt; for the next week to open up a 6 month hashrate contract with you?&lt;/p&gt;

&lt;p&gt;Just toss it into an Expiring Under Funded Option contract and you got it. And
because we represented these as Dutch Auctionable NFTs, you can advertise the
position you’re willing to open to the network and take the best offer for this
option.&lt;/p&gt;

&lt;p&gt;Sapio composes. Legit forreal.&lt;/p&gt;

&lt;p&gt;DeFi is coming to Bitcoin.&lt;/p&gt;

&lt;p&gt;And it’s going to help with securing the base layer of Bitcoin by permitting
trustless financialization of investments in hashrate.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Have a great day. P.s. now is a good time to join
&lt;a href=&quot;https://utxos.org/signals&quot;&gt;utxos.org/signals&lt;/a&gt; if you think CTV is a great next
step in Bitcoin Development’s journey.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Derivatives and Options For Bitcoin</title>
   <link href="/bitcoin/2021/12/20/advent-23/"/>
   <updated>2021-12-20T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/20/advent-23</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 23 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In today’s post we’re going to talk about derivatives and options. Hoooo Boy!&lt;/p&gt;

&lt;h1 id=&quot;lets-define-an-option&quot;&gt;Let’s define an Option:&lt;/h1&gt;

&lt;p&gt;An option is a contract that gives the holder the right to take an action to the
detriment of a counterparty. Options can be created for payment.&lt;/p&gt;

&lt;p&gt;For example, I might say to you, “hey! I heard you’re pretty good at coming up
with memes. I’d like to pay you $10 for the option to buy the next meme you make
supporting OP_CTV for $100.”&lt;sup id=&quot;fnref:shill&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:shill&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; You might say “OK”, and then make a meme.
I think it’s awful and I tell you to go away. I’m out the $10, but not $110! I
can’t post the meme though or my friends will think I’m lame for sharing Right
Clicked Content. Or, if I think it’s great, I can pay you the $100 and then
I’m off to the races.&lt;/p&gt;

&lt;p&gt;There are a few different types of Option contract to think about:&lt;/p&gt;
&lt;h3 id=&quot;call-vs-put&quot;&gt;Call v.s. Put.&lt;/h3&gt;

&lt;p&gt;A Call option we get the right to buy something later for a fixed price (like a preorder).&lt;/p&gt;

&lt;p&gt;A Put option we get the right to sell something later for a fixed price (like insurance).&lt;/p&gt;

&lt;p&gt;Here’s how to remember it:&lt;/p&gt;

&lt;p&gt;Think about a nice puppy. You Call the puppy to you, and give him a cookie, head
pat, and a “good boy”.&lt;/p&gt;

&lt;p&gt;Think about a naughty puppy. You take away your chewed up sneaker, and Put her
in her crate. “Bad girl”.&lt;/p&gt;

&lt;h3 id=&quot;american-v-european&quot;&gt;American v. European&lt;/h3&gt;

&lt;p&gt;American options you can settle at any time before it “expires”.&lt;/p&gt;

&lt;p&gt;European options you must settle during a specific window after it expires, and
before the window expires.&lt;/p&gt;

&lt;p&gt;Think of European options like a restaurant reservation. You can no-show if you want,
but you can show up between 7:00 and 7:15 and be seated.&lt;/p&gt;

&lt;p&gt;American options are like a hold on jacket you think is beautiful at Saks Fifth
Ave.  You could come and buy it later today, tomorrow even! But wait a week and
someone else will buy it because they put it back on the rack.&lt;/p&gt;

&lt;h3 id=&quot;collateralized-v-non-collateralized&quot;&gt;Collateralized v. Non Collateralized&lt;/h3&gt;

&lt;p&gt;A collateralized option means that the asset is actually there.&lt;/p&gt;

&lt;p&gt;For example, think of Jerry Seinfeld renting a car. He reserved the car (buying
a call option), but they didn’t have a car when he showed up. They knew how to
take the reservation, but not keep it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/seinfeld.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is an example of a ‘naked short sale’ of the car rental, because it wasn’t
backed by an actual car to rent.&lt;/p&gt;

&lt;p&gt;I don’t have a proof, but we can’t really build that kind of thing in Bitcoin.&lt;/p&gt;

&lt;p&gt;However, imagine if Jery had to, in order to make his reservation, make a
deposit for the entire value of the reservation. Sure, he could get a refund,
but then he would have an opportunity cost of which options. Imagine you’re
taking your partner out for a suprise dinner that’s going to cost $1000, but you
don’t know which one is going to be better so you reserve two restaurants and
cancel one you decide not to go to for a 1% penalty. If you had to deposit, it would
cost you $10 for the no-show, but you’d have to put up $2000 to hold the reservations!
If instead, you paid both restaurants $10 up front, then you would only need to lock
up $20 instead. Much more efficient!&lt;/p&gt;

&lt;p&gt;These, we will build.&lt;/p&gt;

&lt;h2 id=&quot;the-optimal-strategy-for-pricing-options&quot;&gt;The Optimal Strategy for Pricing Options&lt;/h2&gt;

&lt;p&gt;Just kidding. I have no idea. It’s a complex subject, but some people are OK at
it. This post is just plumbing.&lt;/p&gt;

&lt;h1 id=&quot;whats-derivative&quot;&gt;What’s Derivative?&lt;/h1&gt;

&lt;p&gt;Your humor…. burnnnn. Just kidding.&lt;/p&gt;

&lt;p&gt;A derivative is uhhh… well. It’s anything that isn’t the thing?&lt;/p&gt;

&lt;p&gt;A derivative is a way of taking a real thing (e.g. a ton of corn, an NFT, an
Apple Stock) and then either wrapping it or observing it in some other financial
product.&lt;/p&gt;

&lt;p&gt;In fact, Options themselves are Derivatives! Wacky, right? It’s a thing (e.g. a
car) and then the right to buy that car has a price and a value that is a
function of what the car is, but a lot of other factors too. So the option isn’t
the car, but it’s connected.&lt;/p&gt;

&lt;p&gt;An option is a “Real Derivative” because it is actually connected to the car
that is bought or sold. But we can also make “Synthetic Derivatives” that just
measure some external quantity (somehow) and then give you some amount of value
in return. For example, I could make a synthetic option that mints an NFT of a
car instead of the actual car. Or I could make a synthetic derivative that
measures the price of the car over the last month and gives me that value in
Bitcoin at the end of the month.&lt;/p&gt;

&lt;p&gt;For synthetics, they have to be over collateralized to cover all outcomes. E.g.,
if we expect the car to be $50,000, but it might go to $100,000, we have to lock
up $100,000. And if the price is $200,000, well our max profit is $100k then.&lt;/p&gt;

&lt;p&gt;The Options we saw earlier were very binary in outcome. Synthetic derivatives
like these can emulate &lt;em&gt;any&lt;/em&gt; function, discontinuous or continuous. So you could
have a contract, for example, that pays out on a sinusoidal wave based on the
car price. Trippy.&lt;/p&gt;

&lt;h2 id=&quot;wheres-the-info-come-from&quot;&gt;Wheres the info come from?&lt;/h2&gt;

&lt;p&gt;Well, multiple places. We could get it from a third party (maybe using an
attestation chain of some sort?), or there are certain ways it could be
self-referential (like for &lt;a href=&quot;https://powswap.com&quot;&gt;powswap&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&quot;lets-see-some-code&quot;&gt;Let’s See Some Code&lt;/h1&gt;
&lt;h2 id=&quot;synthetic-derivatives&quot;&gt;Synthetic Derivatives&lt;/h2&gt;
&lt;p&gt;I love the children equally, so let’s start with Derivatives now.&lt;/p&gt;

&lt;p&gt;First let’s define an Oracle Interface who provides us data. All the Oracle does
is, given a Symbol (some request), gives us a Clause they will help us satisfy
if the Symbol is true, and something else if it is false.  Imagine a symbol that
you can query an oracle for questions such as “is a Bitcoin worth more than
$50k”.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// Placeholder type for a standard way of looking up a stock symbol; can be defined more&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// concretely but should have a human readable string representation.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Oracle is a generic wrapper for any logic to get a pair of binary clauses.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// It can be based on hash preimage, federated signers, or key revealing.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// The Trait Object can be responsible for network requests/caching.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oracle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// returns keys (price lo, price hi) for the given query&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_key_lt_gte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s define a threshold oracle – we wouldn’t want to trust just one
lousy oracle, so let’s trust M out of N of them!&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// An Oracle can also be &quot;composed&quot; into a threshold scheme with other&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// oracles quite easily as below...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Under *certain* circumstances, composition could be optimized (e.g., schnorr keys)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThresholdOracle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// the list of price oracles to consult&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oracles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oracle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// how many oracles must agree&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oracle&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThresholdOracle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_key_lt_gte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
            &lt;span class=&quot;py&quot;&gt;.oracles&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_key_lt_gte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.unzip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.thresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.thresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The underlying clauses could really be anything… we can even (with some tweaks
to Sapio I’d LOVE to get working, but need to engineer) make this represent
Discrete Log Oracles with 2 counterparties and an external Oracle. If that means
something to you, good, otherwise you can ignore that remark.&lt;/p&gt;

&lt;p&gt;Now, let’s define a Generic framework for any outcome. The key insight we need
to have is that we can ask the oracle a bunch of greater-than-or-less-than
questions and build up a binary tree of transactions to settle at the right price.&lt;/p&gt;

&lt;p&gt;To start, let’s define some basic stuff for a ‘GenericBet’.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// A GenericBet takes a sorted list of outcomes and a cached table of&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// oracle lookups and assembles a binary contract tree for the GenericBet&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericBet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outcomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;oracle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Rc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cooperate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericBet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay_gte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay_lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oracle_no_show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But where do we get the list of price to outcome and price to oracle clause from?&lt;/p&gt;

&lt;p&gt;We need an external data source, right?&lt;/p&gt;

&lt;p&gt;We’ll define some arguments and then a way of turning those arguments into a precise GenericBet.&lt;/p&gt;

&lt;p&gt;We do it this way so that we can have GenericBetArguments accept
a non-deterministic oracle server type, and then GenericBet itself could live in WASM and be fully deterministic.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// To setup a GenericBet select an amount, a list of outcomes, and an oracle.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// The outcomes do not need to be sorted but must be unique.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericBetArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outcomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;oracle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oracle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cooperate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// We can then convert the arguments into a specific contract instance&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GenericBetArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericBet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericBetArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericBet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Make sure the outcomes are sorted for the binary tree&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.outcomes&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.sort_by_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Cache locally all calls to the oracle&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.outcomes&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.oracle&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_key_lt_gte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GenericBet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;outcomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.outcomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;oracle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cooperate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.cooperate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we’ll implement the logic behind a generic bet:&lt;/p&gt;

&lt;p&gt;Basically, we do a binary search over all the outcomes to find the middle, and
if the price is greater, we send to that one. Otherwise, the other one.
By winnowing through all of these outcomes recrusively, we are able
to resolve a single price:action pair and settle the contract.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericBet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The oracle price kyes for this part of the tree is in the middle of the range.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clause&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.oracle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.outcomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.outcomes&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recurse_over&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sapio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.outcomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GenericBet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;outcomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sl&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;oracle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.oracle&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;cooperate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.cooperate&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                        &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Action when the price is greater than or equal to the price in the middle&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then(guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::gte]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pay_gte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sapio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.recurse_over&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.outcomes&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.outcomes&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/// Action when the price is less than or equal to the price in the middle&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then(guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::lt]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pay_lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sapio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.recurse_over&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.outcomes&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Allow for both parties to cooperative close&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cooperate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.cooperate&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;#[then]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;oracle_no_show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// elided for simplicity: unilateral close initiation after certain&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// relative delay if oracle doesn't reveal data&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is, by itself, useless. But now that we have it we can implement now any
payoff curve we want to. I’ll just show one example and leave it as “homework”
for you to build others. We’ll start with the humble risk-reversal, which can be
used to stablize a Bitcoin against the dollar. You can think of it as a Bitcoin
“low pass” filter: you’ll still see big price swings, but not little ones. See below:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Value of BTC in Asset
     |            
     |                                 /
     |             a                  /
     |        &amp;lt;------         b      /
     |               -------------&amp;gt; /
     |        ----------------------
     |       /       ^
     |      /        |
     |     /        current price
     |    /
     --------------------------------------------------- price of BTC in Asset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Amount of BTC
     |            
     |-------
     |       \
     |        \  ^
     |         \  \
     |          \  \
     |           \  \
     |            \  \  a
     |             \  \
     |              \  \
     |               \  \
     |                \  \
     |                 \ &amp;lt;- current price
     |                  \  \
     |                   \  \
     |                    \  \
     |                     \  \ b
     |                      \  \
     |                       \  \
     |                        \  \
     |                         \  \
     |                          \  \
     |                           \  \
     |                            \  \
     |                             \  v
     |                              \
     |                               --------------
     |    
     --------------------------------------------------- price of BTC in Asset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, Operator would be providing enough Bitcoin (Y) for a user’s funds (X) such that:&lt;/p&gt;

&lt;p&gt;\((current - a)*(X+Y) = current * X\)
 or
\(Y * current = a * (X + Y)\)&lt;/p&gt;

&lt;p&gt;and would be seeing a potential bitcoin gain (Z) of&lt;/p&gt;

&lt;p&gt;\((current + b) * (X - Z) = current * X\)
 or
 \(Z = b * X / (b + current)\)&lt;/p&gt;

&lt;p&gt;or \(Z (current + b)\) dollars.&lt;/p&gt;

&lt;p&gt;Operator can profit on the contract by:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;selecting carefully parameters a and b&lt;/li&gt;
  &lt;li&gt;charging a premium&lt;/li&gt;
  &lt;li&gt;charging a fee (&amp;amp; rehypothecating the position)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Similar to our GenericBetArguments we’ll compile this to a GenericBet to hide all the Network-y stuff.&lt;/p&gt;

&lt;p&gt;First, let us define a couple APIs we need for the maker and taker of a contract (e.g., the person offering dollar stabilization and the person needing it).&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// An API for the Operator Service:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OperatorApi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Return Operator's Oracle&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_oracle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oracle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Get a fresh key clause for Operator signing (could be a multisig etc)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Get a contract for a receivable amount. Allows Operator to direct funds to e.g.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// cold storage contracts&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receive_payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// An API for the Counterparty&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserApi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Get a fresh key clause for user signing (could be a multisig etc)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Get a contract for a receivable amount. Allows Userto direct funds to e.g.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// cold storage contracts&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receive_payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let us define the Arguments to a Risk Reversal:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;//! RiskReversal represents a specific contract where we specify a set of price ranges that we&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//! want to keep purchasing power flat within.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RiskReversal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// the current price in dollars with one_unit precision&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_price_x_one_unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// price multipliers rationals (lo, hi) and (a,b) = a/b&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// e.g. ((7, 91), (1, 10)) computes from price - price*7/91 to price + price*1/10&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// ignore the&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;operator_api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;apis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OperatorApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user_api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;apis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, a bunch of complicated logic to turn those arguments
into a price curve for a GenericBetArguments that then gets turned
into a GenericBet:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONE_UNIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TryFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RiskReversal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericBetArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;try_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RiskReversal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.operator_api&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.user_api&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outcomes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.current_price_x_one_unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// TODO: Can Customize this logic to for arbitrary curves or grids&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// bottom and top are floor/ceil for where our contract operates&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.range&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.range&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONE_UNIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONE_UNIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.range&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.range&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONE_UNIT&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONE_UNIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ONE_UNIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// The max amount of BTC the contract needs to meet obligations&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_amount_bitcoin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;// represents an overflow&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strike_ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.derive_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;strike&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Increment 1 dollar per step&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strike&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.step_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ONE_UNIT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// Value Conservation Property:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// strike * (amount + delta)  == amount * current price&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// strike * (pay to user)  == amount * current price&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// pay to user  == amount * current price / strike&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strike&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refund&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_amount_bitcoin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;outcomes&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;strike&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;strike_ctx&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.derive_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strike&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.user_api&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.receive_payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refund&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.operator_api&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.receive_payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refund&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Now that the schedule is constructed, build a contract&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GenericBetArguments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// must send max amount for the contract to be valid!&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_amount_bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;outcomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;oracle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.operator_api&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_oracle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cooperate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TryFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RiskReversal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericBet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;try_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RiskReversal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;GenericBetArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;try_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Woooooop! Our Risk has been Reversed!&lt;/p&gt;

&lt;h2 id=&quot;options&quot;&gt;Options&lt;/h2&gt;

&lt;p&gt;First let’s play with Options.&lt;/p&gt;

&lt;p&gt;We need a generic trait interface for all options. The basics
are something to happen when it expires, and something to happen
when it is paid for (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strikes&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// Generic functionality required for Expiring contracts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;'static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;decl_then!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;/// What to do when the timeout expires&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expires&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;decl_then!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;/// what to do when the holder wishes to strike&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strikes&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First we’ll define an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExpiringOption&lt;/code&gt; whereby two parties deposit
all the funds required for the contract (full collateral).&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;/// Wraps a generic option opt with functionality to refund both parties on timeout.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExpiringOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;'static&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;party_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;party_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key_p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key_p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key_p2_pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyAbsTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExpiringOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GenericBet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TryFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;'static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strikes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;non&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExpiringOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Party Two is the option holder&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;signed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key_p2_pk&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then we’ll implement the functions:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expires&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExpiringOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GenericBet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TryFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sapio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// return the money to each party&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.party_one&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key_p1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.party_two&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key_p2&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.set_lock_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Only party 2 can strike!&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then(guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::signed]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;strikes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sapio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Send the money to a generic bet...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.party_one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.party_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;GenericBet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;try_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.opt&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we’ll implement similar logic, but where the amount from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;party_two&lt;/code&gt;
is not paid until the strike is called:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// Similar to `ExpiringOption` except that the option requires an additional&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// value amount to be paid in in order to execute, hence being &quot;under funded&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnderFundedExpiringOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;'static&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;party_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;party_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key_p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyAbsTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnderFundedExpiringOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GenericBet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TryFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;'static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strikes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;non&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;



&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expires&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnderFundedExpiringOption&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GenericBet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TryFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sapio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.party_one&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key_p1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.set_lock_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;#[then]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;strikes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sapio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.party_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.party_one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.party_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;GenericBet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;try_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.opt&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nft-exercises-for-the-reader&quot;&gt;NFT Exercises for the reader:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Question: Why isn’t  a normal NFT Sale contract an Option?&lt;/li&gt;
  &lt;li&gt;Answer: Because it doesn’t guarantee the uniqueness of the right to purchase&lt;/li&gt;
  &lt;li&gt;Question: How can we implement NFT Options?&lt;/li&gt;
  &lt;li&gt;Answer: The NFT Option has to be the &lt;em&gt;only&lt;/em&gt; owner of the NFT. Without writing any new contracts… generate the code to transfer the NFT to a 2-2 multisig between option holder and seller, and pre-sign a timelocked transfer back to the original owner plus a non-timelocked sale to the purchaser for a price. With new contracts? Do the same thing, but without having to stitch it together.&lt;/li&gt;
  &lt;li&gt;Question: Can you do call options? What about put options?&lt;/li&gt;
  &lt;li&gt;Answer: Sure! For a call option have the contract have the NFT in it. For a
put option, require that the NFT be put in and the funds present, and pre-sign
the transfer. The tricky thing is that if you wish to ‘move’ your NFT while you
have a put option open, you must get your counterparty to agree to the new UTXO
representing the NFT. But they can validate this client side and sign automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;does-this-need-ctv&quot;&gt;Does this NEED CTV?&lt;/h1&gt;

&lt;p&gt;No, not in particular. Most of this stuff could be done with online signer server federation between you and counterparty. CTV makes some stuff nicer though, and opens up new possibilities for opening these contracts unilaterally.&lt;/p&gt;

&lt;h1 id=&quot;representing-positions-as-nfts&quot;&gt;Representing Positions as NFTs&lt;/h1&gt;

&lt;p&gt;Offers to open up a contract could be represented as NFTs! You don’t even need
to create the NFT, just bind the NFT interface with an option open as a generic
minting parameter, and then you can do price discovery of Option contracts through a dutch auction you thought was just for selling cat pics.&lt;/p&gt;

&lt;h1 id=&quot;wen-ln&quot;&gt;Wen LN?&lt;/h1&gt;

&lt;p&gt;Well, if you note that we can coop close options and derivatives, and that I
claimed we don’t need CTV, these two facts imply that you can put these kinds of
contracts inside of the LN no problem :).&lt;/p&gt;

&lt;h1 id=&quot;what-about-powswap&quot;&gt;What About PowSwap?&lt;/h1&gt;

&lt;p&gt;I mentioned &lt;a href=&quot;https://powswap.com&quot;&gt;powswap.com&lt;/a&gt; earlier. But you’ll have to wait
to read about it, that’s all for today!&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:shill&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I don’t actually have any paid shills, contrary to some people’s beliefs. &lt;a href=&quot;#fnref:shill&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>NFTs Part Two: Auctions, Royalties, Mints, Generative, Game Items</title>
   <link href="/bitcoin/2021/12/19/advent-22/"/>
   <updated>2021-12-19T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/19/advent-22</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 22 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I promised you a few things a few days ago:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We’d see how to do royalties in a sale&lt;/li&gt;
  &lt;li&gt;We’d see how to do a Dutch auction&lt;/li&gt;
  &lt;li&gt;We’d see how to do batch mints&lt;/li&gt;
  &lt;li&gt;We’d see how to make generative art&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;and one thing I didn’t&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In game items&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’d get it done, son.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;royalties-and-dutch-auction&quot;&gt;Royalties and Dutch Auction:&lt;/h2&gt;

&lt;p&gt;A Dutch Auction is a theoretically beautiful form on an auction that is great for sellers.&lt;/p&gt;

&lt;p&gt;The way it works is that if you want to sell a piece, you start selling it at
price that you think no one could buy it for, and then slowly lower the price.&lt;/p&gt;

&lt;p&gt;For example, suppose I have a car that the blue book value is $10,000 for.  I
start by offerring it at $15,000k, and then drop it by $10 per second until
someone buys it. After about 10 minutes, the price will be $9,000, so a pretty
good deal. But before that, the price will be all prices between $9k and $15k.
So if a buyer thinks the car is actually a pretty good deal at $11k, and a great
deal at $10.5k, they would want to bid (assuming lots of bidders) at $11k lest
someone else buy it first.&lt;/p&gt;

&lt;p&gt;Thus Dutch Auctions are very favorable to sellers, so natually, sellers like them.&lt;/p&gt;

&lt;p&gt;Let’s patch our &lt;a href=&quot;/bitcoin/2021/12/16/advent-19/&quot;&gt;earlier NFT System&lt;/a&gt; to support
Dutch Auctions! While we’re at it let’s toss in royalties too!&lt;/p&gt;

&lt;p&gt;First, we need to clean up a couple things about our NFT Definitions. These are
sorta trivial changes – really if I had planned better I’d have included them
from the get-go.&lt;/p&gt;

&lt;p&gt;To our Minting trait we’re going to add a few fields:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A key for the creator&lt;/li&gt;
  &lt;li&gt;A ‘royalty’ percent (0 to disable)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// # Trait for a Mintable NFT&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Creator Key&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Initial Owner&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The key that will own this NFT&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Locator&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// A piece of information that will instruct us where the NFT can be&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// downloaded -- e.g. an IPFs Hash&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Minting Module&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// If a specific sub-module is to be used / known -- when in doubt, should&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// be None.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minting_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SapioHostAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// how much royalty, should be paid, as a percent&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;royalty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we’re going to add to our Sale trait a start time (e.g. blockheight).&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// # NFT Sale Trait&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// A trait for coordinating a sale of an NFT&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Owner&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The key that will own this NFT&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sell_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Price&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The price in Sats&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountU64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # NFT&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The NFT's Current Info&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Sale Time&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// When the sale should be possible after&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sale_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbsHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Extra Information&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Extra information required by this contract, if any.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Must be Optional for consumer or typechecking will fail.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Usually None unless you know better!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These fields could have gone into the extra data, but since it was probably a
mistake to not have them from the get-go we’ll allow it this time without increasing
our version numbers (nothings been released yet!).&lt;/p&gt;

&lt;p&gt;Next, we’ll go ahead and create a new plugin module for our Dutch auction.&lt;/p&gt;

&lt;p&gt;First we define some data that we have to have for a Dutch auction:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// # Dutch Auction Data&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Additional information required to initiate a dutch auction&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DutchAuctionData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// How often should we decreate the price, in blocks&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// what price should we start at?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountU64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// what price should we stop at?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;min_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountU64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// how many price decreases should we do?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we define how to translate that into a schedule of sale prices:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DutchAuctionData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Create a Schedule for Sale&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// computes, based on a start time, the list of heights and prices&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;start_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbsHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AbsHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountU64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.start_price&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.min_price&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_height&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.start_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.updates&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.period&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sched&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;AbsHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;try_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally, we want to be able to derive this data with some default choices
in case a user wants to not select specific parameters. Hope you liked what we pick!&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c&quot;&gt;/// derives a default auction where the price drops every 6&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// blocks (1 time per hour), from 10x to 1x the sale price specified,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// spanning a month of blocks.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;derive_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DutchAuctionData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// every 6 blocks&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;start_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;min_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// 144 blocks/day&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;144&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the parameters for a Dutch Auction out of the way, now we can implement the
contract logic. First, the boring stuff:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFTDutchAuction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// This data can be specified directly, or default derived from main&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DutchAuctionData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The main trait data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// # Versions Trait Wrapper&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Use the Actual Trait API&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Directly Specify the Data&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Exact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DutchAuctionData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFTDutchAuction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_coerce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TryFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFTDutchAuction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;try_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NFTDutchAuction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// attempt to get the data from the JSON:&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// - if extra data, must deserialize&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;//   - return any errors?&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// - if no extra data, derive.&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;
                    &lt;span class=&quot;py&quot;&gt;.extra&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.map_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.unwrap_or_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(||&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;DutchAuctionData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;derive_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;NFTDutchAuction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Exact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.start_price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.min_price&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.period&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.updates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// Nonsense&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;NFTDutchAuction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;REGISTER!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NFTDutchAuction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;logo.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, the fun part! Implementing it. This is basically the same as our NFTs from
the other day, but we just do sales along the schedule we generated:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFTDutchAuction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # signed&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// sales must be signed by the current owner&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;signed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.main.data.owner&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # transfer&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// transfer exchanges the NFT for cold hard Bitcoinz&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[continuation(guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::signed]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;web_api,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;coerce_args&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;default_coerce&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.extra&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.create_schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.main.sale_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// the main difference is we iterate over the schedule here&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.derive_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nth&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// first, let's get the module that should be used to 're-mint' this NFT&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// to the new owner&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
                &lt;span class=&quot;py&quot;&gt;.main&lt;/span&gt;
                &lt;span class=&quot;py&quot;&gt;.data&lt;/span&gt;
                &lt;span class=&quot;py&quot;&gt;.minting_module&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.ok_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// let's make a copy of the old nft metadata..&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mint_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.main.data&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// and change the owner to the buyer&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mint_data&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.owner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.main.sell_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// let's now compile a new 'mint' of the NFT&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_nft_contract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateArgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContextualArguments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;effects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_effects_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mint_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mint_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_contract_by_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.map_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.ok_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// Now for the magic:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// This is a transaction that creates at output 0 the new nft for the&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// person, and must add another input that pays sufficiently to pay the&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// prior owner an amount.&lt;/span&gt;

            &lt;span class=&quot;c&quot;&gt;// todo: we also could use cut-through here once implemented&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// todo: change seem problematic here? with a bit of work, we could handle it&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// cleanly if the buyer identifys an output they are spending before requesting&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// a purchase.&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_nft_contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.add_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.add_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// Pay Sale to Seller&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_btc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_btc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.main.data.royalty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.main.data.owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// Pay Royalty to Creator&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_btc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_btc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.main.data.royalty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.main.data.creator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// only active at the set time&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.set_lock_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sched&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What’s interesting is that this contract is technically just a helper on-top of
our earlier Sale definition. Granted, we really ought to have had the royalty
and timelock before, but we could emulate a dutch auction by just calling the
regular Sale contract n times with different locktimes and prices. So we didn’t
really have to implement a standalone system for this. However, for more
advanced or bespoke things (like sales that also mint an NFT comemorating the
Sale itself) we’d want a bespoke module. Plus, the module makes it simple to
ensure that the type of auction and rate of change in price is well understood.&lt;/p&gt;

&lt;p&gt;If desired, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DutchAuctionData&lt;/code&gt; could also have different sorts of logic for
different price curves (e.g. Geometric, Linear, S-Curve, Custom).&lt;/p&gt;

&lt;p&gt;Fun!&lt;/p&gt;

&lt;h3 id=&quot;abstract-client-verifier-auction&quot;&gt;Abstract Client Verifier Auction&lt;/h3&gt;

&lt;p&gt;After an auction closes, in order for them to be able to prove to a future party
it was made correctly, they would need to run the identical Sapio code and
generate all possible execution price transactions.&lt;/p&gt;

&lt;p&gt;This is not just computationally annoying, it’s also not very “lightweight”.
And it can lead to bugs like some bozo writing a contract which does not
do what it says it does (and pays no royalties).&lt;/p&gt;

&lt;p&gt;An Abstract Client Verifier Auction could be set up as a postcondition on the 
transactions generated by a Sale that they all be able to be re-generated by a 
specialized template builder that just checks basic properties like “was a
royalty paid”.&lt;/p&gt;

&lt;p&gt;We won’t go into detail on this here, but you could imagine patching &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sell&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// # Sell Instructions&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Hold&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Don't transfer this NFT&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Hold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # MakeSale&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Transfer this NFT&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MakeSale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;/// # Which Sale Contract to use?&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;/// Specify a hash/name for a contract to generate the sale with.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;which_sale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SapioHostAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;/// # The information needed to create the sale&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sale_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VerifySale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the NFT can verify that the Sale transaction was valid according to it’s
choice of rule (or maybe even an artist selected Verifier module).&lt;/p&gt;

&lt;p&gt;This might not be a huge deal / worth doing given that the Cross-Module-Call
results for client-side validation are cacheable.&lt;/p&gt;

&lt;h2 id=&quot;batch-mints&quot;&gt;Batch Mints&lt;/h2&gt;

&lt;p&gt;Batch mints are important because they allow an artist to fairly and easily
distribute their art. It’s really important for batch mints that the artist be
able to disseminate a single Output + Contract info and sign it per collection.
Even if the artist/their server has to be online to sell the work, users
should be able to unambiguously see who got which art.&lt;/p&gt;

&lt;p&gt;Conceptually speaking – no code for now – Batch Mints can be done several
ways. It really depends what the artist wants:&lt;/p&gt;

&lt;h3 id=&quot;single-transaction&quot;&gt;Single Transaction&lt;/h3&gt;
&lt;p&gt;Do a single transaction whereby every minted NFT has an output.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simple!&lt;/li&gt;
  &lt;li&gt;Big all at once cost bourne by artist&lt;/li&gt;
  &lt;li&gt;No enforced “minting order”&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;annuity-of-nfts&quot;&gt;Annuity of NFTs&lt;/h3&gt;

&lt;p&gt;Embed the mint contract into an Annuity where the successful auction of the ith NFT starts
the auction of the ith+1.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cheaper for the artist&lt;/li&gt;
  &lt;li&gt;Requires the server be online&lt;/li&gt;
  &lt;li&gt;Serial issuance piece i+1 can’t be bought till i is (buyers may clear i to get to i+1)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;congestion-control-tree-of-nfts&quot;&gt;Congestion Control Tree of NFTs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Cheaper for the artist&lt;/li&gt;
  &lt;li&gt;Auctions can proceed independently for every piece&lt;/li&gt;
  &lt;li&gt;Server is required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;generative-art&quot;&gt;Generative Art:&lt;/h2&gt;

&lt;p&gt;This concept is actually… pretty simple!&lt;/p&gt;

&lt;p&gt;If you want to automatic generative art, essentially all you need to do is give
your NFT Contract (or your NFT Minting contract) some piece of state and a
function to convert the metadata description of the NFT + a pointer to the
transaction’s location and then you can generate a random seed for generating
that piece via your generate_art function.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyNFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyNFT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate_art&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlockHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/*
            Make your artz here
        */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can be fun for things like creating the entropy for input to e.g. a machine
learning model.&lt;/p&gt;

&lt;h2 id=&quot;bonus-updatable-nfts&quot;&gt;Bonus: Updatable NFTs&lt;/h2&gt;

&lt;p&gt;Imagine you have a rare sword NFT for a videogame.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sharpness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kills&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Every 10 kills you -1 sharpness, and every time you sharpen it you get +100 sharpness.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[continuation&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::signed]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sharpen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/*
            Pay 1000 sats to the game dev  per time sharpened
        */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[continuation&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::signed]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register_kills&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/*
            update the metadata with a commitment to v
        */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These state transitions would be verified by anyone playing the game with you, using Bitcoin as the Database.&lt;/p&gt;

&lt;h4 id=&quot;bbbbbuttt-on-chain-load&quot;&gt;bbbbbuttt on-chain load&lt;/h4&gt;

&lt;p&gt;Not to sweat – simply build in to the continuation logic the ability to load in
an attestation chain (&lt;a href=&quot;/bitcoin/2021/12/17/advent-20/&quot;&gt;remember those?&lt;/a&gt;) of
lightning invoices of you paying the game developer over LN.&lt;/p&gt;

&lt;p&gt;The attestation chain means that cheating would be duly punishable by loss of
bonds. You can also log things like ‘kills’ by publishing your game record through
the attestation chain with a signature from the other player you killed.&lt;/p&gt;

&lt;p&gt;Any time you move or sell your NFT you can checkpoint into the metadata a copy
of the attestation chain “sealing” those actions.  One tweak we can make to the
attestation chains is to require a regular “heartbeat” attestation from players
as well as a freeze attestation.  This helps ensure that players buying an NFT
that they have all the latest state of the item loaded and other players can
check that there’s nothing missing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;galaxy brain: what if you bake into your NFT an attestation chain spec and the
thing you lose for lying is the item itself? And then you can do a special
HTLC-like contract whereby you have to prove you didn’t cheat for 2 weeks before
getting the payment from your counterparty, else they get a refund.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Overall I hope this post has opened your mind up wildly about the possibilities with Bitcoin NFTs…&lt;/p&gt;

&lt;p&gt;I apologize I didn’t have more code ready and the post is late, but writing these posts is hard and
I’ve been focusing on the end of the series too :)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Packaging Sapio Applications</title>
   <link href="/bitcoin/2021/12/18/advent-21/"/>
   <updated>2021-12-18T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/18/advent-21</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 21 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today’s a bit of a cheat day for me – not really “new” content, but mostly
stuff re-packaged&lt;sup id=&quot;fnref:pun&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:pun&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; from &lt;a href=&quot;https://learn.sapio-lang.org&quot;&gt;learn.sapio-lang.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But it belongs in the series, and is it really plagarism if I wrote it myself?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So you’ve written a Sapio contract and you’re ready to get it out into the
world.&lt;/p&gt;

&lt;p&gt;How should you release it? How should you use it?&lt;/p&gt;

&lt;p&gt;Today’s post covers various ways to deploy and use Sapio contracts.&lt;/p&gt;

&lt;h4 id=&quot;note-on-open-sourcing&quot;&gt;Note on Open Sourcing:&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;In general, it is important to make the code available in an open source way,
so others can integrate and use your contracts. Rust’s &lt;a href=&quot;https://crates.io&quot;&gt;crates&lt;/a&gt;
system provides a natural place to publish for the time being, although
in the future we may build a Sapio specific package manager as smart contracts
have some unique differences.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;packaging-contracts-via-wasm&quot;&gt;Packaging Contracts via WASM&lt;/h1&gt;

&lt;p&gt;WASM is “WebAssembly”, or a standard for producing bytecode objects that can
be run on any platform. As the name suggests, it was originally designed for
use in web browsers as a compiler target for any language to produce code to
run safely from untrusted sources.&lt;/p&gt;

&lt;p&gt;So what’s it doing in Sapio?&lt;/p&gt;

&lt;p&gt;WASM is designed to be cross platform and deterministic, which makes it a great
target for smart contracts that we want to be able to be reproduced locally. The
determinism also enables our update system. It also makes it &lt;em&gt;relatively&lt;/em&gt; safe
to run smart contracts provided by untrusted parties as the security of the WASM
sandbox prevents bad code from harming or infecting our system.&lt;/p&gt;

&lt;p&gt;Sapio Contract objects can be built into  WASM binaries very easily. The code required is basically:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// MyContract must support Deserialize and JsonSchema&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*...*&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// binds to the plugin interface -- only one REGISTER macro permitted per project&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;REGISTER!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/sapio-lang/sapio/tree/master/plugin-example&quot;&gt;the example&lt;/a&gt; for more details.
The best way to make a new plugin is just to copy that directory and update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cargo.toml&lt;/code&gt; with a new name.&lt;/p&gt;

&lt;p&gt;These compiled objects require a special environment to be interacted with.
That environment is provided by the Sapio CLI as a standalone binary. It is also
possible to use the interface provided by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sapio-wasm-plugin&lt;/code&gt; crate to load
a plugin from any rust codebase programmatically. Lastly, one could create
similar bindings for another platform as long as a WASM interpreter is
available.&lt;/p&gt;

&lt;h2 id=&quot;cross-module-calls-cmc&quot;&gt;Cross Module Calls (CMC)&lt;/h2&gt;

&lt;p&gt;The WASM Plugin Handle architecture permits one WASM plugin to call into
another. This is incredibly powerful. What this enables one to do is to
package Sapio contracts that are generic and can call one another either by
hash (with effective subresource integrity) or by a nickname (providing easy
user customizability).&lt;/p&gt;

&lt;p&gt;For example, suppose I was writing a standard contract component &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; which I
publish. Then later, I develop a contract &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; which is designed to work with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;. Rather than having to depend on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;’s source code (which I may not want to
do for various reasons – for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; could be a standard), I could simply
hard code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;’s hash into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; and call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_contract_by_key(key: &amp;amp;[u8; 32],
args: Value, amt: Amount)&lt;/code&gt; to get the desired code. The plugin management system
automatically searches for a contract plugin with that hash, and tries to call
it with the provided JSON arguments. Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_contract(key:&amp;amp;str,
args:Value: amt:Amount)&lt;/code&gt;, a nickname can be provided in which case the
appropriate plugin is resolved by the environment. Lastly, it’s possible to use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lookup_this_module_name()&lt;/code&gt; to resolve the currently executing modules hash for
recursive calls. Recursive CMC calls can be helpful when you want to either
make a contract generic, or you want a clean JSON argument interface between 
units. It’s also possible for a contract to detect if a generic argument 
would result in a recursive CMC and cut-through it locally.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEPENDS_ON_MODULE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;users_cold_storage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_contract_by_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEPENDS_ON_MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_contract_by_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lookup_this_module_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;typed-calls&quot;&gt;Typed Calls&lt;/h3&gt;
&lt;p&gt;Using JSONSchemas, plugins have a basic type system that enables run-time
 checking for compatibility. Plugins can guarantee they implement particular
 interfaces faithfully. These interfaces currently only support protecting the
 call, but make no assurances about the returned value or potential errors from
 the callee’s implementation of the trait.&lt;/p&gt;

&lt;p&gt;For example, suppose I want to be able to specify a provided module must
statisfy a calling convention for batching. I define the trait
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BatchingTraitVersion0_1_1&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// A payment to a specific address&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Payment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The amount to send in sats&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountU64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Address&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The Address to send to&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feerate_per_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountU64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I can then turn this into a SapioJSONTrait by implementing the trait and
providing an “example” function.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SapioJSONTrait&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// required to implement&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_example_for_api_checking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;#[derive(Serialize)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;feerate_per_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/// optionally, this method may be overridden directly for more advanced type checking.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_trait_implemented&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SapioAPIHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;check_trait_implemented_inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.is_ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If a contract module can receive the example, then it is considered to have
implemented the API. We can implement the receivers for a module as follows:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// # Different Calling Conventions to create a Treepay&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Base&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MockContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Batching Trait API&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockContract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MockContract&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreePay&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreePay&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;REGISTER!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MockContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;logo.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MockContract&lt;/code&gt; can be called via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BatchingTraitVersion0_1_1&lt;/code&gt; trait
interface.&lt;/p&gt;

&lt;p&gt;Another module in the future need only have a field
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SapioHostAPI&amp;lt;BatchingTraitVersion0_1_1&amp;gt;&lt;/code&gt;. This type verifies at deserialize
time that the provided name or hash key implements the required interface(s).&lt;/p&gt;

&lt;h3 id=&quot;future-work-on-cross-module-calls&quot;&gt;Future Work on Cross Module Calls&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Gitian Packaging:&lt;/strong&gt; Using a gitian signed packaging distribution system
would enable a user to set up a web-of-trust setting for their sapio compiler
and enable fetching of sub-resources by hash if they’ve been signed by the
appropriate parties.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NameSpace Registration:&lt;/strong&gt; A system to allow people to register names
unambiguously would aid in ensuring no conflicts. For now, we can handle
this using a centralized repo.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Remote CMC:&lt;/strong&gt; In some cases, we may want to make a call to a remote
server that will call a given module for us. This might be desirable if the
server holds sensitive material that we shouldn’t have.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Polymorphic CMC:&lt;/strong&gt; currently, CMC’s only return the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compiled&lt;/code&gt; type. Perhaps
future &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMC&lt;/code&gt; support can return arbitrary types, allowing other types of
functionality to be packaged. For example, it would be great if a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guard&lt;/code&gt; clause
could be generated just from a separate WASM module.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-if-i-dont-want-wasm&quot;&gt;What if I don’t &lt;em&gt;want&lt;/em&gt; WASM?&lt;/h1&gt;

&lt;p&gt;Well, ngmi. JK. Kinda.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;do&lt;/em&gt; really want WASM. You very much want your contracts to be
deterministically compiled.  If they are not, then a lot of things are not
guaranteed to work correctly and you might lose funds.&lt;/p&gt;

&lt;p&gt;We’re very focused on run-in WASM and not focused on other things.&lt;/p&gt;

&lt;p&gt;That said, Sapio is just a Rust library, so you can embed your contracts
into an application directly, e.g., for an embedded signing device.&lt;/p&gt;

&lt;p&gt;If you do this it is paramount that you carefully audit and check that you are
able to get consistent deterministic results out, or that you do not need to be
able to deterministically recompile (this is true in many cases!) and can save
the compilation result.&lt;/p&gt;

&lt;p&gt;Another technique you can use is to build a bigger application around a contract
and then compile &lt;em&gt;that&lt;/em&gt; to a WASM blob. Also works fine if you’re careful not
to accidentally add some entropy.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;That’s all folks. In sum: Sapio is using WASM, you can choose to not use it at
your own peril.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:pun&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;pun certainly intended. &lt;a href=&quot;#fnref:pun&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Oracles, Bonds, and Attestation Chains</title>
   <link href="/bitcoin/2021/12/17/advent-20/"/>
   <updated>2021-12-17T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/17/advent-20</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 20 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today’s post is going to be a bit lighter weight than yesterday’s. We’ll cover
some high level concepts around oracles and then look at some Sapio.&lt;/p&gt;

&lt;p&gt;The genesis of this line of inquiry was a conversation with Robin Linus that led to
a pretty cool &lt;a href=&quot;https://coins.github.io/stakechains.pdf&quot;&gt;whitepaper&lt;/a&gt;, so definitely
read that if you find this post compelling.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;oracles&quot;&gt;Oracles&lt;/h1&gt;

&lt;p&gt;Oracles are cool! The most basic form of an useful bitcoin oracle is just a
signing key that signs transactions or reveals information that it “should”
according to some rule.&lt;/p&gt;

&lt;p&gt;Protocols for oracles like discrete log contract oracles produce more generic
“key material reveals”, that are more similar to releasing information that
allows counterparties to decrypt the relevant signature.&lt;/p&gt;

&lt;p&gt;One of the problems with oracles is that they can equivocate, that is, sign
multiple conflicting statements.  It would be nice if we could esnure that they
would be consistent, no?&lt;/p&gt;

&lt;h1 id=&quot;bonded-oracles&quot;&gt;Bonded Oracles&lt;/h1&gt;

&lt;p&gt;In order to make the oracles consistent, what we can do is set up our oracles
such that if the oracle ever signs two statements they reveal their private key
to the world. The common way that this is done is via &lt;em&gt;nonce reuse&lt;/em&gt;, which is
essentially a way that you can extract a private key from a signature on
messages m1 and m2 using the same nonce r1.&lt;/p&gt;

&lt;p&gt;While revealing a key might be punishment enough, we can do one better. We can
require that if a nonce is leaked, meaning some statement was equivocated, then
a some bitcoin protected by that key can be ‘stolen’ by anyone.&lt;/p&gt;

&lt;p&gt;But this form is a little problematic, for a few reasons. Reason one is that the
oracle could cancel their bond and take it back while there are still contracts
settling with their data that they then equivocate on.&lt;/p&gt;

&lt;p&gt;The other issue is that the funds in the punishment could be claimed by anyone,
including a miner or the oracle themselves, and especially if oracles are also miners!&lt;/p&gt;

&lt;p&gt;To fix the first issue, we need to lock up the fund for e.g. 2 weeks and only
use the oracle for the first week to permit 1 week gap in closing. This creates a 
new issue that bonds are always expiring, but maybe that’s OK.&lt;/p&gt;

&lt;p&gt;To fix the second issue, we need a way of restricting where the funds go to definitely
be out of reach of any bad guys, e.g. burned.&lt;/p&gt;

&lt;h2 id=&quot;ctv-fixes-this&quot;&gt;CTV Fixes This.&lt;/h2&gt;

&lt;p&gt;If you had checktemplateverify, you could stipulate that a
bonded oracle must initiate a bond redemption on chain, at which point anyone
can challenge it if they know the key and they are guaranteed sufficient time
to post a challenge.&lt;/p&gt;

&lt;p&gt;The second fix is that CTV can stipulate that the funds &lt;em&gt;must&lt;/em&gt; be burned by
sending to an OP_RETURN, not released to miners (which would be problematic if a
miner was also an oracle).&lt;/p&gt;

&lt;p&gt;Now our oracle is ready to sign all sorts of stuff, and we can make sure that
for a given Nonce we never sign two conflicting statements.&lt;/p&gt;

&lt;h1 id=&quot;dlcs&quot;&gt;DLCs?&lt;/h1&gt;

&lt;p&gt;We can now use this type of oracle for a DLC protocol. We just create the contract
and then we sign+reveal using our staking key whatever messages are required. Any cheating,
and anyone who detects it can burn our money.&lt;/p&gt;

&lt;h1 id=&quot;attestation-chains&quot;&gt;Attestation Chains&lt;/h1&gt;

&lt;p&gt;One of the other cools things we can do with our Bonded oracle is to sign a chain of
attestations.&lt;/p&gt;

&lt;p&gt;For example, we could sign message 1, and then sign message 2, and then sign message 3.&lt;/p&gt;

&lt;p&gt;We can turn this into a “blockchain” of sorts if when we sign m2 we include a
hash of m1, and when we sign m3 we include a hash of m3.&lt;/p&gt;

&lt;p&gt;But we can go a step further. If we’re careful, we can set it up so that
‘branching’ on any message in the chain (by equivocating/producing a conflicting
statement) leaks the key of the bonded oracle with a trick I (think?) I came up
with. Here’s roughly how it works:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;message 1: INIT with PK K, nonce R1 for m2, 1 BTC at risk in output X
message 2: SIGN with K, R1 H(m1), nonce R2 for m3
message 3: SIGN with K, R2 H(m1), nonce R3 for m4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the oracle were to ever branch, it would look like this:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;message 1: INIT with PK K, nonce R1, 1 BTC at risk in output X
message 2: SIGN with K, R1 H(m1), nonce R2
message 3: SIGN with K, R2 H(m2), nonce R3
message 3': SIGN with K, R2 H(m3), nonce R3'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The leak would be able to extract K’s secret key via the reuse of R2.&lt;/p&gt;

&lt;p&gt;While it might seem that you could ‘get away with it’, because we verify at each
step that the last used nonce was from the prior step it cannot be forged. The
commitment to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H(mi)&lt;/code&gt; also makes it more difficult for an invalid signature to
float around since from just the top you can know what all the other states
should be.&lt;/p&gt;

&lt;h2 id=&quot;proof-of-stake&quot;&gt;Proof of Stake?&lt;/h2&gt;

&lt;p&gt;Essentially we’ve built a system for proof-of-stake on Bitcoin. Imagine you have
100BTC locked up in these contracts across 127 instances, and you want to run
some system based on it.&lt;/p&gt;

&lt;p&gt;You can just download the message signed at state Mn and see what the majority
of signers voted for that slot.&lt;/p&gt;

&lt;p&gt;Any signer who cheats gets their funds burned, and you’d learn to exclude them
from consensus.&lt;/p&gt;

&lt;p&gt;If you do need to have a ‘rollback’, you can do it by engineering your protocol
to allow new updates to the chain of signatures to produce a rollback.&lt;/p&gt;

&lt;h3 id=&quot;partial-slashing&quot;&gt;Partial Slashing&lt;/h3&gt;
&lt;p&gt;You can even implement partial slashing. Suppose you have 10 coins in a contract under
key K1. If a cheat is detected, it authorizes a txn which burns 2 and puts the
remaining 8 into key K2. The next round of slashing could put 6.4 under K3.&lt;/p&gt;

&lt;h1 id=&quot;alternatives-to-burning&quot;&gt;Alternatives to Burning&lt;/h1&gt;

&lt;p&gt;Burning sats is sad. What if instead of a burn, coins went into an annuity that
would be claimable 100 years from now? That way, no economic agents around today
can plan to cheat and capture the value of it, but the burned coins can serve a
real function. While this is slightly less secure than a full burn, it’s also
more secure since it creates an incentive to continue to build the chain.&lt;/p&gt;

&lt;p&gt;Or donate to a well known chairty address/developer fund :p&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;implementing-a-staked-signer&quot;&gt;Implementing a Staked Signer&lt;/h1&gt;

&lt;p&gt;To begin, we’ll define some ‘type tags’. This is a technique in rust where we
define empty structs that let us build a little state machine in the type
system. You can read more on the technique
&lt;a href=&quot;https://learn.sapio-lang.org/ch08-01-state-machines.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// # Operational State&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// State where stakes should be recognized for voting&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Operational&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// # Closing State&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// State where stakes are closing and waiting evidence of misbehavior&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Closing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// # Staking States (Operational, Closing)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// enum trait for states&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StakingState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StakingState&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Operational&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StakingState&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Closing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we’ll define an interface that an implementation of a Staked Signer should
implement:&lt;/p&gt;

&lt;p&gt;By default something that is declared is given a default not-present implementation.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// Functional Interface for Staking Contracts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StakerInterface&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;decl_guard!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;/// The key used to sign messages&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;staking_key&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;decl_guard!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;/// the clause to begin a close process&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;begin_redeem_key&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;decl_guard!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;/// the clause to finish a close process&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;finish_redeem_key&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;decl_then!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;/// The transition from Operational to Closing&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;begin_redeem&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/// Why would anyone ever cheat!!&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then(guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::staking_key]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cheated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sapio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// commit to metadata here for convenience, but really could be anywhere!&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// exercise for reader: what if we plugged in another instance of StakerInterface&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// that:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// 1. switches to a new, unburned key&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// 2. pays 80% to the new StakerInterface&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// 3. pays 20% to an annuity that pays miners over e.g. 1000 blocks&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;//    at some point in the far future.&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_op_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.data&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// We can delcare the Contract impl for all valid Staker&amp;lt;T&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;'static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StakingState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Staker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Staker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StakerInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StakingState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin_redeem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cheated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finish_redeem_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;non&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we’ll define the data required for our staker:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// # Staker: A Bonded Signing Contract&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Staker is a contract that proceeds from Operational -&amp;gt; Closing&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// During it's lifetime, many things can be signed with signing_key,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// but should the key ever leak (e.g., via nonce reuse) the bonded&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// funds can be burned.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Burning is important v.s. miner fee because otherwise the staker&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// can bribe (or be a miner themselves) to cheat.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Staker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StakingState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Timeout&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// How long to wait for evidence after closing&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyRelTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Signing Key&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The key that if leaked can burn funds&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signing_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Redemption Key&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The key that will be used to control &amp;amp; return the redeemed funds&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redeeming_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Data&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Arbitrary hash of metadata that is needed to start the attestation chain&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// current contract state.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[serde(skip,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;default)]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhantomData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we’ll define the StakerInterface when our channel is operational. At this phase,
funds can either be burnt or the redeeming key can start the process of withdrawing.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StakerInterface&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Staker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operational&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// redeeming key&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;begin_redeem_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.redeeming_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// begin redemption process&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then(guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::begin_redeem_key]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;begin_redeem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sapio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Staker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Closing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;signing_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.signing_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;redeeming_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.redeeming_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// staking key&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;staking_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.signing_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, for closing we should not be able to “loop” back into Closing or
Operational, so we do not implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;begin_redeem&lt;/code&gt; logic.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StakerInterface&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Staker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Closing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;finish_redeem_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.redeeming_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.timeout&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;staking_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.signing_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;attestation-chain&quot;&gt;Attestation Chain&lt;/h2&gt;

&lt;p&gt;In order to start the attestation chain, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; field should be the hash of something like:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AttestationStart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Nonce&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// a nonce element&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first_nonce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Key&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// the key to sign with (for convenience, should match the StakedSigner's&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// staking key)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Purpose&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// useful to have some sort of description (machine readable) of what this attestor&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// is signing for&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;purpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To start using the attestation chain, we build a linked list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Attest&lt;/code&gt;
signatures as described below:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Attest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Signature&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// the signature over the below data fields&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Message&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// whatever info the protocol expects to be signed&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Nonce&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// a nonce element&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;next_nonce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Height&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// what # signature is this&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Previous Attestation&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// the last attestation. we either keep a hash or the actual value&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Attest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AttestationStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It would be possible – but perhaps overkill – to instead encode this structure
as a Sapio contract with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;continuation&lt;/code&gt; branches. I’ll leave that as an exercise
for the reader for now!&lt;/p&gt;

&lt;h1 id=&quot;galaxy-brain-time&quot;&gt;Galaxy Brain Time&lt;/h1&gt;

&lt;p&gt;What if we used this staked signer to coordinate a decentralized mining pool
where the stakers sign off on work shares they have seen…&lt;/p&gt;

&lt;h1 id=&quot;thats-all-folks&quot;&gt;That’s All Folks!&lt;/h1&gt;
</content>
 </entry>
 
 <entry>
   <title>Part One: Implementing NFTs in Sapio</title>
   <link href="/bitcoin/2021/12/16/advent-19/"/>
   <updated>2021-12-16T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/16/advent-19</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 19 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For today’s post we’re going to build out some Sapio NFT protocols that are
client-side verifiable. Today we’ll focus on code, tomorrow we’ll do more
discussion and showing how they work. I was sick last night (minor burrito
oriented food poisoning suspected) and so I got behind, hence this post being up
late.&lt;/p&gt;

&lt;p&gt;As usual, the disclaimer that as I’ve been behind… so we’re less focused today
on correctness and more focused on giving you the shape of the idea. In other
words, I’m almost positive it won’t work properly, but it &lt;em&gt;can&lt;/em&gt; compile! And the
general flow looks correct.&lt;/p&gt;

&lt;p&gt;There’s also a couple new concepts I want to adopt as I’ve been working on this,
so those are things that will have to happen as I refine this idea to be
production grade.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Before we start, let’s get an eagle-eye view of the ‘system’ we’re going to be
building, because it represents multiple modules and logical components.&lt;/p&gt;

&lt;p&gt;By the end, we’ll have 5 separate things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An Abstract NFT Interface&lt;/li&gt;
  &lt;li&gt;An Abstract Sellable Interface&lt;/li&gt;
  &lt;li&gt;An Abstract Sale Interface&lt;/li&gt;
  &lt;li&gt;A Concrete Sellable NFT (Simple NFT)&lt;/li&gt;
  &lt;li&gt;A Concrete Sale Interface (Simple NFT Sale)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/nft-diagram.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In words:&lt;/p&gt;

&lt;p&gt;Simple NFT implements both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NFT&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sellable&lt;/code&gt;, and has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sell&lt;/code&gt; function that
can be called with any Sale module.&lt;/p&gt;

&lt;p&gt;Simple NFT Sale implements &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sale&lt;/code&gt;, and can be used with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sell&lt;/code&gt; of anything
that implements &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sellable&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NFT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can make other implementations of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sale&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NFT&lt;/code&gt; and they should be
compatible.&lt;/p&gt;

&lt;h2 id=&quot;hows-it-going-to-work&quot;&gt;How’s it going to ‘work’?&lt;/h2&gt;

&lt;p&gt;Essentially how this is going to work do is&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An artist mint an NFT.&lt;/li&gt;
  &lt;li&gt;The artist can sell it to anyone whose bids the artist accepts&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Normally, in Ethereum NFTs, you could do something for step 2:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The artist signs “anyone can buy at this price”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;with Bitcoin NFTs, it’s a little different. The artist has to run a server that
accepts bids above the owner’s current price threshold and returns signed
under-funded transaction that would pay the owner the asking price.
Alternatively, the bidder can send an open-bid that the owner can fill
immediately.&lt;/p&gt;

&lt;p&gt;Because Sapio is super-duper cool, we can make abstract interfaces for this
stuff so that NFTs can have lots of neat features like enforcing royalties,
dutch auction prices, batch minting, generative art minting, and more. We’ll see
a bit more tomorrow.&lt;/p&gt;

&lt;p&gt;Client validation is central to this story. A lot of the rules are &lt;em&gt;not&lt;/em&gt;
enforced by the Bitcoin blockchain. They are, however, enforced by requiring
that the ‘auditor’ be able to re-reach the same identical contract state by
re-compiling the entire contract from the start. I.e., as long as you generate
all your state transitions through Sapio, you can verify that an NFT is
‘authentic’.  Of course, anyone can ‘burn’ an NFT if they want by sending e.g.
to an unknown key.  Client side validation just posits that sending to an
unknown key is ‘on the same level’ of error as corrupting an NFT by doing state
transitions without having the corresponding ‘witness’ of sapio effects to
generate the transfer.&lt;/p&gt;

&lt;p&gt;Please re-read this section after you get throught the code (I’ll remind you).&lt;/p&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;declaring-an-nft-minting-interface&quot;&gt;Declaring an NFT Minting Interface&lt;/h1&gt;

&lt;p&gt;First we are going to declare the basic information for a NFT.&lt;/p&gt;

&lt;p&gt;Every NFT should have a owner (PublicKey) and a locator (some url, IPFS hash,
etc).&lt;/p&gt;

&lt;p&gt;NFTs also should track which Sapio module was used to mint them, to ensure
compatibility going forward. If it’s not known, modules can try to fill it in
and guess (e.g., a good gues is “this module”).&lt;/p&gt;

&lt;p&gt;Let’s put that to code:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// # Trait for a Mintable NFT&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Initial Owner&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The key that will own this NFT&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Locator&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// A piece of information that will instruct us where the NFT can be&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// downloaded -- e.g. an IPFs Hash&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Minting Module&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// If a specific sub-module is to be used / known -- when in doubt, should&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// be None.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minting_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SapioHostAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// Boilerplate for the Mint trait&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mint_impl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[derive(Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// we must provide an example!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SapioJSONTrait&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_example_for_api_checking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;02996fe4ed5943b281ca8cac92b2d0761f36cc735820579da355b737fb94b828fa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipfs_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bafkreig7r2tdlwqxzlwnd7aqhkkvzjqv53oyrkfnhksijkvmc6k57uqk6a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;mint_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;locator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipfs_hash&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;minting_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Shaweeeeet! We have an NFT Minting Interface!&lt;/p&gt;

&lt;p&gt;But you can’t actually use it to Mint yet, since we lack an Implementation.&lt;/p&gt;

&lt;p&gt;Before we implement it…&lt;/p&gt;
&lt;h1 id=&quot;what-are-nfts-good-for-selling-sales-interface&quot;&gt;What are NFTs Good For? Selling! (Sales Interface)&lt;/h1&gt;

&lt;p&gt;If you have an NFT, you probably will want to sell it in the future. Let’s
declare a sales interface.&lt;/p&gt;

&lt;p&gt;To sell an NFT we need to know:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Who currently owns it&lt;/li&gt;
  &lt;li&gt;Who is buying it&lt;/li&gt;
  &lt;li&gt;What they are paying for it&lt;/li&gt;
  &lt;li&gt;Maybe some extra stuff&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;/// # NFT Sale Trait&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// A trait for coordinating a sale of an NFT&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Owner&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The key that will own this NFT&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sell_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Price&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The price in Sats&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountU64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # NFT&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The NFT's Current Info&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Extra Information&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Extra information required by this contract, if any.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Must be Optional for consumer or typechecking will fail.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Usually None unless you know better!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// Boilerplate for the Sale trait&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sale_impl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[derive(Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;/// # Batching Trait API&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SapioJSONTrait&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_example_for_api_checking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;02996fe4ed5943b281ca8cac92b2d0761f36cc735820579da355b737fb94b828fa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipfs_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bafkreig7r2tdlwqxzlwnd7aqhkkvzjqv53oyrkfnhksijkvmc6k57uqk6a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;sale_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sell_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;locator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipfs_hash&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;minting_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;extra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That’s the interface for the contract that &lt;em&gt;sells&lt;/em&gt; the NFTs. We also need an
interface for NFTs that want to initiate a sale.&lt;/p&gt;

&lt;p&gt;To do that, we need to know:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What kind of sale we are doing&lt;/li&gt;
  &lt;li&gt;The data for that sale&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is really just expressing that we need to bind a NFT Sale Implementation to
our contract. We can express the sale interface as follows.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;

&lt;span class=&quot;c&quot;&gt;/// # Sellable NFT Function&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// If a NFT should be sellable, it should have this trait implemented.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SellableNFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;decl_continuation!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// # Sell Instructions&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Hold&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Don't transfer this NFT&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Hold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # MakeSale&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Transfer this NFT&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MakeSale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;/// # Which Sale Contract to use?&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;/// Specify a hash/name for a contract to generate the sale with.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;which_sale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SapioHostAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;/// # The information needed to create the sale&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sale_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Sell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hold&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatefulArgumentsTrait&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;getting-concrete-making-an-nft&quot;&gt;Getting Concrete: Making an NFT&lt;/h1&gt;

&lt;p&gt;Let’s create a really simple NFT now that implements these interfaces.&lt;/p&gt;

&lt;p&gt;There’s a bit of boilerplate, so we’ll go section-by-section.&lt;/p&gt;

&lt;p&gt;First, let’s declare the SimpleNFT&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// # SimpleNFT&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// A really simple NFT... not much too it!&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleNFT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The minting data, and nothing else.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// # The SimpleNFT Contract&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleNFT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// NFTs... only good for selling?&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// embeds metadata&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metadata_txns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;First, let’s implement the logic for selling the NFT… You remember our old
friend the Sales interface?&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleNFT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # signed&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Get the current owners signature.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;signed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.data.owner&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default_coerce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleNFT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatefulArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SellableNFT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleNFT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[continuation(guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::signed]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;web_api,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;coerce_args&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;default_coerce&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Sell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MakeSale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sale_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;which_sale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sale&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// if we're selling...&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sale_info&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.data.owner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.data.owner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// Hmmm... metadata mismatch! the current owner does not&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// matched the sale's claimed owner.&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// create a contract from the sale API passed in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateArgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContextualArguments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;effects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_effects_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sale_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sale_info&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// use the sale API we passed in&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_contract_by_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;which_sale&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// handle errors...&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.map_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.ok_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// send to this sale!&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// todo: we need to cut-through the compiled contract address, but this&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// upgrade to Sapio semantics will come Soon™.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiled&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount_range&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;/// Don't do anything if we're holding!&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, let’s implement the metadata logic. There are a million ways to do metadata,
so feel free to ‘skip’ this section and just let your mind wander on interesting 
things you could do here…&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleNFT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # unspendable&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// what? This is just a sneaky way of making a provably unspendable branch&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// (since the preimage of [0u8; 32] hash can never be found). We use that to&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// help us embed metadata inside of our contract...&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unspendable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Metadata TXNs&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// This metadata TXN is provably unspendable because it is guarded&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// by `Self::unspendable`. Neat!&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Here, we simple embed a OP_RETURN.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// But you could imagine tracking (&amp;amp; client side validating)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// an entire tree of transactions based on state transitions with these&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// transactions... in a future post, we'll see more!&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then(guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::unspendable]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;metadata_txns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZERO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_op_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.data.locator&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// note: what if we also comitted to the hash of the wasm module&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// compiling this contract?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, some icky boilerplate stuff:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;#[derive(Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TryFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleNFT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;try_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;LookupFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;This&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.try_into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.map_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.minting_module&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// if no module is provided, it must be this module!&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.minting_module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleNFT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// if a module is provided, we have no idea what to do...&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// unless the module is this module itself!&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleNFT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;REGISTER!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleNFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;logo.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Right on! Now we have made a NFT Implementation. We can Mint one, but wait.&lt;/p&gt;

&lt;p&gt;How do we sell it?&lt;/p&gt;

&lt;h1 id=&quot;we-need-a-nft-sale-implementation&quot;&gt;We need a NFT Sale Implementation&lt;/h1&gt;

&lt;p&gt;So let’s do it. In today’s post, we’ll implement the most boring lame ass Sale…&lt;/p&gt;

&lt;p&gt;Tomorrow we’ll do more fun stuff, I swear.&lt;/p&gt;

&lt;p&gt;First, let’s get our boring declarations out of the way:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;/// # Simple NFT Sale&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// A Sale which simply transfers the NFT for a fixed price.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimpleNFTSale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// # Versions Trait Wrapper&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Batching Trait API&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleNFTSale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_coerce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleNFTSale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleNFTSale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NFT_Sale_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;SimpleNFTSale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;REGISTER!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleNFTSale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;logo.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, onto the logic of a sale!&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleNFTSale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # signed&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// sales must be signed by the current owner&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;signed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.data.owner&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # transfer&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// transfer exchanges the NFT for cold hard Bitcoinz&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[continuation(guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::signed]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;web_api,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;coerce_args&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;default_coerce&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// first, let's get the module that should be used to 're-mint' this NFT&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// to the new owner&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;
            &lt;span class=&quot;py&quot;&gt;.data&lt;/span&gt;
            &lt;span class=&quot;py&quot;&gt;.minting_module&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.ok_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// let's make a copy of the old nft metadata..&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mint_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.data&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// and change the owner to the buyer&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mint_data&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.owner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sell_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// let's now compile a new 'mint' of the NFT&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_nft_contract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateArgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContextualArguments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;effects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_effects_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mint_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mint_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_contract_by_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.map_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.ok_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Now for the magic:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// This is a transaction that creates at output 0 the new nft for the&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// person, and must add another input that pays sufficiently to pay the&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// prior owner an amount.&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;// todo: we also could use cut-through here once implemented&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// todo: change seem problematic here? with a bit of work, we could handle it&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// cleanly if the buyer identifys an output they are spending before requesting&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// a purchase.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_nft_contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.price&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.price&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.data.owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// note: what would happen if we had another output that &lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// had a percentage-of-sale royalty to some creator's key?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s it! Makes sense, right? I hope…&lt;/p&gt;

&lt;h2 id=&quot;but-if-not&quot;&gt;But if not&lt;/h2&gt;

&lt;p&gt;Re read the part before the code again! Maybe it will be more clear now :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sapio Studio Payment Pool Walkthrough</title>
   <link href="/bitcoin/2021/12/15/advent-18/"/>
   <updated>2021-12-15T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/15/advent-18</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 18 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today’s post will be a pretty different format that usual, it’s basically going
to be a pictorial walk through of the &lt;a href=&quot;https://github.com/sapio-lang/sapio-studio&quot;&gt;Sapio
Studio&lt;/a&gt;, the frontend tool for Sapio
projects. As an example, we’ll go through a Payment Pool contract to familiarize
ourselves.&lt;/p&gt;

&lt;p&gt;I wanted to put this post here, before we get into some more applications,
because I want you to start thinking past “cool one-off concepts we can
implement” and to start thinking about reusable components we can build and ship
into a common Bitcoin Smart Contract software (Sapio Studio or its successors).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;At it’s core, Sapio Studio is just a wallet frontend to Bitcoin Core.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000000.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can make a transaction, just like normal…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/studio/000001.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And see it show up in the pending transactions…
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000002.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And even mine some regtest blocks.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000003.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But where Sapio Studio is different is that there is also the ability to create
contracts.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000004.png&quot; alt=&quot;&quot; /&gt;
Before we can do that, we need to load a WASM Plugin with a compiled contract.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000006.png&quot; alt=&quot;&quot; /&gt;
Let’s load the Payment Pool module. You can see the code for it
&lt;a href=&quot;https://github.com/sapio-lang/sapio/blob/b98db9637777a808835b4593ae1063230735fc8a/plugin-example/hanukkiah/src/plugin.rs&quot;&gt;here&lt;/a&gt;.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000007.png&quot; alt=&quot;&quot; /&gt;
And now we can see we have a module!
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000008.png&quot; alt=&quot;&quot; /&gt;
Let’s load a few more so it doesn’t look lonely.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000009.png&quot; alt=&quot;&quot; /&gt;
Now let’s check out the Payment Pool module.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000010.png&quot; alt=&quot;&quot; /&gt;
Now let’s check out another one – we can see they each have different types of
arguments, auto-generated from the code.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000011.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s fill out the form with 10 keys to make a Payment Pool controlled by 10
people, and then submit it.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000012.png&quot; alt=&quot;&quot; /&gt;
What’s that??? It’s a small bug I am fixing :/.  Not to worry…
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000013.png&quot; alt=&quot;&quot; /&gt;
Just click repair layout.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000014.png&quot; alt=&quot;&quot; /&gt;
And the presentation resets. I’ll fix it soon, but it can be useful if there’s a
glitch to reset it.&lt;/p&gt;

&lt;p&gt;Now we can see the basic structure of the Payment Pool, and how it splits up.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000015.png&quot; alt=&quot;&quot; /&gt;
Let’s get a closer look…
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000016.png&quot; alt=&quot;&quot; /&gt;
Let’s zoom out (not helpful!)…
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000017.png&quot; alt=&quot;&quot; /&gt;
Let’s zoom back in. Note how the transactions are square boxes and the outputs
are rounded rectangles. Blue lines connect transactions to their outputs. Purple lines
connect outputs to their (potential) spends.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000016.png&quot; alt=&quot;&quot; /&gt;
If we click on a transaction we can learn more about it.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000018.png&quot; alt=&quot;&quot; /&gt;
We even have some actions that we can take, like sending it to the network. 
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000019.png&quot; alt=&quot;&quot; /&gt;
Let’s try it….
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000020.png&quot; alt=&quot;&quot; /&gt;
Oops! We need to sign it first…
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000021.png&quot; alt=&quot;&quot; /&gt;
And then we can send it.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000022.png&quot; alt=&quot;&quot; /&gt;
What other buttons do we have? What’s this do?
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000023.png&quot; alt=&quot;&quot; /&gt;
It teleports us to the output we are creating!
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000024.png&quot; alt=&quot;&quot; /&gt;
Notice how the output is marked “Updatable”, and there is also a “DO_TX”
button (corresponding to the DO_TX in the Payment Pool). Let’s click that…
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000025.png&quot; alt=&quot;&quot; /&gt;
Ooooh. It prompts us with a form to do the transaction!
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000026.png&quot; alt=&quot;&quot; /&gt;
Ok, let’s fill this sucker out…
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000027.png&quot; alt=&quot;&quot; /&gt;
Click submit, then recompile (separate actions in case we want to make multiple “moves” before recompiling).
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000028.png&quot; alt=&quot;&quot; /&gt;
I really need to fix this bug…
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000029.png&quot; alt=&quot;&quot; /&gt;
Voila!&lt;/p&gt;

&lt;p&gt;As you can see, the original graph is intact and we’ve augmented onto it the new state transition.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000030.png&quot; alt=&quot;&quot; /&gt;
The new part has our 0.1 BTC Spend + the re-creation of the Payment Pool with less funds.
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000031.png&quot; alt=&quot;&quot; /&gt;
Ok, let’s go nuts and do another state transition off-of the first one? This time more payouts!
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000032.png&quot; alt=&quot;&quot; /&gt;
Submit…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/studio/000033.png&quot; alt=&quot;&quot; /&gt;
And Recompile&lt;sup id=&quot;fnref:bug&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:bug&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/studio/000034.png&quot; alt=&quot;&quot; /&gt;
I skipped showing you the bug this time.&lt;/p&gt;

&lt;p&gt;Now you can see &lt;em&gt;two&lt;/em&gt; state transitions! And because we used more payouts than one, we can see some congestion control&lt;sup id=&quot;fnref:bug2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:bug2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; at work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/studio/000035.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It works! It all really, really works!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;One more thing I &lt;em&gt;can’t&lt;/em&gt; show you with this contract is the timing simulator.&lt;/p&gt;

&lt;p&gt;This lets you load up a contract (like our Hanukkiah below) and…
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000042.png&quot; alt=&quot;&quot; /&gt;
Simulate the passing of time (or blocks).
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000041.png&quot; alt=&quot;&quot; /&gt;
Pretty cool!
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000040.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are also some settings you can configure for display settings, the node,
and for sapio-cli. The first time you run Sapio, you’ll need to get some of
these things configured correctly or else it will be broken. Currently, if you
look  &lt;a href=&quot;https://github.com/JeremyRubin/sapio-pod/blob/master/runner.sh&quot;&gt;here&lt;/a&gt; you
can find a template for a script to get everything up and running for a first
shot at it, otherwise you’ll have to do it by hand, or just change your
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preferences.json&lt;/code&gt; to be similar to mine in the note&lt;sup id=&quot;fnref:config&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:config&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/studio/000036.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000037.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000038.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/public/img/bitcoin/advent/studio/000039.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;before-you-ask&quot;&gt;before you ask…&lt;/h3&gt;
&lt;h1 id=&quot;of-course-there-is-dark-mode&quot;&gt;OF COURSE THERE IS DARK MODE&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;configured by your local system theme preference&lt;/em&gt;
&lt;img src=&quot;/public/img/bitcoin/advent/studio/dark.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I hope you enjoyed this! There’s &lt;em&gt;a metric fuckload&lt;/em&gt; of work still to do to make
Sapio Studio &amp;amp; Sapio anywhere near production grade, but I hope this has helped
elucidate how powerful and cool the Sapio approach is, and has inspired you to
build something and try it out! I’d also be really eager for feedback on what
features should be here/are missing.&lt;/p&gt;

&lt;p&gt;Lastly, if you’re just &lt;strong&gt;excited&lt;/strong&gt; about this, it’s definitely a project
that could use more experienced react/electron/bitcoin contributors, either
yourself or if you’re interested in sponsoring :).&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:bug&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;it was here I noticed a small mistake that I named the updates “First Update” instead of “FirstUpdate” so I had to poke in the JSON and fix it in the interest of time… TODO for me to make invalid inputs invalid! &lt;a href=&quot;#fnref:bug&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:bug2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I used the wrong, wonky version of the TreePay by mistake and was too lazy to fix it, my bad :p it should look more tree-y. I’ll fix the actual code in the repo at some point. &lt;a href=&quot;#fnref:bug2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:config&quot; role=&quot;doc-endnote&quot;&gt;

      &lt;p&gt;My config file, if it helps you :)&lt;/p&gt;
      &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sapio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;binary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/Users/jr/sapio/target/release/sapio-cli&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;oracle-local-enabled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;oracle-remote-enabled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;oracle-remote-oracles-list&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0:8010 tpubD6NzVbkrYhZ4Y78NbTJtGWzt9a4eeoFJ1phmTVxZNSAiVkVWW5GYixSobuXTQtzFDcSWPoXhtiDUu4n6sChuNKVXZ9UL4LvxnU1WG4Y7pxV&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;oracle-remote-threshold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;plugin_map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;configsource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;here&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;oracle-seed-file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/Users/jr/sapio/SEED&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;oracle-netinterface&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0:8010&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;display&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sats-bound&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;9999999&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;animate-flow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1594&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;poll-node-freq&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bitcoin-config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rpcuser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jeremy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rpcpassword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hunter2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rpcport&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;18443&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rpchost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;network&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;regtest&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
      &lt;p&gt;&lt;a href=&quot;#fnref:config&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A Defense of Having Fun (and maybe staying poor)</title>
   <link href="/bitcoin/2021/12/14/advent-17/"/>
   <updated>2021-12-14T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/14/advent-17</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 17 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A short story. I want to tell first. I recently made friends with
&lt;a href=&quot;https://twitter.com/fiveoutofnine&quot;&gt;Eugene&lt;/a&gt;, this really smart 19 year old Cal
dropout, when I was visiting Miami for the NFT bachanal around Art Basel.&lt;/p&gt;

&lt;p&gt;Eugene just dropped a project he’s been working on, and it’s really freakin’
cool. He basically implemented a human v. chess engine in Solidity that mints
beautiful interactive NFTs of representations of the contract’s internal states.
You can play the game / mint one for like 0.1 ETH on his site
&lt;a href=&quot;https://fiveoutofnine.com&quot;&gt;here&lt;/a&gt;, and see a permanent record of my
embarassingly bad move where I missed a mate-in-one here:&lt;/p&gt;

&lt;iframe allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;100%&quot; sandbox=&quot;allow-scripts&quot; src=&quot;https://fiveoutofnine.com/asset/17&quot; width=&quot;100%&quot; style=&quot;min-height:750px;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Definitely check out the site and read how it’s implemented. Eugene is very
bright, and a talented hacker. The project? It’s not a get-rich-quick project,
only cost is gas, so Eugene’s not raking it in (altho I think he should have,
but he’ll have many more successes).&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;so-whats-the-moral-of-this-story&quot;&gt;So what’s the moral of this story?&lt;/h1&gt;

&lt;p&gt;Why isn’t Eugene working on Bitcoin? People say that “eth is a scam” and that
“everyone working on it are scammers”. But I don’t see that. I see people, like
Eugene, wanting to build cool shit every day. And wanting to ship cool stuff.
It’s fun. And I like to be friends with creative and curious people.&lt;/p&gt;

&lt;p&gt;Working on Bitcoin is can be fun. But mostly it’s not. My post yesterday? The
one describing new techniques to make Bitcoin more decentralized? I had a lot
of fun writing it. And then someone claimed that my work is “very dangerous” to
Bitcoin.&lt;/p&gt;

&lt;p&gt;I get it, I truly do. Bitcoin is money for enemies. Don’t trust, verify.  In
the IRC channels, twitter spaces, and other forums we hear rants like the below
all the time:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Working on Bitcoin isn’t just a stupid fucking game of chess you idiot, it’s
solving literally every geoscale challenge humanity has ever faced and your work
on that is a bajillion fold more worthwhile. You are an asshole thinking you
deserve to have any fun in your life when you could be a miserable piece of shit
with people shouting at you all the time about how you suck and struggling to
ship small features and hoping how you might ship one bigger project this
decade.  Fun?  Fun??? You fucking asshole. If I don’t kill you, someone else will.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But developers are people too, and good developers like to build cool shit.  If
you haven’t noticed, Bitcoin development has a bit of a burnout problem, with
multiple contributors stepping down their engagement recently. A likely cause
is the struggle it takes to ship even the smallest features, not to mention the
monumental effort it takes to ship a single large project. But the death
threats certainly don’t help either.&lt;/p&gt;

&lt;h3 id=&quot;it-doesnt-have-to-be-this-hard&quot;&gt;It doesn’t have to be this hard&lt;/h3&gt;

&lt;p&gt;It’s hard to tell people, especially younger folk just entering the space, to
work on Bitcoin full-time. What I say is as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you have a strong ideological calling to the mission of Bitcoin and sound money,
it’s absolutely the most meaningful project for you to work on. But if that’s not you,
and you want to explore crypto, you should probably play around with Ethereum or
something else. Bitcoin is really tough to get funded for and the community,
while amazing, can be very hostile.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If I were more selfish about the mission, I’d glaze over these details. But I
want folks to decide for themselves and find something that makes them truly
happy.  For most “at-heart” Bitcoiners that won’t be a disincentive to taking
the orange-pill, but for some it might. Note: I’m Jewish, so that probably
influence my views on converting people to things (Jews believe in discouraging
converts to find the pure of heart).&lt;/p&gt;

&lt;p&gt;Despite my best efforts to convince myself otherwise, I’ve been an audit-the-fed
libertarian since elementary school or something and I have photos of myself
with Ron Paul a decade apart. So I am one of those ideologically drawn to
Bitcoin and not other projects with weaker foundations.&lt;/p&gt;

&lt;p&gt;But it doesn’t mean I don’t turn an envious eye to the activity and research
happening in other communities, or get excited about on-chain chess engines even
if they’re impractical for now. And there’s also the magic of a supportive
communtiy that doesn’t threaten to have you beaten up when they disagree with
you about the minutae of a soft fork rollout.&lt;/p&gt;

&lt;p&gt;Cool technologies attract nerds like moths to a lamp at night. Smart nerds
trying to solve interesting problems create solutions. Experiments that strain
the limits of a platform expose problems and create demand for solutions.
These solutions often have major positive externalities.&lt;/p&gt;

&lt;p&gt;I don’t think I’m going to convince you here to care about NFTs. But I am –
hopefully – going to convince you to care about NFTs the phenomenon.&lt;/p&gt;

&lt;p&gt;For example, scaling challenge in Ethereum have led to the development of Zero
Knowledge Roll-Ups, privacy issues things like Tornado Cash, and more.  While as
a project Eth might be #ngmi, Bitcoiners have traditionally said that if
anything is worth having we’ll just be able to implement it ourselves in
Bitcoin. But there are certain things that have network effects where it will be
hard for us to replicate. And by the time we do go to replicate, the tooling
that’s been developed for doing these things on Eth might be like a decade ahead
of what we’ve got for Bitcoin. And all of the smart kids are going to become
adults who are bought in technically and socially on things other than Bitcoin.
And that really freakin’ matters.&lt;/p&gt;

&lt;p&gt;I’m not advocating that Bitcoiners should embrace full-blown degeneracy. But
also it’s not in particular our job to prevent it technically. And the tools that
are produced when people have fun can lead to major innvoations.&lt;/p&gt;

&lt;p&gt;For example, right now I am working on a system for building NFTs for Bitcoin on
Sapio.&lt;/p&gt;

&lt;p&gt;Why? It’s fun. It touches on almost all of the infrastructure problems I’m
working on for Sapio right now. And it is low enough risk – in terms of risk of
losing Bitcoin – that I feel comfortable building and experimenting with these
NFT test-subjects. Worst-come-to-worst, the artists can always re-issue anything
corrupted via a software flaw.  And then as the software matures with low-risk
but still fun applications, we can apply those learnings to managing Bitcoin as
well.&lt;/p&gt;

&lt;p&gt;I also want to note that I really like artists. Artists as a community are
incredible. Artists use NFTs, so I like NFTs.  Artists are the voice of the
people. Art can tear down the establishment. Art can change the world.  And so
for Bitcoin, whose use is an inherently political message, what better community
to engage than the art world?&lt;/p&gt;

&lt;p&gt;Bitcoiners are really fixated on the technical nonsense backing NFTs – yeah,
it’s not ‘literally’ the artwork.  But then again, what literally is the
artwork? If you want a photograph and you want to pay the photographer for it,
do you? Do you get a receipt for it? Can you use that bill of sale to sell the
photo later? NFTs are just a better that. And if you don’t &lt;em&gt;like&lt;/em&gt; the art that’s
sold as NFTs right now, why not find artists you do like? Why not get them
onboarded onto Bitcoin and fully orange-pilled? Hint: the HRF has a whole &lt;a href=&quot;https://hrf.org/programs/art-in-protest/&quot;&gt;Art
in Protest&lt;/a&gt; section on their website.
Bitcoin NFTs could enable Bitcoin holders to pay dissident artists for their art
and avoid being shut down by authorities. Why not embrace that culturally? Isn’t
that the group that Bitcoin is for? And if you don’t like that, maybe you just
don’t like art. That’s ok, don’t buy it.&lt;/p&gt;

&lt;h2 id=&quot;but-nfts-are-stupid-jpegs-man&quot;&gt;But NFTs are Stupid JPEGs Man&lt;/h2&gt;

&lt;p&gt;Ok sure. Whatever.&lt;/p&gt;

&lt;p&gt;But there are all these contracts (as I showed you in previous posts) that
Bitcoin would benefit from, like inheritence schemes, vaults, decentralized
mining, payment pools, and more. Believe it or not, there tools needed to make
NFTs work well are the exact same tools required to make these work seamlessly.&lt;/p&gt;

&lt;p&gt;So why not have a little fun, let people experiment with new ideas, get excited,
grow the community, and convert the big innovations into stable and mature
tooling for the critical infrastructure applications? And maybe we’ll uncover
some upside for brand new things that never occured possible to us before.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Throught the end of this series I’ll have some more posts detailing how to build
NFTs, Derivatives, DAOs, and Bonded Oracles. I hope that you can view them with
an open mind and appreciate how – even if you don’t think they are core to what
Bitcoin has to do – these innovations will fuel development of tools to support
the projects you do like without turning Bitcoin into a shitcoin. Who knows,
maybe you’ll find a new application you like.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Composability in Sapio Contracts</title>
   <link href="/bitcoin/2021/12/13/advent-16/"/>
   <updated>2021-12-13T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/13/advent-16</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 16 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Who here has some ERC-20s or 721s&lt;sup id=&quot;fnref:rock&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:rock&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;? Anyone? No one? Whatever.&lt;/p&gt;

&lt;p&gt;The Punchline is that a lotta fuss goes into Ethereum smart contracts being
Turing Complete but guess what? Neither ERC-20 nor 721 really have anything to
do with being Turing Complete. What they do have to do with is having a
tightly defined interface that can integrate into other applications nicely.&lt;/p&gt;

&lt;p&gt;This is great news for Bitcoin. It means that a lot of the cool stuff happening
in eth-land isn’t really about Turing Completeness, it’s about just defining
really kickass interfaces for the things we’re trying to do.&lt;/p&gt;

&lt;p&gt;In the last few posts, we already saw examples of composability. We took a bunch
of concepts and were able to nest them inside of each other to make
Decentralized Coordination Free Mining Pools.  But we can do a lot more with
composability than just compose ideas togehter by hand. In this post I’ll give
you a little sampler of different types of programmatic composability and interfaces,
like the ERC-20 and 721.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;address-composability&quot;&gt;Address Composability&lt;/h2&gt;

&lt;p&gt;Because many Sapio contracts can be made completely noninteractively (with CTV
or an Oracle you’ll trust to be online later), if you compile a Sapio contract
and get an address you can just plug it in somewhere and it “composes” and you
can link it later. We saw this earlier with the ability to make a channel
address and send it to an exchange.&lt;/p&gt;

&lt;p&gt;However, for Sapio if you just do an Address it won’t necessarily have the
understanding of what that address is for so you won’t get any of the Sapio
“rich” features.&lt;/p&gt;

&lt;h3 id=&quot;pre-compiled&quot;&gt;Pre-Compiled&lt;/h3&gt;

&lt;p&gt;You can also take not just an address, but an entire (json-serialized?) Compiled
object that would include all the relevant metadata.&lt;/p&gt;

&lt;h2 id=&quot;rust-generic-types-composability&quot;&gt;Rust Generic Types Composability&lt;/h2&gt;

&lt;p&gt;Well, if you’re a rust programmer this basically boils down to rust types rule!
We’ll give a couple examples.&lt;/p&gt;

&lt;p&gt;The simplest example is just composing directly in a function:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;#[then]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeOtherContract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/**/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What if we want to pass any Contract as an argument for a Contract? Simple:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What if we want to restrict it a little bit more? We can use a trait bound.
Now only Y (or anything implementing GoodContract) can be plugged in.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GoodContract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;decl_then!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GoodContract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GoodContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GoodContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// note the inner type of a and b don't have to match&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GoodContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Boxing gives us some power to be Generic at runtime, but we can also do some
more “compile time” logic. This can have some advantages, e.g., if we want to
guarantee that types are the same.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GoodContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// a more specific concrete type -- could be a T even&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sometimes it can be helpful to wrap things in functions, like we saw in the Vaults post.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// This lets us stub in whatever we want for a function&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TxTmplIt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// this lets us get back any contract&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// this lets us get back a specific contract&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Clearly there’s a lot to do with the rust type system and making components.&lt;/p&gt;

&lt;p&gt;It would even be possible to make certain types of ‘unchecked’ type traits,
for example:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reusable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlsoReusable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Only reusable if T Reusable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reusable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlsoReusable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reusable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reusable&lt;/code&gt; tag could be used to tag contract components that would be “reuse
safe”.  E.g., an HTLC or HTLC containing component would not be reuse safe since
hashes could be revealed. While reusability isn’t “proven” – that’s up to the
author to check – these types of traits can help us reason about the properties
of compositions of programs more safely. Unfortunately, Rust lacks negative
trait bounds (i.e., Not-Reusable), so you can’t reason about certain types of things.&lt;/p&gt;

&lt;h3 id=&quot;inheritence&quot;&gt;Inheritence&lt;/h3&gt;
&lt;p&gt;We don’t have a fantastic way to do inheritence in Sapio presently. But stay
tuned!  For now, then best you get is that you can do traits (like
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodContract&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;cross-module-composability--wasm&quot;&gt;Cross Module Composability &amp;amp; WASM&lt;/h2&gt;

&lt;p&gt;One of the goals of Sapio is to be able to create contract modules with a
well-defined API Boundary that communicates with JSONs and is “typed” with
JSONSchema. This means that the Sapio modules can be running anywhere (e.g., a
remote server) and we can treat it like any other component.&lt;/p&gt;

&lt;p&gt;Another goal of Sapio is to make it possible to compile modules into standalone
WASM modules. WASM stands for Web Assembly, it’s basically a small deterministic
computer emulator program format so we can compile our programs and run them
anywhere that the WASM interpreter is available.&lt;/p&gt;

&lt;p&gt;Combining these two goals, it’s possible for one Sapio program to dynamically
load another as a WASM module. This means we can come up with a component,
compile it, and then link to it later from somewhere else. For example, we could
have a Payment Pool where we make each person’s leaf node a WASM module of their
choice, that could be something like a Channel, a Vault, or anything that
satisfies a “Payment Pool Payout Interface”.&lt;/p&gt;

&lt;p&gt;For example, suppose we wanted to a generic API for making a batched
payment.&lt;/p&gt;

&lt;h3 id=&quot;defining-the-interface&quot;&gt;Defining the Interface&lt;/h3&gt;
&lt;p&gt;First, we define a payment that we want to batch.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// A payment to a specific address&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Payment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Amount (btc)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The amount to send&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountF64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Address&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The Address to send to&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, we define the full API that we want. &lt;em&gt;Naming and versioning is still a
something we need to work on in the Sapio ecosystem, but for now it makes sense
to be verbose and include a version.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Feerate (Bitcoin per byte)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feerate_per_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountF64&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, to finish defining the API, we have to do something really gross looking
in order to make it automatically checkable – this is essentially this is what the
user defined &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BatchingTraitVersion0_1_1&lt;/code&gt; is going to verify modules are able to 
understand. This is going to be improved in Sapio over time for better typechecking!&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SapioJSONTrait&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_example_for_api_checking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;#[derive(Serialize)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;feerate_per_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;implementing-the-interface&quot;&gt;Implementing the Interface&lt;/h3&gt;

&lt;p&gt;Let’s say that we want to make a contract like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TreePay&lt;/code&gt; implement
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BatchingTraitVersion0_1_1&lt;/code&gt;. What do we need to do?&lt;/p&gt;

&lt;p&gt;First, let’s get the boring stuff out of the way, we need to make the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TreePay&lt;/code&gt;
module understand that it should support &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BatchingTraitVersion0_1_1&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// # Different Calling Conventions to create a Treepay&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Standard Tree Pay&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;TreePay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreePay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Batching Trait API&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;REGISTER!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreePay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;logo.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we just need to define logic converting the data provided in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BatchingTraitVersion0_1_1&lt;/code&gt; into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TreePay&lt;/code&gt;. Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BatchingTraitVersion0_1_1&lt;/code&gt; 
is really basic, we need to pick values for the other fields.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreePay&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TreePay&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;participants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;radix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// estimate fees to be 4 outputs and 1 input + change&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fee_sats_per_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.feerate_per_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;timelock_backpressure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreePay&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreePay&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TreePay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;using-the-interface&quot;&gt;Using the Interface&lt;/h3&gt;

&lt;p&gt;To use this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BatchingTraitVersion0_1_1&lt;/code&gt;, we can just define a struct as follows,
and when we deserialize it will be automatically verified to have declared a
fitting API.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequiresABatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Which Plugin to Use&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Specify which contract plugin to call out to.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SapioHostAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BatchingTraitVersion0_1_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SapioHostAPI&lt;/code&gt; handle can be either a human readable name (like
“user_preferences.batching” or “org.judica.modules.batchpay.latest”) and looked
up locally, or it could be an exact hash of the specific module to use.&lt;/p&gt;

&lt;p&gt;We can then use the handle to resolve and compile against the third party module.
Because the module lives in an entirely separate WASM execution context,
we don’t need to worry about it corrupting our module or being able to access
information we don’t provide it.&lt;/p&gt;

&lt;h1 id=&quot;call-to-action&quot;&gt;Call to Action&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;ARE YOU A BIG BRAIN PROGRAMMING LANGUAGE PERSON?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PLEASE &lt;a href=&quot;https://judica.org/join&quot;&gt;HELP ME&lt;/a&gt; MAKE THIS SAPIO
HAVE A COOL AND USEFUL TYPE SYSTEM I AM A SMALL BRAIN BOI AND THIS STUFF IS
HARD AND I NEED FRENZ.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EVEN THE KIND OF “FRENZ” THAT YOU HAVE TO PAY FOR &lt;em&gt;wink&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://judica.org/join&quot;&gt;CLICK HERE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In the posts coming Soon™, we’ll see some more specific examples of contracts
that make heavier use of having interfaces and all the cool shit we can get done.&lt;/p&gt;

&lt;h1 id=&quot;thats-all-i-have-to-say-see-you-tomorrow&quot;&gt;That’s all I have to say. See you tomorrow.&lt;/h1&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:rock&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;if you’ve been living under a big rock, ICO tokens and NFTs. &lt;a href=&quot;#fnref:rock&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Decentralized Coordination Free Mining Pools</title>
   <link href="/bitcoin/2021/12/12/advent-15/"/>
   <updated>2021-12-12T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/12/advent-15</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 15 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;long-time-no-see-you-come-around-these-parts-often&quot;&gt;Long time no see. You come around these parts often?&lt;/h3&gt;

&lt;p&gt;Let’s talk mining pools.&lt;/p&gt;

&lt;p&gt;First, let’s define some things. What is a pool? A pool is a way to take a
strongly discontinuous income stream and turn it into a smoother income stream.&lt;/p&gt;

&lt;p&gt;For example, suppose you are a songwriter. You’re a dime a dozen, there are 1000
songwriters. If you get song of the year, you get $1M Bonus. However, all the
other songwriters are equally pretty good, it’s a crapshoot. So you and half the
other songwriters agree to split the prize money whoever wins. Now, on average,
every other year you get $2000, instead of once every thousand years. Since
you’re only going to work about 50 years, your “expected” amount of winnings
would be $50,000 if you worked alone. But expected winnings don’t buy bread. By
pooling, your expected winnings are $2000 every other year for 50 years, so also
$50,000. But you expect to actually have some spare cash laying around. However,
if you got lucky and won the contest the year you wrote a hit, you’d end up way
richer! but the odds are 1:20 of that ever happening in your life, so there
aren’t that many rich songwriters (50 out of your 1000 peers…).&lt;/p&gt;

&lt;p&gt;Mining is basically the same as our songwriter contest, just instead of silver
tongued lyrics, it’s noisy whirring bitcoin mining rigs. Many machines will
never mine a block. Many miners (the people operating it) won’t either! However,
by pooling their efforts together, they can turn a once-in-a-million-years
chance into earning temperatureless immaterial bitcoin day in and day out.&lt;/p&gt;

&lt;h2 id=&quot;who-pissed-in-your-pool&quot;&gt;Who Pissed In your Pool?&lt;/h2&gt;

&lt;p&gt;The problem with pooling is that they take an extremely decentralized process
and add a centralized coordination layer on top. This layer has numerous issues
including but not limited to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Weak Infrastructure: What happens if e.g. DNS goes down as it did recently?&lt;/li&gt;
  &lt;li&gt;KYC/AML requirements to split the rewards&lt;/li&gt;
  &lt;li&gt;Centralized “block policies”&lt;/li&gt;
  &lt;li&gt;Bloating chain space with miner payouts&lt;/li&gt;
  &lt;li&gt;Getting kicked out of their home country (happened in China recently)&lt;/li&gt;
  &lt;li&gt;Custodial hacking risk.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;People are working on a lot of these issues with upgrades like “Stratum V2”
which aspire to give the pools less authority.&lt;/p&gt;

&lt;p&gt;In theory, mining pool operators should be against things that limit their
business operations. However, we’re in a bit “later stage bitcoin mining”
whereas pooling is seen more as a necessary evil, and most pools are anchored by
big mining operations. And getting rid of pools would be great for Bitcoin,
which would increase the value of folks holdings/mining rigs. So while it might
seem irrational, it’s actually perfectly incentive compatible that mining pools
operators consider mining pools to be something to make less of a centralization
risk. Even if pools don’t exist in their current form, mining service providers
can still make really good business offerring all kinds of support.  Forgive me
if i’m speaking out of turn, pool ops!&lt;/p&gt;

&lt;h2 id=&quot;making-mining-pools-better&quot;&gt;Making Mining Pools Better&lt;/h2&gt;

&lt;p&gt;To make mining pools better, we can set some ambitious goals:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Funds should not be centrally custodied, ever, if at all.&lt;/li&gt;
  &lt;li&gt;No KYC/AML.&lt;/li&gt;
  &lt;li&gt;No “Extra network” software required.&lt;/li&gt;
  &lt;li&gt;No blockchain bloat.&lt;/li&gt;
  &lt;li&gt;No extra infrastructure.&lt;/li&gt;
  &lt;li&gt;The size of a viable pool should be smaller. Remember our singer – if you
just pool with one other songwriter it doesn’t make your expected time till
payout in your lifetime. So bigger the pools, more regular the payouts. We want
the smallest possible “units of control” with the most regular payouts possible.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;fuck--thats-a-huge-list-of-goals&quot;&gt;Fuck.  That’s a huge list of goals.&lt;/h1&gt;

&lt;p&gt;But if you work with me here, you’ll see how we can nail every last one of them.
And in doing so, we can clear up some major Privacy hurdles and Decentralization
issues.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;building-the-decentralized-coordination-free-mining-pool&quot;&gt;Building the Decentralized Coordination Free Mining Pool&lt;/h1&gt;
&lt;p&gt;We’ll build this up step by step. We probably won’t look at any Sapio code
today, but as a precursor I really must insist read the last couple posts first:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/bitcoin/2021/12/09/advent-12/&quot;&gt;Congestion Control&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/bitcoin/2021/12/10/advent-13/&quot;&gt;Payment Pools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/bitcoin/2021/12/11/advent-14/&quot;&gt;Channels&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You read them, right?&lt;/p&gt;

&lt;p&gt;Right?&lt;/p&gt;

&lt;p&gt;Ok.&lt;/p&gt;

&lt;p&gt;The idea is actually really simple, but we’ll build it up piece by piece by piece.&lt;/p&gt;

&lt;h2 id=&quot;part-1-window-functions-over-blocks&quot;&gt;Part 1: Window Functions over Blocks.&lt;/h2&gt;

&lt;p&gt;A window function is a little program that operates over the last “N” things and
computes something.&lt;/p&gt;

&lt;p&gt;E.g., a window function could operate over the last 5 hours and count how many
carrots you ate. Or over the last 10 cars that pass you on the road.&lt;/p&gt;

&lt;p&gt;A window function of bitcoin blocks could operate over a number of different things.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The last 144 blocks&lt;/li&gt;
  &lt;li&gt;The last 24 hours of blocks&lt;/li&gt;
  &lt;li&gt;The last 100 blocks that meet some filter function (e.g, of size &amp;gt; 500KB)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A window function could compute lot of different things too:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The average time difference between blocks&lt;/li&gt;
  &lt;li&gt;The amount of fees paid in those blocks&lt;/li&gt;
  &lt;li&gt;A subset of the blocks that pass another filter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A last note: window functions need, for something like Bitcoin, a start height
where we exclude things prior (e.g., last 100 blocks since block 500,000)&lt;/p&gt;

&lt;h2 id=&quot;part-2-giving-presents-to-all-our-friends&quot;&gt;Part 2: Giving presents to all our friends&lt;/h2&gt;

&lt;p&gt;Let’s do a window function over the last 100 Blocks and collect the 1st address
in the output of the coinbase transaction.&lt;/p&gt;

&lt;p&gt;Now, in our block, instead of paying ourselves a reward, let’s divvy it up among
the last 100 blocks and pay them out our entire block reward, split up.&lt;/p&gt;

&lt;p&gt;We’re so nice!&lt;/p&gt;

&lt;h2 id=&quot;part-3-giving-presents-to-our-nice-friends-only&quot;&gt;Part 3: Giving presents to our nice friends only&lt;/h2&gt;

&lt;p&gt;What if instead of paying everyone, we do a window function over the last 100
blocks and filter for only blocks that followed the same rule that we are
following (being nice). We take the addresses of each of them, and divvy up our
award to them too like before.&lt;/p&gt;

&lt;p&gt;We’re so nice to only our nice friends!&lt;/p&gt;

&lt;p&gt;Now stop and think a minute. All the “nice” blocks in the last 100 didn’t get a
reward directly, but they got paid by the future nice blocks handsomely.  Even
though we don’t get any money from the block we mined, if our nice friends keep
on mining then they’ll pay us too returning the favor.&lt;/p&gt;

&lt;p&gt;Re-read the above till it makes sense. This is the big idea. Now onto the “small”
ideas.&lt;/p&gt;

&lt;h2 id=&quot;part-4-deferring-payouts&quot;&gt;Part 4: Deferring Payouts&lt;/h2&gt;

&lt;p&gt;This is all kinda nice, but now our blocks get really really big since we’re
paying all our friends. Maybe we can be nice, but a little mean too and tell
them to use their own block space to get their gift.&lt;/p&gt;

&lt;p&gt;So instead of paying them out directly, we round up all the nice block addresses
like before and we toss it in a Congestion Control Tree.&lt;/p&gt;

&lt;p&gt;Now our friends do likewise too. Since the Congestion Control Module is
deterministic, everyone can generate the same tree and both verify that our
payout was received and generate the right transaction.&lt;/p&gt;

&lt;p&gt;Now this gift doesn’t take up any of our space!&lt;/p&gt;

&lt;h2 id=&quot;part-5-compacting&quot;&gt;Part 5: Compacting&lt;/h2&gt;

&lt;p&gt;But it still takes up space for someone, and that blows.&lt;/p&gt;

&lt;p&gt;So let’s do our pals a favor. Instead of just peeping the 1st address (which
really could be anything) in the coinbase transaction, let’s use a good ole
fashioned OP_RETURN (just some extra metadata) with a Taproot Public Key we want
to use in it.&lt;/p&gt;

&lt;p&gt;Now let’s collect all the blocks that again follow the rule defined here, and
take all their taproot keys.&lt;/p&gt;

&lt;p&gt;Now we gift them into a Payment Pool, instead of into just a Congestion Control
tree with musig aggregated keys at every node.  It’s a minor difference – a
Congestion Control tree doesn’t have a taproot key path – but that difference
means the world.&lt;/p&gt;

&lt;p&gt;Now instead of having to expand to get everyone paid, they can use it like a
Payment Pool!  And Pools from different runs can even do a many-to-one
transaction where they merge balances.&lt;/p&gt;

&lt;p&gt;For example, imagine two pools:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UTXO A from Block N: 1BTC Alice, 1BTC Carol, 1BTC Dave
UTXO B Block N+1: 1BTC Alice, 1BTC Carol, 1BTC Bob
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can do a transaction as follows to merge the balances:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Spends:
    UTXO A, B
Creates:
    UTXO C: 2BTC Alice, 2BTC Carol, 1BTC Dave, 1BTC Bob
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Compared to doing the payments directly, fully expanding this creates only 4
outputs instead of 6! It gets even better the more miners are involved.&lt;/p&gt;

&lt;p&gt;We could even merge many pools at the same time, and in the future, benefit from
something like cross-input-signature aggregation to make it even cheaper and
create even fewer outputs.&lt;/p&gt;

&lt;h2 id=&quot;part-6-channels&quot;&gt;Part 6: Channels&lt;/h2&gt;

&lt;p&gt;But wait, there’s more!&lt;/p&gt;

&lt;p&gt;We can even make the terminal leafs of the Payment Pool be channels instead of direct UTXOs.&lt;/p&gt;

&lt;p&gt;This has a few big benefits.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We don’t need to do any compaction as urgently, we can immediately route funds around.&lt;/li&gt;
  &lt;li&gt;We don’t need to necessarily wait 100 blocks to spend out of our coinbase since we can use the channel directly.&lt;/li&gt;
  &lt;li&gt;Instead of compaction, we can just “swap” payments around across channels.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/dcfmp/aggpayments.svg&quot; alt=&quot;channel balancing&quot; /&gt;
&lt;em&gt;How channel balancing might look.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This should be opt-in (with a tag field to opt-in/out)  since if you didn’t want
a channel it could be annoying to have the extra timeout delays, especially if you
wanted e.g. to deposit directly to cold storage.&lt;/p&gt;

&lt;h2 id=&quot;part-7-selecting-window-functions&quot;&gt;Part 7: Selecting Window Functions&lt;/h2&gt;

&lt;p&gt;What’s the best window function?&lt;/p&gt;

&lt;p&gt;I got no freakin’ clue. We can window over time, blocks, fee amounts,
participating blocks, non participating blocks, etc.&lt;/p&gt;

&lt;p&gt;Picking a good window function is an exercise in itself, and needs to be
scrutinized for game theoretic attacks.&lt;/p&gt;

&lt;h2 id=&quot;part-8-payout-functions&quot;&gt;Part 8: Payout Functions&lt;/h2&gt;

&lt;p&gt;Earlier we showed the rewards as being just evenly split among the last blocks,
but we could also reward people differently. E.g., we could reward miners who
divided more reward to the other miners more (incentivize collecting more fees),
or really anything deterministic that we can come up with.&lt;/p&gt;

&lt;p&gt;Again, I don’t know the answer here. It’s a big design space!&lt;/p&gt;

&lt;h2 id=&quot;part-9-voting-on-parameters&quot;&gt;Part 9: Voting on Parameters&lt;/h2&gt;

&lt;p&gt;One last idea: if we had some sort of parameter space for the window functions,
we could perhaps vote on-chain for tweaking it. E.g., each miner could vote to
+1 or -1 from the window length.&lt;/p&gt;

&lt;p&gt;I don’t particularly think this is a good idea, because it brings in all sorts
of weird attacks and incentives, but it is a cool case of on-chain governance so
worth thinking more on.&lt;/p&gt;

&lt;h2 id=&quot;part-10-end-of-transmission&quot;&gt;Part 10: End of Transmission?&lt;/h2&gt;

&lt;p&gt;No more steps. Now we think a bit more about the implications of this.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;solo-mining&quot;&gt;Solo mining?&lt;/h2&gt;

&lt;p&gt;Well the bad news about this design is that we can’t really do solo mining.
Remember, most miners probably will never mine a block. So they would never be
able to enter the pool.&lt;/p&gt;

&lt;p&gt;We could mess around with including things like partial work shares (just a
few!) into blocks, but I think the best bet is to instead to focus on
micro-pools. Micro-pools would be small units of hashrate (say, 1%?) that are
composed of lots of tiny miners.&lt;/p&gt;

&lt;p&gt;The tiny miners can all connect to each other and gossip around their work
shares, use some sort of conesnsus algorithm, or use a pool operator. The blocks
that they mine should use a taproot address/key which is a multisig of some
portion of the workshares, that gets included in the top-level pool as a part of
Payment Pool.&lt;/p&gt;

&lt;p&gt;So while we don’t quite make solo mining feasible, the larger the window we use
the tinier the miners can be while getting better de-risking.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis?&lt;/h2&gt;

&lt;p&gt;A little out of scope for here, but it should work conceptually!&lt;/p&gt;

&lt;p&gt;A while back I analyzed this kind of setup, &lt;a href=&quot;https://utxos.org/uses/miningpools/&quot;&gt;read more
here&lt;/a&gt;. Feel free to experiment
with window and payout functions and report back!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/dcfmp/bagpool.svg&quot; alt=&quot;analysis of benefit to variance reduction&quot; /&gt;
&lt;em&gt;chart showing that the rewards are smoother over time&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;now-implement-it&quot;&gt;Now Implement it!&lt;/h2&gt;

&lt;p&gt;Well we are &lt;em&gt;not&lt;/em&gt; gonna do that here, since this is kinda a mangum opus of Sapio
and it would be wayyyy too long. But it should be somewhat conceptually
straightforward if you paid close attention to the “precursor” posts. And you
can see some seeds of progress for an implementation on
&lt;a href=&quot;https://github.com/sapio-lang/sapio/blob/master/examples/dcf_mining_pool/src/main.rs&quot;&gt;github&lt;/a&gt;,
although I’ve mostly been focused on simpler applications (e.g. the constituent
components of payment pools and channels) for the time being… contributions welcome!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;TL;DR: Sapio + CTV makes pooled mining more decentralized and more private.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Payment Channels in a CTV+Sapio World</title>
   <link href="/bitcoin/2021/12/11/advent-14/"/>
   <updated>2021-12-11T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/11/advent-14</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 14 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;lightning-lightning-lightning&quot;&gt;Lightning Lightning Lightning&lt;/h2&gt;

&lt;p&gt;Everybody loves Lightning. I love Lightining, you love Lightning. We love
everyone who works on Lightning. Heck, even
&lt;a href=&quot;https://twitter.com/chainalysis/status/1469317238893289475&quot;&gt;Chainalysis&lt;/a&gt; loves
Lightning these days :(…&lt;/p&gt;

&lt;h2 id=&quot;we-all-love-lightning&quot;&gt;We all love Lightning.&lt;/h2&gt;

&lt;p&gt;But what if I told you we could love Lightning even more? Crazy, right?&lt;/p&gt;

&lt;p&gt;With CTV + Sapio we can improve on Lightning is some pretty cool ways you
may not have heard too much about before. Buckle up, we’re in for another doozy
of a post.&lt;/p&gt;

&lt;h2 id=&quot;let-a-thousand-channels-bloom&quot;&gt;Let a thousand channels bloom&lt;/h2&gt;

&lt;p&gt;The main thing we’re going to talk about in this post is the opening and closing
of channels. There are some other things that CTV/Sapio can do that are a bit
more niche to talk about&lt;sup id=&quot;fnref:eltoo&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:eltoo&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, but there will always be future posts.&lt;/p&gt;

&lt;h3 id=&quot;how-do-we-open-channels-today&quot;&gt;How do we open channels today?&lt;/h3&gt;

&lt;p&gt;Let’s say I want to open a channel up with you. I shoot you a text on signal or
something and say “hey what’s up, happy holidays friend. I would like to open a
payment channel with you”. You say back, “Tis the season! Let’s do it, my Tor
Hidden Service address is ABCXYZ”. Then I connect to your node from my computer
and then I say I want to open a channel with you for 500,000 sats (at writing in
2021 this was $250 US Dollars, not $250 Million Dollars). Then, you might
authorize opening up the channel with me, or your node might just roll the dice
and do it without your permission (IDK how the nodes actually work, depends on
your client, and maybe in the future some reputation thingy).&lt;/p&gt;

&lt;p&gt;So now we have agreed to create a channel.&lt;/p&gt;

&lt;p&gt;Now, I ask you for a key to use in the channel and you send it to me. Then, I
create an unsigned transaction F that is going to create and fund our channel.
The channel is in Output C. I send you F and C. Then, I ask you to pre-sign a
transaction spending from C that doesn’t yet exist, but would refund me and give
you nothing in the event you go offline. This is basically just using the
channel like it exists already for a payment 0 paying me. After I get those
sweet sweet signatures from you, then I send you the signatures as well in case
you want to close things out like normal.&lt;/p&gt;

&lt;h5 id=&quot;houston-we-have-a-channel&quot;&gt;Houston, we have a channel.&lt;/h5&gt;

&lt;p&gt;Now we can revoke old states and stuff and sign new states and all that fancy
channel HTLC routing jazz. We don’t really need to know how a lot of that works
down in the details so don’t ask.&lt;/p&gt;

&lt;h4 id=&quot;something-a-little-more-nifty-perhaps&quot;&gt;Something a little more nifty, perhaps?&lt;/h4&gt;

&lt;p&gt;Technically I presented you how single funded channels work, but you can also
dual fund where we both contribute some funds. It’s relatively new feature to
land and was a lot of work… Dual funded channels are important because when I
opened the channel to you I had all the sats and I couldn’t receive any Bitcoin.
Dual funded channels means you can immediately send both directions.&lt;/p&gt;

&lt;h3 id=&quot;what-can-we-do-with-ctv&quot;&gt;What can we do with CTV?&lt;/h3&gt;

&lt;p&gt;With CTV, the single funded channel opening story is a bit simpler. I ask you if
you want to open a channel, you say “sure!” (maybe I even look up your key from
a Web-of-Trust system), and send me a key. I then use Sapio to compile a channel
for 500k sats to our keys, I send Bitcoin to it. The channel is created. I send
you the Outpoint + the arguments to the channel, either through email,
connecting to your node, or pigeon with a thumbdrive, and later you verify that
I paid to the channel for our keys that Sapio output by running the compiler
with the same arguments (500k sats to our keys).&lt;/p&gt;

&lt;p&gt;This is called a non-interactive channel open. Why’s that? Beyond having to do
some basics (e.g., I have to know a key for you, which could be on a public
Web-of-Trust), there is no step in the flow that requires any back-and-forth
negotiation to create the channel. I just create it unilaterally, and then I
could tell you about it a year later. You’d be able to verify it fine!&lt;/p&gt;

&lt;p&gt;For dual-funded channels, I send you a transaction you can pay into to finish
opening it and I can go offline. Once opened, the channel works for us both
recovering our funds.&lt;/p&gt;

&lt;h3 id=&quot;sounds-niche&quot;&gt;sounds niche&lt;/h3&gt;

&lt;p&gt;It kinda is. It’s an esoteric nerdy property. But I promise you it’s really
cool! Let’s look at some examples:&lt;/p&gt;

&lt;h4 id=&quot;cafe-latte-anyone&quot;&gt;Cafe Latte Anyone?&lt;/h4&gt;
&lt;p&gt;Let’s say that I go to a cafe I’ve never been to and there is a QR code posted
on the wall.  I then go about my business, ordering a 10,000 sat breakfast combo.
To pay, I scan the QR-code, and then it has a XPUB for Non Interactive Channels on it.&lt;/p&gt;

&lt;p&gt;I can then plug in that XPUB into my Sapio Channel Creator and create a channel
with a first payment of 10k sats and a total balance of 100k sats.  I show a QR
code on my phone to the barista, who scans it, getting the details of the
channel I made. Barista says looks good, acknowledging both the payment and the
channel open. The details get backed up to The Cloud.&lt;/p&gt;

&lt;p&gt;But just then something happens: a masked figure comes in with a gun and tells
the barista, “GIVE ME ALL YOUR SATOSHIS”. A child begins to cry, their parent
covering their mouth with their hand. The bad guy barks, “GIVE ME ALL YOUR
SATOSHIS… and no one gets hurt,” tapping the muzzle of the gun on the
countertop. The barista smirks and snarls, “stupid thief, surely you’ve been
reading the post on non-interactive lightning channels on Rubin’s Bitcoin Advent
Calendar.” The robber adjusts the straps on their mask for some relief from the
ear irritation. “If you had been reading it, you would know that I don’t need to
have a key online in order for someone to create a channel with me! I just need
the XPUB to verify they are made correctly. This is not those old-school
channels. I have no ability to spend. We keep our keys colder than our cold
brew.” The robbers shoulders sag and they mutter, “fine, in that case, I’ll have
a medium cold brew coffee, one sugar with a splash of oat milk. And that big
chocolate chip cookie”.&lt;/p&gt;

&lt;p&gt;That’s right. Because our cafe used non-interactive channels, they didn’t
have to have a key online to create a channel with me! They just needed durable
storage for the channel definition.&lt;/p&gt;

&lt;p&gt;And when I go to spend a bit extra for a bottle of Topo Chico™ later, they still
don’t need to be online, I can start making payments without them
counter-signing&lt;sup id=&quot;fnref:caveat&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:caveat&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h4 id=&quot;where-did-my-corn-come-from&quot;&gt;Where did my corn come from?&lt;/h4&gt;

&lt;p&gt;How did I get the bitcoin for the channel I’m opening? Usually this is an
assumption for Lightning (you have Bitcoin!), but in this case it’s central to
the plot here. You probably got them from an exchange, mining, or something else.&lt;/p&gt;

&lt;p&gt;This means that in order to open a channel to someone, I need to do two transactions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get some money&lt;/li&gt;
  &lt;li&gt;Make the channel&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s possible, if I had a really legit hip exchange, they’d let me directly open
a channel by offering me a transaction unsigned with the channel output C that I
can presign with you! But then they can’t really batch payments (otherwise one
user going offline can be a DoS attack on the batch payout) and they can also
get DoS’d unbatched since we can “lock up” a coin while we run the protocol.&lt;/p&gt;

&lt;p&gt;If instead, we had CTV we could just generate an address for the channel we
wanted and request the exchange pay to it the appropriate amount of coin.  The
exchange could pay the channel address however they want, and we’d be able to
use it right away.&lt;/p&gt;

&lt;h4 id=&quot;however-they-want&quot;&gt;However they want?&lt;/h4&gt;

&lt;p&gt;Yes. Let’s look at some options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A normal transaction – Works great.&lt;/li&gt;
  &lt;li&gt;A batch transaction – No Problemo.&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;/bitcoin/2021/12/09/advent-12/&quot;&gt;Congestion Control Tree&lt;/a&gt; – Even that!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What was that last one? You read it right, a channel can be created in a Congestion Control tree,
and be immediately usable!&lt;/p&gt;

&lt;p&gt;How’s this work? Well, because you can fully verify you’d receive a payment in a
congestion control tree, you can likewise fully verify that your channel will be
created.&lt;/p&gt;

&lt;p&gt;This is big. This means that you can just directly request a channel from a third party
without even telling them that you’re making a channel!&lt;/p&gt;

&lt;p&gt;And this technique – channels in congestion control tree – generalizes
beautifully.  It means you could create as many immediately usable channels as
you like and lazily fully open them over their lifetime whenever blockspace is
affordable.&lt;/p&gt;

&lt;h5 id=&quot;i-lied-a-little&quot;&gt;I Lied (a little)&lt;/h5&gt;

&lt;p&gt;If the exchange doesn’t follow your payment instructions to the T, e.g. if they
split it into two UTXOs then it won’t work. Exchanges should probably not do
anything other than what you asked them to do (this should be something to ensure
in the exchanges terms of service…).&lt;/p&gt;

&lt;h4 id=&quot;come-on-in-the-waters-warm&quot;&gt;Come on in the water’s warm?&lt;/h4&gt;

&lt;p&gt;This concept also composes nicely with the &lt;a href=&quot;/bitcoin/2021/12/10/advent-13/&quot;&gt;Payment
Pools&lt;/a&gt; we saw yesterday.  Imagine you embed
channels as the terminal outputs after a full-ejection from the pool.  Then,
what you can do is have the N-of-N agree to an on-chain state update that
respects (or preserves) any channel updates &lt;em&gt;before&lt;/em&gt; you switch.  Embedding the
channels inside means that Payment Pools would only need to do on-chain
transactions when they need to make an external payment or re-configure
liquidity among participants.&lt;/p&gt;

&lt;p&gt;For example, imagine a pool with Alice, Bob, Carol, and Dave each having one
coin in a channel. We’ll do some channel updates, and then reconfigure.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Start:
Pool(Channel([A, 1], [B, 1]), Channel([C, 1], [D, 1]))

Channel Update (off-chain):
Pool(Channel([A, 0.4], [B, 1.6]), Channel([C, 1], [D, 1]))

Channel Update (off-chain):
Pool(Channel([A, 0.4], [B, 1.6]), Channel([C, 1.3], [D, 0.7]))

Pool Reconfigure (on-chainl swap channel partners):
Pool(Channel([A, 0.4], [D, 0.7]), Channel([C, 1.3], [B, 1.6]))

Pool Reconfigure (on-chain; add Eve/Bob Channel):
Pool(Channel([A, 0.4], [D, 0.7]), Channel([C, 1.3], [B, 0.6]), Channel([E, 0.5], [B, 0.5]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pretty neat, right?&lt;/p&gt;

&lt;p&gt;This is particularly a big win for Scalability and Privacy, since we’re now
containing tons of activity within a single UTXO, and even within that UTXO
most of the information doesn’t need to be known to all participants.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’m not going to show you all of these integrations directly (Congestion Control, Pools, etc),
because you gotta cut an article somewhere. But we do have enough…&lt;/p&gt;

&lt;h1 id=&quot;time-to-code&quot;&gt;Time to Code&lt;/h1&gt;

&lt;p&gt;OK enough ‘how it works’ and ‘what it can do’. Let’s get cracking on a basic
channel implementation so you know I’m not bullshitting you&lt;sup id=&quot;fnref:microbs&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:microbs&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;First, let’s define the basic information we’ll need:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// Information for each Participant&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Participant&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// signing key&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// amount of funds&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountF64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// A Channel can be either in an Open or Closing state.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Closing&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// Channel definition.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Channel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// If it is opening or closing&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Each participant's balances&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Participant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Amount of time transactions must be broadcast within&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyRelTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pretty straightforward.&lt;/p&gt;

&lt;p&gt;Now, let’s define the API:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Channel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finish_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we’ll define the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;being_close&lt;/code&gt; logic. Essentially all it’s going to do is,
if we’re in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Open&lt;/code&gt; state allow transitioning the pool to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Closing&lt;/code&gt; state.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Channel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[compile_if]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;ConditionalCompileType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Required&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;ConditionalCompileType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Never&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;#[then(compile_if&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::if_open]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;begin_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// copy the channel data and change to closing state&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// begin_close can happen at any time&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Closing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                        &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we’ll define the logic for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Closing&lt;/code&gt; state. Essentially, if the state
as been in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Closing&lt;/code&gt; and the timeout expires, then we allow a transaction to
return the funds to the initial state. We’ll only add an output for a
participant if they have any money!&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Channel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[compile_if]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if_closing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Closing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;ConditionalCompileType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Required&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;ConditionalCompileType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Never&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;#[then(compile_if&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::if_closing]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;finish_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// only allow finish_close after waiting for timelock&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.set_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.timelock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// add party 0 if they have funds&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// add party 1 if they have funds&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Almost lastly, we’ll add the updating logic. The updating logic has to be used in a very
particular way in this contract, but it’s pretty basic by itself!&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// updating a channel&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// nothing to do!&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// An update that can later 'burned'&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Revokable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Revokable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// An update that is formed to terminate a channel&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Cooperate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Participants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Channel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;both_signed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                         &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;#[continuation(guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::both_signed]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// don't do anything&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// send funds to the revokable contract&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Revokable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// note -- technically we only need to sign revokables where&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// state == State::Closing, but we do both for efficiency&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; 
                                &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// Terminate the channel into two payouts.&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Cooperate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                   &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                   &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                   &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now to finish we need to define some sort of thing for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Revokable&lt;/code&gt;.  Revokables
are used to update a channel from one set of balances to another.  This will
depend on your payment channel implementation. I’ve defined a basic one below,
but this could be anything you like.&lt;/p&gt;

&lt;p&gt;Essentially, a Revokable is an offer from party A to party B to close the
channel such that B can later provably “reject” the offer. If B uses a rejected
offer, A can take the entire balance of the channel.&lt;/p&gt;

&lt;p&gt;How to use this to update a channel? To start, all parties agree on the new
balances with a timeout.&lt;/p&gt;

&lt;p&gt;Next, party one gets a hash H(V) from party two that party two knows V and party
one does not. Party one then creates a Revokable with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from_idx = 0&lt;/code&gt;, the
updated balances, timelock, and hash H(V). They feed the update arguments to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Channel::update&lt;/code&gt; and sign the resulting transaction, sending the signed
transaction to party two.  In particular in non-interactive channels, party one
only &lt;em&gt;has&lt;/em&gt; to sign revokable updates at the branch where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state ==
State::Closing&lt;/code&gt;, but it’s better for cases where your counterparty might not be
malicious and just offline if you sign updates on both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Open&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Closing&lt;/code&gt;.
Just signing on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Open&lt;/code&gt; would be insecure.&lt;/p&gt;

&lt;p&gt;Then, we repeat this with roles reversed with one generating a hash and two
signing transactions.&lt;/p&gt;

&lt;p&gt;Lastly, both reveals the hash preimage (V to H(V)) from any prior round to
revoke the state from their counterparty.&lt;/p&gt;

&lt;p&gt;If either party ever broadcasts the Revokable that they received by signing the
other half of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Channel::update&lt;/code&gt; after revealing their Hash preimage, the
other party can take all the funds in the channel.&lt;/p&gt;

&lt;p&gt;Kinda a bit tough to understand, but you don’t really need to get it, you can
embed whatever protocol like this inside that you want.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Revokable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// updated balances&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Participant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// preimage from the other party&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// how long the other party has to revoke&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timelock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyRelTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// who is this update from&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Revokable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;revoked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Revokable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// after waiting for the timeout, close the balances out at the appropriate values.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.set_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.timelock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/// if this was revoked by the other party&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// we can sweep all the funds&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;revoked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.from_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;And now some closing remarks:&lt;/p&gt;

&lt;h2 id=&quot;ctv-required&quot;&gt;CTV Required?&lt;/h2&gt;

&lt;p&gt;You don’t need CTV for these channel specs to work, but you do need CTV for the
channels to be non-interactive. Without CTV you just use a multi-sig oracle of
both parties, and the contracts come out logically similar to an existing
lightning channel. Does that mean we’re going to enter…&lt;/p&gt;

&lt;h2 id=&quot;the-era-of-sapio-lightning&quot;&gt;The Era of Sapio Lightning?&lt;/h2&gt;

&lt;p&gt;It’s probably going to be a while/never before this actually becomes a
“Lightning” standard thing, even if you could use this with self-hosted oracles
today, although perhaps one day it could be!&lt;/p&gt;

&lt;p&gt;However, it’s possible! One path towards that would be if, perhaps, Sapio gets
used to help define the “spec” that all lightning protocols should implement.
Then it’d be theoretically possible to use Sapio for a channel implementation!
Or maybe Sapio becomes a “plugin engine” for negotiating channels and updates can
just be shipping some WASM.&lt;/p&gt;

&lt;h2 id=&quot;what-didnt-make-the-cut&quot;&gt;What didn’t make the cut?&lt;/h2&gt;
&lt;p&gt;Some ideas to mention, but not fully flesh out (yet?):&lt;/p&gt;

&lt;h3 id=&quot;eltoo&quot;&gt;Eltoo&lt;/h3&gt;
&lt;p&gt;So, so very much. To start CTV+CSFS can do something like Eltoo, no need for
AnyPrevout. Very neat! If we had some Eltoo primitive available, I could show you
revocation-free channels.&lt;/p&gt;

&lt;h3 id=&quot;embedded-sapio-states&quot;&gt;Embedded Sapio States&lt;/h3&gt;

&lt;p&gt;Instead of making the channel state a boring “pay X to 0, pay Y to 1”
resolution, we can actually embed all sorts of contracts inside of channels.&lt;/p&gt;

&lt;p&gt;E.g., imagine if you have a channel whereby if you contested close it your
counterparty’s funds (who is offline conceivably) go to a cold-storage vault.&lt;/p&gt;

&lt;p&gt;Or imagine if you had some sort of oracle resolved synthetic bitcoin settled
derivative contract, like a DLC, embedded inside. You could then use this to HFT
your synths!&lt;/p&gt;

&lt;p&gt;Or what if there were some new-fangled token protocol that lived inside state
transition to state transition, and you could update you and your counterparty’s
stake into those?&lt;/p&gt;

&lt;p&gt;You can really put anything you want. We’ll see in a couple days how you can
define a Channel Plugin Interface so that you can dynamically link a logic
module into a contract, rather than compiling it in.&lt;/p&gt;

&lt;h3 id=&quot;embedded-channels&quot;&gt;Embedded Channels&lt;/h3&gt;

&lt;p&gt;We saw a little bit of embedded channels. Channels embedded in congestion
control, or in payment pools. But the concept can be a lot more diverse.
Remember our Vaults and inheritence schemes? We could make the hot-wallet
payouts from those go directly into Channels with some channel operator hub.  Or
what about making channels directly out of coinjoins? Not having to pre-sign
everything really helps.  Don’t sleep on this.&lt;/p&gt;

&lt;h3 id=&quot;embedded-channel-creation-args&quot;&gt;Embedded Channel Creation Args&lt;/h3&gt;

&lt;p&gt;We said earlier that channel creation required some sort of email. But it’s also
sometimes possible to embed the channel metadata into e.g. an op_return on the
channel creation. Perhaps as an IPFS hash or something. In this case, you would
just need to scan over txs, download the relevant data, and then attempt
plugging it into WASM (heck – the WASM could just receive the txn in question
and do all the heavy lifting). If the WASM spits out a matching output/channel
address, you now have a channel you can detect automatically. This doesn’t have
to be bad for privacy if the data is encrypted somehow!&lt;/p&gt;

&lt;h2 id=&quot;how-will-this-impact-the-world&quot;&gt;How will this impact the world?&lt;/h2&gt;

&lt;p&gt;Non interactive channel creation is going to, for many users, dramatically
decrease the cost of channel opening. Firstly you can defer paying fees when you
open many channels (big news)! In fact, if the channel is long lived enough, you
may never pay fees if someone else does first! That incentive to wait is called
backpressure. It’s also going to “cut through” a lot of cases (e.g., exchange
withdraw, move from cold storage, etc) that would otherwise require 2
transactions. And channels in Payment Pools have big opportunities to leverage
cooperative actions/updates to dramatically reduce chain load in the happy-case.&lt;/p&gt;

&lt;p&gt;This is a gigantic boon not just for scalability, but also for privacy. The less
that happens on chain the better!&lt;/p&gt;

&lt;p&gt;I think it’s also likely that with non-interactive channels, one might &lt;em&gt;always&lt;/em&gt;
(as was the case with our cafe) opportunistically open channels instead of
normal payments. Removing the “counterparty online” constraint is huge. Being
able to just open it up and bet that you’ll be able to route is a big win. This
is similar to “PayJoin”, whereby you try to always coin-join transactions on all
payments for both privacy and fee savings.&lt;/p&gt;

&lt;p&gt;Tomorrow, we’ll see sort of a magnum opus of using non-interactive channels, so
stay tuned folks, that’s all for today.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:eltoo&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;CTV + CSFS can do something like Eltoo/Decker channels with a script like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTV &amp;lt;pk&amp;gt; CSFSV&lt;/code&gt;. &lt;a href=&quot;#fnref:eltoo&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:caveat&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;There are some caveats to this, but it should generally work when you’re making payments in one direction. &lt;a href=&quot;#fnref:caveat&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:microbs&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Writing 27 posts is really hard and a big crunch, so I’m permitting myself a little micro-bullshit in that I’m not actually compiling this code so it probably has some bugs and stuff, but it should “read true” for the most part. I may clean this post up in the future and make sure everything works perfectly as described. &lt;a href=&quot;#fnref:microbs&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Payment Pools / Coin Pools</title>
   <link href="/bitcoin/2021/12/10/advent-13/"/>
   <updated>2021-12-10T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/10/advent-13</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 13 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Payment Pools are a general concept for a technique to share a single UTXO among
a group. They’ve been discussed for a couple years&lt;sup id=&quot;fnref:background&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:background&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, but now that
Taproot is active are definitely more relevant! In this post we’ll go through
some really simple Payment Pool designs before turning it up a little bit :)&lt;/p&gt;

&lt;p&gt;Mechanistically, all that is required of a Payment Pool is that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It’s a single (shared) UTXO&lt;sup id=&quot;fnref:single&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:single&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Every user can get their funds out unilaterally&lt;sup id=&quot;fnref:implies&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:implies&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;A set&lt;sup id=&quot;fnref:unan&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:unan&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; of users can authorize spend the funds&lt;/li&gt;
  &lt;li&gt;Unspent funds/change stays in the pool&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;why-pool&quot;&gt;Why Pool?&lt;/h2&gt;

&lt;p&gt;Pools are really great for a number of reasons. In particular, Payment Pools are
fantastic for Scalability since they mean 1 utxo can serve many masters, and
also each txn only requires one signature to make a batched payment from a
group. Payment Pools are kinda a killer version of a coin-join where you roll
the funds from coinjoin to coinjoin automatically&lt;sup id=&quot;fnref:greg&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:greg&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;, giving you great privacy.
We’ll also see how they benefit decentralization in a couple of days.&lt;/p&gt;

&lt;h2 id=&quot;whats-the-simplest-design-that-can-satisfy-this&quot;&gt;What’s the simplest design that can satisfy this?&lt;/h2&gt;

&lt;p&gt;Imagine a coin that is either N-of-N multisig OR a transaction distributing the
coins to all users. The Sapio would look a bit like this:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimplePool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// list of all initial balances&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimplePool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Send their balances to everyone&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ejection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/// all signed the transaction!&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all_signed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                          &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;
                              &lt;span class=&quot;nf&quot;&gt;.keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                              &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                              &lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimplePool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ejection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_signed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Let’s check our list:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It’s a single UTXO – Check&lt;/li&gt;
  &lt;li&gt;Every user can get their funds out unilaterally – Check, with SimplePool::ejection&lt;/li&gt;
  &lt;li&gt;A set of users can authorize spend the funds – Check, unanimously&lt;/li&gt;
  &lt;li&gt;Unspent funds/change stay in the pool – We’ll give this a Check, just don’t sign transaction that don’t meet this contstraint.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So we’re good! This is all we need.&lt;/p&gt;

&lt;h2 id=&quot;but-is-it-really-all-we-need&quot;&gt;But is it really all we need?&lt;/h2&gt;

&lt;p&gt;It’d be nice if the Payment Pool had a little bit more structure around the
updating so that a little bit less was left to the user to do correctly.
Luckily, Sapio has tools for that. Let’s define a transition function in Sapio
that generates what we should do with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Simple::all_signed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The transition function should take a list of signed updates per participant and
generate a transaction for signing (signing the inputs helps with coordinating
not signing the incorrect transaction). Any leftover funds should be sent into a
new instance of the Payment Pool for future use.&lt;/p&gt;

&lt;p&gt;We’ll also make one more change for efficient ejections: In the version I gave
above, the unilateral ejection option exits everyone out of the pool, which
kinda sucks.&lt;/p&gt;

&lt;p&gt;However, we will ‘hybridize’ the payment pool with the tree payment.  Then, you
would have “hierarchical” pools whereby splitting would keep pools alive. E.g.,
if you had 30 people in a pool with a splitting radix of 2, 1 person
force-ejecting themselves would create something like 1 pool of size 15, 1 pool
of size 7, 1 pool of size 4, 1 pool of size 2, and 2 ejected people. They can
always re-join a pool again after!&lt;/p&gt;

&lt;p&gt;First, we’ll define the basic Pool data and interface:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;#[derive(Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NextTxPool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// map of all initial balances as PK to BTC&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BTreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountF64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The current sequence number (for authenticating state updates)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// If to require signatures or not (debugging, should be true)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sig_needed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NextTxPool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ejection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoTx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we’ll define the logic for ejecting from the pool:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NextTxPool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Sum Up all the balances&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.fold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Only compile an ejection if the pool has other users in it, otherwise&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// it's base case.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[compile_if]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;has_eject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;ConditionalCompileType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Required&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;ConditionalCompileType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Never&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Split the pool in two -- users can eject multiple times to fully eject.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then(compile_if&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::has_eject]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ejection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// find the middle&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.nth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;must be present&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NextTxPool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pool_one&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool_two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NextTxPool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// removes the back half including key&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool_one&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.split_off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sig_needed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sig_needed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt_one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool_one&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt_two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool_two&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, we’ll define some data types for instructing the pool to update:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// Payment Request&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PaymentRequest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Signature&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// hex encoded signature of the fee, sequence number, and payments&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hex_der_sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountF64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BTreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountF64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// New Update message for generating a transaction from.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoTx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Payments&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// A mapping of public key in members to signed list of payouts with a fee rate.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PaymentRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// required...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoTx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DoTx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatefulArgumentsTrait&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoTx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// helper for rust type system issue&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default_coerce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NextTxPool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatefulArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoTx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, we’ll define the logic for actually doing the update:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NextTxPool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// all signed the transaction!&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;all_signed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// This Function will create a proposed transaction that is safe to sign&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// given a list of data from participants.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[continuation(&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::all_signed]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;coerce_args&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;default_coerce&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;web_api&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoTx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// don't allow empty updates.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.payments&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.is_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// collect members with updated balances here&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_members&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// verification context&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Secp256k1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// collect all the payments&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_payments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// for each payment...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PaymentRequest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hex_der_sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.payments&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// every from must be in the members&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
                &lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.ok_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.fold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// check for no underflow&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_balance&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// updates the balance or remove if empty&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_balance&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;new_members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_balance&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;new_members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;c&quot;&gt;// collect all the payment&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;spent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;all_payments&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Payment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// Check the signature for this request&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// came from this user&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sig_needed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hasher&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sequence&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_le_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hasher&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_le_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;hasher&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_le_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;hasher&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.script_pubkey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Correct Size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;FromHex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex_der_sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.map_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_der&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.map_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secp&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.map_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Send any leftover funds to a new pool&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NextTxPool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sig_needed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sig_needed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// We'll use the contract from our last post to make the state&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// transitions more efficient!&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Think about what else could be fun here though...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreePay&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;participants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;radix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it’s pretty neat – rather than “exercise for the reader”, we can have Sapio
generate payment pool updates for us. And exiting from the pool is very
efficient and keeps most users online. But speaking of exercises for the reader,
try thinking through these extensions&lt;sup id=&quot;fnref:try&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:try&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;…&lt;/p&gt;

&lt;h4 id=&quot;no-code-payout-to-where&quot;&gt;No Code: Payout to where?&lt;/h4&gt;

&lt;p&gt;Payouts in this version are defined as being to an address.&lt;/p&gt;

&lt;p&gt;How creative can we get with that? What if the payment request is 1 BTC to
address X and we generated X as a 1 BTC expecting Vault in Sapio?&lt;/p&gt;

&lt;p&gt;What else cool can we do?&lt;/p&gt;

&lt;h4 id=&quot;cut-through&quot;&gt;Cut-through&lt;/h4&gt;

&lt;p&gt;We could make our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DoTx&lt;/code&gt; differentiate between internal and external payouts. An
internal payout would allow for adding a new key OR for increasing the balance
of an existing key &lt;em&gt;before&lt;/em&gt; other payments are processed. E.g., suppose we have
Alice with 1 BTC and Bob with 2, under the code above Alice sending 0.5 to Bob
and Bob sending 2.1 to Carol externally would fail and would remove funds from
the pool. If we want to keep funds in the pool, we can do that! And if we want
the balance from new internal transfers, could process before any deductions.&lt;/p&gt;

&lt;p&gt;Internal tranfers to multiple addresses per user can also be used to improve
privacy!&lt;/p&gt;

&lt;h4 id=&quot;adding-inputs&quot;&gt;Adding Inputs&lt;/h4&gt;

&lt;p&gt;It should also be possible to have external inputs add balance to the pool
during any state update.&lt;/p&gt;

&lt;h4 id=&quot;fees&quot;&gt;Fees?&lt;/h4&gt;

&lt;p&gt;I basically glance over fees in this presentation… But there is more work to
be done to control and process fees fairly!&lt;/p&gt;

&lt;h4 id=&quot;cold-er-ejections&quot;&gt;Cold-er Ejections&lt;/h4&gt;

&lt;p&gt;If you get kicked out of a pool because you went offline, might you be able to
specify – per user – some sort of vault program for the evicted coins to go into?&lt;/p&gt;

&lt;h4 id=&quot;howdy-partner&quot;&gt;Howdy Partner&lt;/h4&gt;

&lt;p&gt;Who is next to whom is actually kinda relevant for a Pool with Efficient Ejections.&lt;/p&gt;

&lt;p&gt;For example, if the pool splits because of an undersea cable breaking off France
and Britain, dividing users based on English or French would be much better than
random  because after one transaction you could have all the English and French
users split and able to communicate again.&lt;/p&gt;

&lt;p&gt;What different heuristics might you group people by? Reputation system? Amount
of funds at stake? Random? Sorted lexicographically?&lt;/p&gt;

&lt;h2 id=&quot;lets-look-at-some-pictures&quot;&gt;Let’s look at some pictures:&lt;/h2&gt;

&lt;h6 id=&quot;creating-a-pool&quot;&gt;Creating a Pool&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/payment_pool/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;pool-created&quot;&gt;Pool Created!&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/payment_pool/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;inspecting-the-root&quot;&gt;Inspecting the Root&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/payment_pool/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;entering-an-update&quot;&gt;Entering an update&lt;/h6&gt;
&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/payment_pool/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;updated-tx-graph&quot;&gt;Updated TX Graph&lt;/h6&gt;
&lt;p&gt;(had a ux bug, need to fix it before I add this :p)&lt;/p&gt;

&lt;h2 id=&quot;do-payment-pools-need-ctv&quot;&gt;Do Payment Pools Need CTV?&lt;/h2&gt;

&lt;p&gt;Not necessarily. Payment pools as shown can be done &lt;em&gt;today&lt;/em&gt;, but they require
participants to use their own emulation / pre-signing servers before depositing
funds.&lt;/p&gt;

&lt;p&gt;This might not seem bad; we already need everyone online for an update, right?
It’s truly not awful. However, many use cases of payment pool essentially
require being able to generate a payment pool without having all of the parties
online at the time of creation. E.g., imagine that your exchange matches you
with reputable payment pool counterparties when you withdraw (if you request
it). We’ll see the need concretely in a future post.&lt;/p&gt;

&lt;h2 id=&quot;what-about-the-taproots&quot;&gt;What about the Taproots&lt;/h2&gt;

&lt;p&gt;Unfortunately, rust-bitcoin/miniscript work on Taproot is still ongoing, so I
can’t show you how cool Taproot is for this. But essentially, our
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Self::all_signed&lt;/code&gt; clauses become just a single key! And they can be
non-interactively generated at every level for the tree-ejection version. This is
great! It will work pretty much automatically without changing the user-code once
the compiler supports taproot. Huge boon for privacy and efficiency!&lt;/p&gt;

&lt;h2 id=&quot;contrast-this-vs&quot;&gt;Contrast this V.S….&lt;/h2&gt;
&lt;p&gt;As noted&lt;sup id=&quot;fnref:background:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:background&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, there are some other proposals out there.&lt;/p&gt;

&lt;p&gt;It’s the author’s opinion that Sapio + CTV are the best form of payment pool
compared to alternatives for both scalability and privacy. To fully understand
why is a lot more technical than this already technical post (beleive it or not).&lt;/p&gt;

&lt;p&gt;If you want to get into it,
you can see my accounting for costs on the mailing list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019424.html&quot;&gt;TLUV v CTV&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017968.html&quot;&gt;CoinPool v CTV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It boils down to a few things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cheaper&lt;/li&gt;
  &lt;li&gt;Simpler&lt;/li&gt;
  &lt;li&gt;More Composable&lt;/li&gt;
  &lt;li&gt;Better Privacy&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;In posts coming soon we’ll get a heck’n lot more creative with what goes inside
a payment pool, including lightning, mining pools, and “daos”! But that’s all
for today.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:background&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Credit is boring, but I presented the ideas for them originally at SF Bitdevs in May 2019, and Greg Maxwell followed up on the concept more thoroughly in &lt;a href=&quot;https://freenode.irclog.whitequark.org/bitcoin-wizards/2019-05-21#24639752&quot;&gt;#bitcoin-wizards&lt;/a&gt; afterwards. &lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017964.html&quot;&gt;Gleb and Antoine&lt;/a&gt; have also been thinking about it recently (under the name Coin Pools – to be honest we’ll have to duke it out since I like the name Coin Pools better than Payment Pool so unclear if it’s going to be like “payment channels” for a variety of designs or “the lightning network”…), as well as AJ/Greg with &lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019419.html&quot;&gt;TLUV&lt;/a&gt;. &lt;a href=&quot;#fnref:background&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:background:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:single&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Debatably, one could have a protocol where it’s a number of utxos but the core idea is that it should not be 1 user to 1 utxo. &lt;a href=&quot;#fnref:single&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:implies&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;This implies that no user can block the other users. &lt;a href=&quot;#fnref:implies&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:unan&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Usually all users, not a subset. But possible to do fewer than all. &lt;a href=&quot;#fnref:unan&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:greg&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Credit to Greg Maxwell for this description. It’s potent. &lt;a href=&quot;#fnref:greg&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:try&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;please do try! I think you can :) &lt;a href=&quot;#fnref:try&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Congestion Control</title>
   <link href="/bitcoin/2021/12/09/advent-12/"/>
   <updated>2021-12-09T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/09/advent-12</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 12 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Congestion is an ugly word, eh? When I hear it my fake synthesia triggers green
slime feeling, being stuck in traffic with broken AC, and ~the bread line~
waiting for your order at a crowded restaurant when you’re super starving. All
not good things.&lt;/p&gt;

&lt;p&gt;So Congestion Control sounds pretty sweet right? We can’t do anything about the
demand itself, but maybe we can make the experience better. We can take a mucinex,
drive in the HOV lane, and eat the emergency bar you keep in your bag.&lt;/p&gt;

&lt;p&gt;How might this be used in Bitcoin?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Exchange collects N addresses they need to pay some bitcoin&lt;/li&gt;
  &lt;li&gt;Exchange inputs into this contract&lt;/li&gt;
  &lt;li&gt;Exchanges gets a single-output transaction, which they broadcast with high fee to get quick confirmation.&lt;/li&gt;
  &lt;li&gt;Exchange distributes the redemption paths to all recipients (e.g. via mempool, email, etc).&lt;/li&gt;
  &lt;li&gt;Users verify that the funds are “locked in” with this contract.&lt;/li&gt;
  &lt;li&gt;Party&lt;/li&gt;
  &lt;li&gt;Over time, when users are willing to pay fees, they CPFP pay for their redemptions (worst case cost \(O(\log N)\))&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Throughout this post, we’ll show how to build the above logic in Sapio!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Before we get into that…&lt;/p&gt;

&lt;h1 id=&quot;talk-nerdy-to-me&quot;&gt;Talk Nerdy To Me&lt;/h1&gt;

&lt;p&gt;Let’s define some core concepts… Don’t worry too much if these are a bit hard
to get, it’s just useful context to have or think about.&lt;/p&gt;

&lt;h3 id=&quot;latency&quot;&gt;Latency&lt;/h3&gt;

&lt;p&gt;Latency is the time from some notion of “started” to “stopped”. In Bitcoin you could think of the latency from 0 confirmations on a transaction (in mempool) to 1 confirmation (in a block), which is minimally expected to be 10
minutes for high fee transactions, but could be longer depending on the other transactions.&lt;/p&gt;

&lt;h3 id=&quot;fairness&quot;&gt;Fairness&lt;/h3&gt;

&lt;p&gt;Fairness is a measure of how “equitable” a distribution of goods or services is.
For example, suppose I want to divide 10 cookies among 10 children.&lt;/p&gt;

&lt;p&gt;What if 1 child gets two cookies and the other 9 get 8/9ths of a cookie each? Or
what if 1 child gets no cookie and the other 9 get 10/9ths of a cookie each? How
fair is that?&lt;/p&gt;

&lt;p&gt;Mathematicians and computer scientists love to come up with different measures
of fairness to be able to quantatatively compare these scenarios and their
relative fairness.&lt;/p&gt;

&lt;p&gt;In Bitcoin we might think of different types of fairness: how long does your
transaction spend in the mempool? How much fee did you pay?&lt;/p&gt;

&lt;h3 id=&quot;throughput--capacity&quot;&gt;Throughput &amp;amp; Capacity&lt;/h3&gt;
&lt;p&gt;Let’s spend another moment on fairness. Perfectly fair would be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All children get 1 cookie&lt;/li&gt;
  &lt;li&gt;All children get 1/10th of 1 cookie.&lt;/li&gt;
  &lt;li&gt;All children get 0 cookies.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Clearly only one of these is particularly efficient.&lt;/p&gt;

&lt;p&gt;Thus, we don’t just want to measure fairness, we also want to measure the
throughput against the capacity. The capacity is the maximum throughput, and the
the throughput is essentially how many of those cookies get eaten (usually, over
time). Now let’s look at our prior scenarios:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All children get 1 cookie: Perfect Throughput.&lt;/li&gt;
  &lt;li&gt;All children get 1/10th of 1 cookie: 1/10th Throughtput/Capacity.&lt;/li&gt;
  &lt;li&gt;All children get 0 cookies: 0 Throughput :(&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this case it seems simple: why not just divide the cookies you big butt!&lt;/p&gt;

&lt;p&gt;Well sometimes it’s hard to coordinate the sharing of these resources. For
example, think about if the cookies had to be given out in a buffet. The first
person might just take two cookies, not aware there were other kids who wouldn’t
get one!&lt;/p&gt;

&lt;p&gt;This maps well onto the Bitcoin network. A really rich group of people might do
a bunch of relatively high fee transactions that are low importance to them and
inadvertently price out lower fee transactions that are more important to the
sender. It’s not malicious, just a consequence of having more money. So even
though Bitcoin can achieve 1MB of base transaction data every 10 minutes, that
capacity might get filled with a couple big consolidation transactions instead
of many transfers.&lt;/p&gt;

&lt;h3 id=&quot;burst--over-provisioning&quot;&gt;Burst &amp;amp; Over Provisioning&lt;/h3&gt;

&lt;p&gt;One issue that comes up in systems is that users show up randomly. How often
have you been at a restaurant with no line, you order your food, and then as
soon as you sit down the line has ten people in it? Lucky me, you think. &lt;em&gt;I
showed up at the right time!&lt;/em&gt;. But then ten minutes later the line is clear.&lt;/p&gt;

&lt;p&gt;Customers show up kind of randomly. And thus we see big bursts of activity.
Typically, in order to accomodate the bursts a restaurant must over-provision
it’s staff. They only make money when customers are there, and they need to
serve them quickly. But in between bursts, staff might just be watching grass
grow.&lt;/p&gt;

&lt;p&gt;The same is true for Bitcoin. Transactions show up somewhat unpredictably, so
ideally Bitcoin would have ample space to accomodate any burst (this isn’t
true).&lt;/p&gt;

&lt;h3 id=&quot;littles-law&quot;&gt;Little’s Law&lt;/h3&gt;

&lt;p&gt;Little’s law is a deceptively simple concept:&lt;/p&gt;

\[L = \lambda \times W\]

&lt;p&gt;where \(L = \) length of the queue, \(\lambda = \) the arrival rate and
\(W=\) the average time a customer spends in the system.&lt;/p&gt;

&lt;p&gt;What’s remarkable about it is that it makes almost no assumptions about the underlying process.&lt;/p&gt;

&lt;p&gt;This can be used to think about, e.g., a mempool.&lt;/p&gt;

&lt;p&gt;Suppose there are 10,000 transactions in the mempool, and based on historical
data we see 57 txns a minute.&lt;/p&gt;

\[\frac{10,000 \texttt{ minutes}}{57 \texttt{ transactions per minute}} = 175 \texttt{ minutes}\]

&lt;p&gt;Thus we can infer how long transactions will on average spend waiting in the
mempool, without knowing what the bursts look like! Very cool.&lt;/p&gt;

&lt;h2 id=&quot;im-just-showing-off&quot;&gt;I’m just showing off&lt;/h2&gt;

&lt;p&gt;I didn’t really need to make you read that gobbledygook, but I think they are
really useful concepts that anyone who wants to think about the impacts of
congestion &amp;amp; control techniques should keep in mind… Hopefully you learned
something!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;its-bitcoin-time&quot;&gt;It’s Bitcoin Time&lt;/h1&gt;

&lt;p&gt;Well, what’s going on in Bitcoin land? When we make a transaction there are
multiple different things going on.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We are spending coins&lt;/li&gt;
  &lt;li&gt;We are creating new coins&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Currently, those two steps occur simultaneously. Think of our cookies. Imagine
if we let one kid get cookies at a time, and they also have to get their milk at
the same time. Then we let the next kid go. It’s going to take&lt;/p&gt;

\[T_{milk} + T_{cookies}\]

&lt;p&gt;To get everyone served. What if instead we said kids could get one and then the
other, in separate lines.&lt;/p&gt;

&lt;p&gt;Now it will take something closer to \(\max(T_{milk}, T_{cookies})\).&lt;sup id=&quot;fnref:simpl&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:simpl&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
Whichever process is longer will dominate the time. (Probably milk).&lt;/p&gt;

&lt;p&gt;Now imagine that getting a cookie takes 1 second per child, and getting a milk
takes 30 seconds. Everyone knows that you can have a cookie and have milk after.
If children take a random amount of time – let’s say on average 3 minutes,
sometimes more, sometimes less – to eat their cookies, then we can serve 10
kids cookies in 10 seconds, making everyone happy, and then fill up the milks
while everyone is enjoying a cookie. However, if we did the opposite – got
milks and then got cookies, it would take much longer for all of the kids to
get something and you’d see chaos.&lt;/p&gt;

&lt;p&gt;Back to Bitcoin. Spending coins and creating new coins is a bit like milk and
cookies. We can make the spend correspond to distributing the cookies and
setting up the milk line. And the creating of the new coin can be more akin to
filling up milks whenever a kid wants it.&lt;/p&gt;

&lt;p&gt;What this means practically is that by unbundling spending from redeeming we can
serve a much greater number of users that if they were one aggregate product
because we are taking the “expensive part” and letting it happen later than the
“cheap part”. And if we do this cleverly, the “setting up the milk line” in the
splitting of the spend allows all receivers to know they will get their fair share later.&lt;/p&gt;

&lt;p&gt;This makes the system much higher throughput (unlimited confirmations of
transfer), lower latency to confirmation (you an see when a spend will
eventually pay you), but higher latency to coin creation in the best case,
although potentially no different than the average case, and (potentially) worse
overall throughput since we have some waste from coordinating the splitting.&lt;/p&gt;

&lt;p&gt;It also improves costs because we may be willing to pay a higher price for part
one (since it generates the confirmation) than part two.&lt;/p&gt;

&lt;h1 id=&quot;can-we-build-it&quot;&gt;Can we build it?&lt;/h1&gt;

&lt;p&gt;Let’s start with a basic example of congestion control in Sapio.&lt;/p&gt;

&lt;p&gt;First we define a payment as just being an Amount and an Address.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// A payment to a specific address&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Payment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Amount&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The amount to send in btc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountF64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Address&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The Address to send to&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we’ll define a helper called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PayThese&lt;/code&gt;, which takes a list of contracts
of some kind and pays them after an optional delay in a single transaction.&lt;/p&gt;

&lt;p&gt;You can think of this (back to our kids) as calling a group of kids at a time
(e.g., table 1, then table 2) to get their cookies.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PayThese&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;contracts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Compilable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnyRelTimeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PayThese&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Add an output for each contract&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.contracts&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bld&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// if there is a delay, add it&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.delay&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bld&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.set_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// pay some fees&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bld&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_fees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.fees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;total_to_pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.fees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.contracts&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PayThese&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;non&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, we’ll define the logic for congestion control. The basics of what is
happening is we are going to define two transactions: One which pays from A -&amp;gt;
B, and then one which is guaranteed in B’s script to pay from B -&amp;gt; {1…n}. This
splits the confirmation txn from the larger payout txn.&lt;/p&gt;

&lt;p&gt;However, we’re going to be a little more clever than that. We’ll apply this principle
recursively to create a tree.&lt;/p&gt;

&lt;p&gt;Essentially what we are going to do is to take our 10 kids and then divide them
into groups of 2 (or whatever radix). E.g.: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{1,2,3,4,5,6,7,8,9,10}&lt;/code&gt; would become
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ {1,2}, {3,4}, {5,6}, {7,8}, {9,10} }&lt;/code&gt;. The magic happens when we recursively
apply this idea, like below:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{1,2,3,4,5,6,7,8,9,10}
{ {1,2}, {3,4}, {5,6}, {7,8}, {9,10} }
{ { {1,2}, {3,4} }, { {5,6}, {7,8} }, {9,10} }
{ { {1,2}, {3,4} }, { { { 5,6}, {7,8} }, {9,10} } }
{ { { {1,2}, {3,4}}, { { {5,6}, {7,8} }, {9,10} } } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The end result of this grouping is a single group! So now we could do a
transaction to pay/give cookies to that one group, and then if we wanted 9 to
get their cookie/sats We’d only have to publish:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level 0 to: Address({ { { {1,2}, {3,4} }, { { {5,6}, {7,8} }, {9,10} } } })
level 1 to: Address({ { {5,6}, {7,8} }, {9,10} } })
level 2 to: Address({9,10})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s show that in code:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// # Tree Payment Contract&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// This contract is used to help decongest bitcoin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//// while giving users full confirmation of transfer.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreePay&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Payments&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// all of the payments needing to be sent&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;participants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Payment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Tree Branching Factor&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// the radix of the tree to build.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Optimal for users should be around 4 or&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// 5 (with CTV, not emulators).&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[serde(with&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bitcoin::util::amount::serde::as_sat&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[schemars(with&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;u64&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Fee Sats (per tx)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The amount of fees per transaction to allocate.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fee_sats_per_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Relative Timelock Backpressure&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// When enabled, exert backpressure by slowing down&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// tree expansion node by node either by time or blocks&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timelock_backpressure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnyRelTimeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreePay&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// A queue of all the payments to be made initialized with&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// all the input payments&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
                &lt;span class=&quot;py&quot;&gt;.participants&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// Convert the payments to an internal representation&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AmountRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.update_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Compilable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                        &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.address&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
                &lt;span class=&quot;py&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VecDeque&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Compilable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// take out a group of size `radix` payments&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.drain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.radix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// in this case, there's no more payments to make so bundle&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// them up into a final transaction&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timelock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.timelock_backpressure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.set_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timelock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_fees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.fee_sats_per_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// There are still more, so make this group and add it to&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// the back of the queue&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PayThese&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;contracts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;fees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.fee_sats_per_tx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.timelock_backpressure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.total_to_pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreePay&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;non&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now what does that look like when we send to it? Let’s do a TreePay with 14 recipients and radix 4:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/tree_pay.png&quot; alt=&quot;sapio studio view of treepay&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the queuing puts some structure into a batched payment! This is
(roughly) the exact same code as above generating these transactions. What this
also means is given an output and a description of the arguments passed to the
contract, anyone can re-generate the expansion transactions and verify that they
can eventually receive their money! These payout proofs can also be delivered in
a pruned form, but that’s just a bonus.&lt;/p&gt;

&lt;p&gt;Everyone gets their cookie (confirmation of transfer) immediately, and knows
they can get their milk (spendability) later. A smart wallet could manage your
liquidity over pedning redemptions, so you could passively expand outputs
whenever fees are cheap.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;There are &lt;strong&gt;a lot&lt;/strong&gt; of extensions to this basic design, and we’ll see two really
exciting ones tomorrow and the next day!&lt;/p&gt;

&lt;p&gt;If you want to read more about the impact of congestion control on the network,
I previously wrote two articles simulating the impact of congestion control on
the network which you can read here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://utxos.org/analysis/bip_simulation/&quot;&gt;Congestion Simulation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://utxos.org/analysis/batching_sim/&quot;&gt;Batching Simulation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What’s great about this is that not only do we make a big benefit for anyone who
wants to use it, we show in the Batching Simulation that even with the overheads
of a TreePay, the incentive compatible behavior around exchange batching can
actually help us use less block space overall.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:simpl&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Simplifying here – I know Amdahl’s Law… &lt;a href=&quot;#fnref:simpl&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Inheritence Schemes for Bitcoin</title>
   <link href="/bitcoin/2021/12/08/advent-11/"/>
   <updated>2021-12-08T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/08/advent-11</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 11 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;you-are-going-to-die&quot;&gt;You are going to die.&lt;/h2&gt;

&lt;p&gt;Merry Christmas! Hopefully not any time soon, but one of these days you will shuffle off this mortal coil.&lt;/p&gt;

&lt;p&gt;When that day comes, how will you give your loved ones your hard earned bitcoin?&lt;/p&gt;

&lt;p&gt;You do have a plan, right?&lt;/p&gt;

&lt;p&gt;This post is a continuation of the last post on Vaults. Whereas Vaults focus on trying to keep your coins away from someone, Inheritance focuses on making sure someone does get your coins. Basically opposites!&lt;/p&gt;

&lt;h2 id=&quot;basic-bitcoin-plans&quot;&gt;Basic Bitcoin Plans&lt;/h2&gt;

&lt;p&gt;Let’s say you’re a smarty pants and you set the following system up:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(2-of-3 Multisig of my keys) OR (After 1 year, 3-of-5 Multisig of my 4 family members keys and 1 lawyer to tie break)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Under this setup, you can spend your funds secured by a multisig. You have to
spend them once a year to keep your greedy family away, but that’s OK.&lt;/p&gt;

&lt;p&gt;Until one day, you perish in a boating accident (shouldn’t have gone to that Flamin’ Hot Cheetos Yach Party in Miami).&lt;/p&gt;

&lt;p&gt;A year goes by, no one knows where your 2-of-3 keys are, and so the family’s
backup keys go online.&lt;/p&gt;

&lt;p&gt;They raid your files and find a utxoset backup with descriptors and know how to
combine their keys (that you made for them most likely…) with offline signing
devices to sign a PSBT, and the money comes out.&lt;/p&gt;

&lt;p&gt;If the family can’t agree, a Lawyer who has your will can tie break the execution.&lt;/p&gt;

&lt;p&gt;Except wait…&lt;/p&gt;

&lt;h2 id=&quot;your-kids-are-assholes-just-like-your-spouse&quot;&gt;Your kids are assholes, just like your spouse&lt;/h2&gt;

&lt;p&gt;So your piece of shit husband/wife doesn’t think the kids should get anything (RIP
college fund), so count them out on signing the tuition payments.&lt;/p&gt;

&lt;p&gt;Now we’re down to your 3 kids agreeing and your 1 lawyer.&lt;/p&gt;

&lt;p&gt;Your Lawyer thinks your spouse has a bit of a case, so the whole things in
probate as far as they are concerned.&lt;/p&gt;

&lt;p&gt;And the kids? Well, the kids don’t want to go to college. You just gifted them
42069 sats each, enough to pay for a ticket on Elon Musk’s spaceship. So they
get together one night, withdraw all the money, and go to Mars. Or the Casino.
Little Jimmy has never seen so much money, so he goes to Vegas for a last huzzah
before the Mars trip, but he blows it all. So Jimmy stays behind, satless, and
the other kids go to mars.&lt;/p&gt;

&lt;h2 id=&quot;well-that-sucked&quot;&gt;Well That Sucked&lt;/h2&gt;

&lt;p&gt;And it didn’t have to! What if you could express your last will and testament in
Bitcoin transactions instead of in messy messy multisigs. You Can! Today! No new
features required (although they’d sure be nice…).&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;building-inheritence-schemes-with-sapio&quot;&gt;Building Inheritence Schemes with Sapio&lt;/h1&gt;

&lt;p&gt;You can make inheritence schemes with Sapio! While it does benefit from having
CTV enabled for various reasons, technically it can work decently without CTV by
pre-signing transactions with a CTV emulator.&lt;/p&gt;

&lt;p&gt;Here we’ll develop some interesting primitives that can be used to make various
inheritence guarantees.&lt;/p&gt;

&lt;h2 id=&quot;making-a-better-dead-man-switch&quot;&gt;Making a better Dead Man Switch&lt;/h2&gt;

&lt;p&gt;First off, let’s make a better dead man switch. Recall we had to move our funds once a year because of the timelocks.&lt;/p&gt;

&lt;p&gt;That was dumb.&lt;/p&gt;

&lt;p&gt;Instead, let’s make a challenge of liveness! (again, deep apologies on these
examples, I’m a bit behind on the series so haven’t checked as closely as I
would usually…)&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// Opening state of a DeadManSwitch&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Alive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Key needed to claim I'm dead&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;is_dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// If someone says i'm dead but I'm alive, backup wallet address&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;is_live&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// My normal spending key (note: could be a Clause instead...)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// How long you have to claim you're not dead&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RelTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Addresses for CPFP Anchor Outputs&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;is_dead_cpfp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;is_live_cpfp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Alive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_dead_sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.is_dead&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// only allow the is_dead key to transition to a CheckIfDead &lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then(guarded_by=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[Self::is_dead_sig]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;am_i_dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// Send all but some dust to CheckIfDead&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CheckIfDead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// used for CPFP&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.is_dead_cpfp&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Allow spending like normal&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Alive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;am_i_dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// All the info we need is in Alive struct already...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CheckIfDead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CheckIfDead&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// we're dead after the timeout and is_dead key signs to take the money&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.is_dead&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.timeout&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/// signature required for liveness claim&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alive_auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// um excuse me i'm actually alive&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then(guarded_by=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[Self::alive_auth]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;im_alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;/// Send funds to the backup address!&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.is_live&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;/// Dust for CPFP-ing&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.is_live_cpfp&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CheckIfDead&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im_alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, the funds start in a state of Alive, until a challenger calls
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alive::am_i_dead&lt;/code&gt; or the original owner spends the coin. After the call of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alive::am_i_dead&lt;/code&gt;, the contract transitions to CheckIfDead state. From this state,
the owner has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timeout&lt;/code&gt; (either time or blocks) time to move the coin to their
key, or else the claimer of the death can spend using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheckIfDead::is_dead&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course, we can clean up this contract in various ways (e.g., making the
destination if dead generic). That could look something like this:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Alive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;is_dead_cpfp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;is_live_cpfp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// note that this permits composing Alive with some arbitrary function&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;is_dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpfp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TxTmplIt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;is_live&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RelTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CheckIfDead&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.is_dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.is_dead_cpfp&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This kind of dead man switch is much more reliable than having slowly eroding
timelocks since it doesn’t require regular transaction refreshing, which was the
source of &lt;a href=&quot;https://medium.com/blockstream/patching-the-liquid-timelock-issue-b4b2f5f9a973&quot;&gt;a bug in Blockstream’s federation
code&lt;/a&gt;.
It also requires an explicit action to claim a lack of liveness, which also
gives information about the trustworthiness of your kids (or any exploits of
their signers).&lt;/p&gt;

&lt;h2 id=&quot;not-so-fast&quot;&gt;Not so fast&lt;/h2&gt;

&lt;p&gt;What if we want to make sure that little Jimmy and his gambling addiction don’t
blow it all at once… Maybe if instead of giving Jimmy one big lump sum, we
could give a little bit every month. Then maybe he’d be better off! This is
basically an Annuity contract.&lt;/p&gt;

&lt;p&gt;Now let’s have a look at an annuity contract.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Annuity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyRelTime&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIN_PAYOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Annuity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;claim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Basically, while there are funds left this contract recurses to itself,&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// until there's only a little bit left over.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// No need for CPFP since we can spend from the `to` output for CPFP.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIN_PAYOUT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.set_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.period&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.set_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.period&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// nothing left to claim&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could instead “transpose” an annuity into a non-serialized form. This would
basically be a big transaction that has N outputs with locktimes on claiming
each. However this has a few drawbacks:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Claims are non-serialized, which means that relative timelocks can only last
at most 2 years. Therefore only absolute timelocks may be used.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You might want to make it possible for another entity to counterclaim Jimmy’s
funds back, perhaps if he also died (talk about bad luck). In the transposed version, you would need to make N proof-of-life challenges v.s. just one&lt;sup id=&quot;fnref:recursion&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:recursion&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You would have to pay more fees all at once (although less fees overall if feerates increase or stay flat).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s less extensible – for example, it would be possible to do a lot of cool
things with serialization of payouts (e.g., allowing oracles to inflation adjust
payout rate).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;splits&quot;&gt;Splits&lt;/h2&gt;

&lt;p&gt;Remember our annoying spouse, bad lawyer, etc? Well, instead of giving them a multisig, imagine
we use the split function as the end output from our CheckIfDead:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpfp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TxTmplIt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dust&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpfp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
       &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;from_somewhere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spouse_annuity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
       &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;from_somewhere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kids_annuity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
       &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;from_somewhere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kids_annuity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
       &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;from_somewhere&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kids_annuity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
       &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This way we don’t rely on any pesky disagreement over what to sign, the funds
are split exactly how we like.&lt;/p&gt;

&lt;h2 id=&quot;oracles-and-lawyers&quot;&gt;Oracles and Lawyers&lt;/h2&gt;

&lt;p&gt;Lastly, it is possible to bake into these contracts all sorts of
conditionallity.&lt;/p&gt;

&lt;p&gt;For example, imagine an Annuity that only makes payouts if a University
Attendance Validator signs your tuition payment, otherwise you get the coins on
your 25th Birthday.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tuition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// keep this key secret from the school&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;enrolled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;school&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyRelTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;birthday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbsTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIN_PAYOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tuition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enrolled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.enrolled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then(guarded_by=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[Self::enrolled]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;claim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIN_PAYOUT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// send money to school&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.enrolled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.set_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.period&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// give the change to child&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.set_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.period&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.birthday&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The oracle can’t really steal funds here – they can only sign the already
agreed on txn and get the tuition payment to the “school” network. And on the
specified Birthday, if not used for tuition, the funds go to the child directly.&lt;/p&gt;

&lt;h1 id=&quot;where-do-these-live&quot;&gt;Where do these live?&lt;/h1&gt;

&lt;p&gt;In theory what you’d end up doing is attaching these to every coin in you wallet
under a dead-man switch.&lt;/p&gt;

&lt;p&gt;Ideally, you’d put enough under your main “structured” splits that you’re not
moving all to often and then you would have the rest go into less structured
stuff.  E.g., the college fund coins you might touch less frequently than the
coins for general annuity. You can also sequence some things using absolute
timelocks, for example.&lt;/p&gt;

&lt;p&gt;In an ideal world you would have a wallet agent that is aware of all your UTXOs
and your will and testament state and makes sure to regenerate the correct
conditions whenever you spend and then store them durably, but that’s a bit
futuristic for the time being.  With CTV the story is a bit better, as for many
designs you could distribute a WASM bundle for your wallet to your family and
they could use that to generate all the transactions given an output, without
needing to have every presigned transaction saved.&lt;/p&gt;

&lt;p&gt;This does demonstrate a relative strength for the account model, it’s much
easier to keep all your funds in once account and write globally correct
inheritence vault logic around it for all your funds, computed across
percentages. No matter the UTXO model covenant, that someone might have multiple
UTXOs poses an inherent challenge in doing this kind of stuff properly.&lt;/p&gt;

&lt;h1 id=&quot;what-else&quot;&gt;What else?&lt;/h1&gt;

&lt;p&gt;Well, this is just a small sampling of things you could do. Part of the power of
Sapio is that I hope you’re feeling inspired to make your own bespoke
inhertience scheme in it! No one size fits all, ever, but perhaps with the power
of Sapio available to the world we’ll see a lot more experimentation with what’s
possible.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Till next time – Jeremy.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:recursion&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Note this is a case where unrolling can be used, but the contract sizes can blow up kinda quick, so careful programming might be needed or you might need to say that it can only be claimed that Jimmy is dead once or twice before he just gets all the money. Recursive covenants would not nescessarily have this issue. &lt;a href=&quot;#fnref:recursion&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Building Vaults on Bitcoin</title>
   <link href="/bitcoin/2021/12/07/advent-10/"/>
   <updated>2021-12-07T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/07/advent-10</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 10 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A “Vault” is a general concept for a way of protecting Bitcoin from theft
through a cold-storage smart contract. While there is not formal definition of
what is and is not a Vault, generally a Vault has more structure around a
withdrawal than just a multisig.&lt;/p&gt;

&lt;p&gt;One of the earlier
&lt;a href=&quot;https://hackingdistributed.com/2016/02/26/how-to-implement-secure-bitcoin-vaults/&quot;&gt;references&lt;/a&gt;
for Vaults was a design whereby every time you request to withdraw from it you
can “reset” the request within a time limit.  This means that while an attacker
might steal your keys, you can “fight” to make it a negative sum game – e.g.,
they’ll just keep on paying fees to eventually steal an amount less than they
paid. This might serve to disincentivize hacking exchanges if hackers are less
likely to actually get coins.&lt;/p&gt;

&lt;p&gt;Similar Vaults can be built using Sapio, but the logic for them involves
unrolling the contract a predefined number of steps. This isn’t bad because if
the period of timeout is 1 week then just unrolling 5,200 times gets you one
thousand years of hacking disincentive.&lt;/p&gt;

&lt;p&gt;The contract for that might look something like this in Sapio (&lt;em&gt;note: I was
running behind on this post so I may make modifications to make these examples
better later&lt;/em&gt;):&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VaultOne&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Key that will authorize:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// 1) Recursing with the vault&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// 2) Spending from the vault after not moved for a period&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// How long should the vault live for&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VaultOne&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Checks if steps are remaining&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[compile_if]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;not_out_of_steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;ConditionalCompileType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Never&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;ConditionalCompileType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoConstraint&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/// Recurses the vault if authorized&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then(compile_if&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::not_out_of_steps]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::authorize]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VaultOne&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// For Paying fees via CPFP. Note that we should totally definitely&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// get rid of the dust limit for contracts like this, or enable&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// IUTXOS with 0 Value&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Allow spending after a week long delay&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;RelTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;try_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Binds the logic to the Contract&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VaultOne&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But we can also build much more sophisticated Vaults that do more. Suppose we
want to have a vault where once a week you can claim a trickle of bitcoin into a
hot wallet, or you can send it back to a cold storage key. This is a “structured
liquidity vault” that gives you time-release Bitcoin. Let’s check out some code
and talk about it more:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;#[derive(Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VaultTwo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Key just for authorizing steps&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authorize_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;amount_per_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Hot wallet key&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hot_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Cold wallet key&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cold_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VaultTwo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[compile_if]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;not_out_of_steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;ConditionalCompileType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Never&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;ConditionalCompileType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoConstraint&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authorized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.authorize_key&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then(compile_if&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::not_out_of_steps]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::authorized]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Creates a recursive vault with one fewer steps&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VaultTwo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// send to the new vault&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount_per_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// withdraw some to hot storage&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount_per_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.hot_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// For Paying fees via CPFP. Note that we should totally definitely&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// get rid of the dust limit for contracts like this, or enable&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// IUTXOS with 0 Value&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.authorize_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// restrict that we have to wait a week&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.set_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;RelTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;try_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// allow sending the remaining funds into cold storage&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then(compile_if&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::not_out_of_steps]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::authorized]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;terminate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// send the remaining funds to cold storage&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.amount_per_step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.steps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.cold_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// For Paying fees via CPFP. Note that we should totally definitely&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// get rid of the dust limit for contracts like this, or enable&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// IUTXOS with 0 Value&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.authorize_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VaultTwo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This type of Vault is particularly interesting for e.g., withdrawing from an
exchange business.  Imagine a user, Elsa who wants to have a great cold storage
system. So Elsa sets up a xpub key and puts it on ice. She then generates a new
address, and requests that the exchange let the funds go to it. Later that
month, Elsa wants to buy a coffee with her Bitcoin so she has to thaw out her
cold storage to spend (maybe using a offline PSBT signing), and transfer the
funds to her destination or to a hot wallet if she wants a bit of extra pocket
money. Instead suppose Elsa sets up a timerelease vault. Then, she can set up
her cold vault and automatically be able to claim 1 Bitcoin a month out of it,
or if she notices some coins missing from her hot wallet redirect the funds
solely under her ice castle.&lt;/p&gt;

&lt;p&gt;This has many benefits for an average user. One is that you can invest in your
cold storage of keys &lt;em&gt;once&lt;/em&gt; in your life and only have to access it in
unexpected circumstance. This means that: users might elect to use something
more secure/inconvenient to access (e.g. strongly geo-sharded); that they won’t
reveal access patterns by visiting their key storage facility; and that they
don’t need to expose themselves to recurring fat-finger&lt;sup id=&quot;fnref:fat&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:fat&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; risk.&lt;/p&gt;

&lt;h2 id=&quot;getting-a-little-more-advanced&quot;&gt;Getting a little more advanced&lt;/h2&gt;

&lt;p&gt;What are some other things we might want to do in a vault?  Let’s do a quickfire
– we won’t code these here, but you’ll see examples of these techniques in
posts to come:&lt;/p&gt;

&lt;h3 id=&quot;send-a-percentage-not-a-fixed-amount&quot;&gt;Send a percentage, not a fixed amount&lt;/h3&gt;

&lt;p&gt;Let the contract know the intended amount, and then compute the withdrawals as
percentages in the program.&lt;/p&gt;

&lt;h3 id=&quot;non-key-destinations&quot;&gt;Non-Key Destinations&lt;/h3&gt;
&lt;p&gt;In the examples above, we use keys for hot wallet, cold wallet, and authorizations.&lt;/p&gt;

&lt;p&gt;However, we could very well use other programs! For example, imagine a
time-release vault that goes into a anti-theft locker.&lt;/p&gt;

&lt;h3 id=&quot;change-hot-wallet-every-step&quot;&gt;Change Hot Wallet Every Step&lt;/h3&gt;

&lt;p&gt;This one is pretty simple – if you have N steps just provide a list of N
different destinations and use the i-th one as you go!&lt;/p&gt;

&lt;h3 id=&quot;topping-up&quot;&gt;Topping up:&lt;/h3&gt;

&lt;p&gt;There are advanced techniques that can be used to allow depositing &lt;em&gt;into&lt;/em&gt; a
vault after it has been created (i.e., topping up), but that’s too advanced to
go into detail today. For those inclined, a small hint: make the “top up” vault
consume an output from the previous vault, CTV commits to the script so you can
use a salted P2SH out.&lt;/p&gt;

&lt;h2 id=&quot;even-more-advanced&quot;&gt;Even more advanced&lt;/h2&gt;

&lt;p&gt;What if we want to ensure that after a withdraw funds are re-inserted into the Vault?&lt;/p&gt;

&lt;p&gt;We’ll ditch the recursion (for now), and just look at some basic logic. Imagine
a coin is held by a cold storage key, and we want to use Sapio to generate a transaction
that withdraws funds to an address and sends the rest back into cold storage.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VaultThree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// Special struct for passing arguments to a created contract&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Withdrawal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;Send&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitcoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Nothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// required...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Withdrawal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Withdrawal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Nothing&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatefulArgumentsTrait&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Withdrawal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// helper for rust type system issue&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default_coerce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VaultThree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatefulArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Withdrawal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VaultThree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;signed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[continuation(guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::signed]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;coerce_args&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;default_coerce&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withdraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Withdrawal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Withdrawal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Send&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// send the rest recursively to this contract&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// process the withdrawal&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Compiled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// mark fees as spent&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.spend_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VaultThree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Withdrawal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withdraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we’ve seen how updatable continuation clauses can be used to dynamically
pass arguments to a Sapio contract and let the module figure out what the next
transactions should be, managing recursive and non-enumerated state transitions
(albeit with a trust model).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;That’s probably enough for today, before I make your head explode. We’ll see more examples soon!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:fat&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Sending the wrong amount because you click the wrong key with your too-large hands. &lt;a href=&quot;#fnref:fat&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Sapio Primer</title>
   <link href="/bitcoin/2021/12/06/advent-9/"/>
   <updated>2021-12-06T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/06/advent-9</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 9 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We’re through the basics sections of the Advent calendar ow! Time for some more…
specific content on the bleeding edge!&lt;/p&gt;

&lt;p&gt;This post is your introduction to the world of
&lt;a href=&quot;https://learn.sapio-lang.org&quot;&gt;Sapio&lt;/a&gt;. Sapio is the programming framework I’ve
been developing for Bitcoin Smart Contracts. There’s a &lt;em&gt;ton&lt;/em&gt; of material on &lt;a href=&quot;https://learn.sapio-lang.org&quot;&gt;the
website&lt;/a&gt;, so this post is going to be a bit
high-level and then you should jump into the docs after to learn more.&lt;/p&gt;

&lt;h2 id=&quot;what-the-heck-is-sapio&quot;&gt;What the heck is Sapio?&lt;/h2&gt;

&lt;p&gt;Sapio is a tool that helps you design and use Bitcoin smart contracts based on
covenants (like CTV) as well as manage potentially recursive state transitions
at terminal states.&lt;/p&gt;

&lt;p&gt;That’s a mouthful and a half… let’s break it down with a very basic vault
deposit example.&lt;/p&gt;

&lt;p&gt;Suppose I have 10 bitcoin sitting in my normal wallet.  I want to deposit it to
an exchange. I go to my exchange and request an address to deposit to. The
exchange wants their coins to be in a special cold storage whereby any move from
cold storage has to “mature” for 10 days since it was claimed before it’s
spendable as a hot-spend, otherwise it stays in cold.  The hot wallet has logic
such that any unused funds after it transacts, goes back into the cold-storage
contract. We saw a contract like this in the  &lt;a href=&quot;/bitcoin/2021/12/04/advent-7/&quot;&gt;day
7&lt;/a&gt; post.&lt;/p&gt;

&lt;p&gt;The exchange can use Sapio to generate an address that expects 10 coins and
encodes this cold-to-hot logic without requiring the cold keys be online! Better
than that, I don’t even have to contact the exchange for the address. The
exchange can distribute a codesigned Sapio WASM applet that runs on my own
machine locally. I download the applet into my Sapio Studio GUI and that
generates the exchange deposit UX form for the contract that I (or my wallet)
automatically fills out and then generates a proper address/spending
transaction.&lt;/p&gt;

&lt;p&gt;Upon receipt of the deposit information, (which can in certain circumstances be
completely on-chain in the txn, so no need for a separate communication
channel), the exchange can us the WASM to generate an identical deposit program
to verify the user isn’t cheating somehow. &lt;strong&gt;Bada-bing-bada-boom!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We’ll see in close detail examples like this coming in the following posts, but
to sum up, Sapio helped us with the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Authoring a Smart Contract Application for a cold storage deposit solution&lt;/li&gt;
  &lt;li&gt;Distributing it as a deterministic executable with a GUI User using it to make a
deposit&lt;/li&gt;
  &lt;li&gt;Receiving funds as a depositee directly into a smart contract&lt;/li&gt;
  &lt;li&gt;Generating withdrawal transactions out of the vault&lt;/li&gt;
  &lt;li&gt;Putting the remaining funds back into the cold storage&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is not a hypothetical, all of these components exist and are usable today!
Where there is an asterisk is that BIP-119 CTV does not yet exist, and so for
apps like this the exchange would have to run some kind of &lt;a href=&quot;https://learn.sapio-lang.org/ch05-01-ctv-emulator.html&quot;&gt;signing
server&lt;/a&gt; you connect to.
This works, but is a worse trust model.  For some applications, you don’t need
CTV if you can get all of a contract’s parties to run their own oracles.
Therefore you can still accomplish a lot without a worse trust model with what’s
there today!&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Over the remaining posts we’ll go into great detail on different applications
built in Sapio, but for now you can &lt;a href=&quot;https://learn.sapio-lang.org&quot;&gt;skim through
learn.sapio-lang.org&lt;/a&gt; to get started playing
around with your own designs.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Contracting Primitives and Upgrades to Bitcoin</title>
   <link href="/bitcoin/2021/12/05/advent-8/"/>
   <updated>2021-12-05T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/05/advent-8</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 8 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this post we’ll rapid fire roll through a bunch of different smart contract
primitives, existing and proposed. For a more thorough reading, links will be
provided.&lt;/p&gt;

&lt;h3 id=&quot;bip-119-ctv-checktemplateverify&quot;&gt;BIP-119 CTV CheckTemplateVerify&lt;/h3&gt;

&lt;p&gt;CTV is a general purpose smart contract opcode with full enumeration, no dynamic
state, no recursion, and primarily works through validation.&lt;/p&gt;

&lt;p&gt;Essentially, CTV only lets you select a specific next transaction that can
occur. Consensus just checks a transaction hash against a CTV hash.&lt;/p&gt;

&lt;p&gt;Although this seems to be limited functionality, it can be used with a template
metaprogramming system such as &lt;a href=&quot;learn.sapio-lang.org&quot;&gt;Sapio&lt;/a&gt; to create
sophisticated programs.&lt;/p&gt;

&lt;p&gt;The limited functionality isn’t a bug, it’s a feature.  CTV was designed to be
 quick and easy to garner technical consensus with the entire Bitcoin community
 as a simple and safe covenant without some of the issues more sophisticated
 covenant systems might have. However, since its launch there’s been more
 interest developing for more flexible covenants, which may take much longer to
 deploy and deliver meaningful benefits to users.&lt;/p&gt;

&lt;p&gt;CTV is also designed to work well with other opcodes that might be added (such
as CSFS, OP_AMOUNT, and OP_CAT), so it does not become irrelevant should more
features be added, it simply gets better.&lt;/p&gt;

&lt;p&gt;CTV is currently a decently reviewed BIP pending more support from the community
for inclusion (see &lt;a href=&quot;https://utxos.org/signals&quot;&gt;social signals&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Disclosure: I’m the author/advocate of BIP-119.&lt;/p&gt;

&lt;p&gt;For more:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitcoinops.org/en/newsletters/2019/05/29/#proposed-transaction-output-commitments&quot;&gt;Optech&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://utxos.org&quot;&gt;utxos.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubin.io/blog/2021/07/02/covenants/&quot;&gt;Templates, Eltoo, and Covenants, Oh My!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/block-digest-mempool/my-worries-about-too-generalized-covenants-5eff33affbb6&quot;&gt;Shinobi’s Covenant Concerns&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;bip-118-apo-anyprevout&quot;&gt;BIP-118 APO AnyPrevout&lt;/h3&gt;

&lt;p&gt;AnyPrevout is a culmination of research for the Lightning Network (dating back
to the original whitepaper) for creating a type of “rebindable” bitcoin
transaction that dramatically simplifies the protocols for LN by getting rid of
a lot of the complexities around storing state and closing channels
unilaterally. AnyPrevout helps make Decker Channels possible (or, confusingly,
sometimes called Eltoo not to be confused with L2).&lt;/p&gt;

&lt;p&gt;The basics of how Anyprevout works is that it changes what parts a signature
signs to exclude the specifics of the coin being spent. This has some drawbacks
in terms of changing current invariants true of signatures, but it is generally
safe.&lt;/p&gt;

&lt;p&gt;APO can also be used to implement something similar to CTV, but there are
sufficient differences between the two (including with respect to efficiency)
such that the proposals aren’t competitive.&lt;/p&gt;

&lt;p&gt;APO is currently a decently reviewed BIP pending more support from the community
for inclusion. The largest blocker for wider support is a concrete functional
prototype of LN with Decker Channels, which would drive surety that APO has
“product market fit”. Certain developers believe that additional proposals, like
SIGHASH_BUNDLE, would be required to make it fully functional.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubin.io/bitcoin/2021/07/09/bip-118-sighash-chart/&quot;&gt;My BIP-118 Review&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki&quot;&gt;The BIP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blockstream.com/eltoo.pdf&quot;&gt;Eltoo/Decker Channels&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubin.io/blog/2021/07/02/covenants/&quot;&gt;Templates, Eltoo, and Covenants, Oh My!&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;tluv-tapleafupdateverify&quot;&gt;TLUV TapLeafUpdateVerify&lt;/h3&gt;

&lt;p&gt;TLUV is a proposed general purpose smart contract opcode that is open ended, has
dynamic local state, recursive, and is somewhat computational.&lt;/p&gt;

&lt;p&gt;Essentially, TLUV lets you modify a Taproot Output being spent by changing the
toplevel key and script paths being spent. TLUV only can read and affect a
single input/output pair; the other outputs are unaffected. The functionality of
TLUV is very “specific” to the implementation details of Taproot, as it must
correctly modify the data structures behind it. For Example, you could have a
Taproot output with 10 coins and a script like:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;multi(A,B,C)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signed(A) with up to 2 coins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signed(B) with up to 5 coins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signed(C) with up to 3 coins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and TLUV would enable you to transition to the following outputs:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;multi(A,B,C)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signed(A) with up to 1 coins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signed(B) with up to 5 coins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signed(C) with up to 3 coins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;someone paid by A&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;someone else paid by A&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or even a full exit:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;multi(B,C)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signed(B) with up to 5 coins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signed(C) with up to 3 coins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;someone paid by A&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;someone else paid by A&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A's key (exiting funds)&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are some potential footguns around modifying the top level key, as it
needs to be a valid Taproot key after tweaking.&lt;/p&gt;

&lt;p&gt;TLUV as designed requires some form of OP_AMOUNT to enable the
recursive shared UTXO shown above.&lt;/p&gt;

&lt;p&gt;There is no current concrete proposal (e.g. BIP) for TLUV, it’s open ended
research presently.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitcoinops.org/en/newsletters/2021/09/15/&quot;&gt;Optech&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mail-archive.com/bitcoin-dev@lists.linuxfoundation.org/msg10437.html&quot;&gt;Mailing List&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mail-archive.com/bitcoin-dev@lists.linuxfoundation.org/msg10442.html&quot;&gt;My Mailing List Response&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;csfs-checksigfromstack&quot;&gt;CSFS CheckSigFromStack&lt;/h3&gt;

&lt;p&gt;CheckSigFromStack, or CheckDataSig (note for experts: usually shorthand for the
verification-only version as there’s little point to check that something wasn’t
signed by someone) is an opcode which checks an arbitrary message was signed by
a key. Normally, when a Bitcoin script checks a signature, the message &lt;em&gt;must be&lt;/em&gt;
a hash of the current transaction computed in accordance with the requested
transaction hashing program.&lt;/p&gt;

&lt;p&gt;CSFS has a couple “basic” applications that could be useful. For example, one
might write a program where either a key K signs a transaction normally, or it
signs a key which then signs a transaction. This allows the holder of a coin to
“delegate” the ownership of a coin to another key without moving the coin.&lt;/p&gt;

&lt;p&gt;CSFS already exists in Bitcoin in some sense: using Lamport Signatures it is
currently possible to check a signature over 5 bytes of data. This is not
terribly useful, but one could imagine certain uses for e.g. delegating to the
specified signer the duration of a timelock.&lt;/p&gt;

&lt;p&gt;CSFS really shines when it is combined with other opcodes. For example, CSFS
plus CTV can enable something similar to AnyPrevout and Eltoo. CSFS plus CAT
enables fully generic covenants in segwit V0, but not in Taproot (without some
sort of OP_TWEAK as well). This is best left to reading some additional
materials on the subject, but imagine if I first check the transaction signature
normally, and then I check it on the stack against the transaction itself pushed
onto the stack, which I used CAT to assemble from pieces. This would let me run
programmatic checks on all the components of a script).&lt;/p&gt;

&lt;p&gt;While there is not currently a proposal for CSFS, it’s not terribly
controversial and the design would be relatively straightforward.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019192.html&quot;&gt;BIP Suggestions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubin.io/blog/2021/07/02/covenants/&quot;&gt;Templates, Eltoo, and Covenants, Oh My!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubin.io/blog/2021/07/02/signing-5-bytes/&quot;&gt;CSFS from Math (5 bytes)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;op_amount&quot;&gt;OP_AMOUNT&lt;/h3&gt;

&lt;p&gt;OP_AMOUNT was proposed in 2017 by Johnson Lau (the earliest citation I could dig
up) through a scripting extension called PUSHTXDATA that allows arbitrary data
to be pushed on the stack. As a standalone extensions, getting the amount
spent/created on the stack (whether as a push opcode or an opcode with verify
semantics) would allow for smart contracts to either limit the amount being
spent or switch behavior based on the amount.&lt;/p&gt;

&lt;p&gt;For example, with TLUV a Taproot branch can have an individual balance that can
be updated at the discretion of the branch holder. Suppose I had a script tree
that said Alice has 1 bitcoin and Bob has 20 Bitcoin. When Alice is spending,
the script would require that the corresponding output (e.g., input 0 output 0)
be reduced by at most 1 Bitcoin, and the output should be updated to change
Alice’s script to have 1-(spent amount) in the next instance.&lt;/p&gt;

&lt;p&gt;As another example, CTV could be used with an OP_AMOUNT to enable a ultra high
security vault if the amount sent is greater than 1 Bitcoin and a lower security
vault if it is less than 1 Bitcoin.&lt;/p&gt;

&lt;p&gt;There’s no current concrete proposal for OP_AMOUNT. Difficulties in adding it
remain because Bitcoin Scripts deal in 32-bit math and amounts are 64-bit values
(51 bits precisely).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jl2012/bips/blob/vault/bip-0ZZZ.mediawiki&quot;&gt;OP_PUSHTXDATA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mail-archive.com/bitcoin-dev@lists.linuxfoundation.org/msg10438.html&quot;&gt;OP_IN_OUT_AMOUNT&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;sighash_bundle&quot;&gt;SIGHASH_BUNDLE&lt;/h3&gt;

&lt;p&gt;Sighash Bundle is a part of an effort to make “Sighash Flags” more general.
Sighash Flags are a mini “programming language” to describe what parts of a
transaction a signer wants to sign for a transaction. Bundles in particular
allow a signer to select a range of inputs and outputs in a way that the bundle
description can be rebound to allow some form of post-hoc aggregation of
transactions.&lt;/p&gt;

&lt;p&gt;It’s primarily proposed to help make Decker Channels work with a sub-protocol
called “layered commitments”. It’s possible for inclusion, but it has the same
issue as AnyPrevout, we need to see an end-to-end implementation of LN using it
to be sure that the technology is solving the problem it is designed to.&lt;/p&gt;

&lt;p&gt;There’s no concrete implementation proposed yet.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-April/015862.html&quot;&gt;Mailing List Post&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;transaction-sponsors&quot;&gt;Transaction Sponsors&lt;/h3&gt;

&lt;p&gt;Transaction Sponsors is another proposal by yours truly.&lt;/p&gt;

&lt;p&gt;The basic concept of Transaction Sponsors is to allow expressing logic that
Transaction B should only be in a block if Transaction A is also in the block.
In particular, the proposal says that a transaction with a 0 value output with
script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OP_VER &amp;lt;txids&amp;gt;&lt;/code&gt; would make the transaction valid only if the txids were
also in the block.&lt;/p&gt;

&lt;p&gt;The ability to express such a dependency has implications for designing novel
smart contracts based on these dependencies, but this is not the focus of the
sponsors proposal with respect to mempool policy.&lt;/p&gt;

&lt;p&gt;Instead, the Sponsors proposal is to use the ability to express additional
dependencies as a way of dynamically adding fees to transactions in the mempool
without relying on CPFP or RBF. This primitive is particularly helpful for
driving progress of smart contracts based on CTV or Decker Channels without
requiring any sort of transaction malleability.&lt;/p&gt;

&lt;p&gt;There is currently an implementation and Draft BIP of Sponsors, but the BIP has
not been advanced for inclusion yet.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018168.html&quot;&gt;Mailing List Post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-November/019614.html&quot;&gt;Post about difficulties of paying fees&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;op_cat-or-shastream&quot;&gt;OP_CAT (Or SHASTREAM)&lt;/h3&gt;

&lt;p&gt;OP_CAT is “deceptively simple”. All it enables is the ability to take an
argument “hello “ and an argument “world” and join them together into “hello
world”.&lt;/p&gt;

&lt;p&gt;CAT was originally a part of Bitcoin, but it had some implementation flaws and
was removed by Satoshi in an emergency patch early on in Bitcoin’s history.&lt;/p&gt;

&lt;p&gt;Although it is simple, it turns out that the ability to join bytestrings
together adds a remarkable variety of functionality to Bitcoin, including things
like quantum proof signatures and covenants.  There are a couple different
variants of CAT that would be possible and have different tradeoffs, but largely
CAT and friends are not controversial in their design. What does make CAT
controversial is that because it has the propensity to introduce so many
surprising behaviors in Bitcoin, we might prefer to better understand the
impacts of users being able to author such advanced smart contracts.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubin.io/blog/2021/07/06/quantum-bitcoin/&quot;&gt;Quantum Proof Bitcoin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298&quot;&gt;Poelstra CAT Blog I&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/blockstream/cat-and-schnorr-tricks-ii-2f6ede3d7bb5&quot;&gt;Poelstra CAT Blog II&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;op_tweak--ecmul&quot;&gt;OP_TWEAK / ECMUL&lt;/h3&gt;

&lt;p&gt;These two opcodes enable manipulating an elliptic curve point on the stack for
use in a covenant or to compute a particular private key.&lt;/p&gt;

&lt;p&gt;There’s no concrete proposal for this pair, but the implementations are
basically specified already by the requirements of the secp256k1 curve.&lt;/p&gt;

&lt;h3 id=&quot;adaptor-signatures&quot;&gt;Adaptor Signatures&lt;/h3&gt;

&lt;p&gt;Adaptor Signatures are a technique that can be used with Schnorr signature and
do not require any additional forks to Bitcoin.&lt;/p&gt;

&lt;p&gt;The basics of an Adaptor signature is that a party (or group of parties) can
create an object which either takes in a signature and reveals a secret or takes
a secret and reveals a signature.&lt;/p&gt;

&lt;p&gt;These adaptors can be used in place of hash preimage locks for a variety of use
cases.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitcoinops.org/en/topics/adaptor-signatures/&quot;&gt;Optech&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;delegation--graftroot&quot;&gt;Delegation / Graftroot&lt;/h3&gt;

&lt;p&gt;Delegation is a general concept whereby you can take a script and instead of
signing a transaction, you sign another script that can then execute. For
example, imagine if there is a coin that requires a signature of Alice and Bob
to spend. Suppose Alice wants to go offline, but Bob might want to transact.
Alice could sign a script requiring a signature from Carol that “substitutes”
for Alice’s signature in the future.&lt;/p&gt;

&lt;p&gt;Delegation is currently possible in a somewhat roundabout way through
coin-delegation. This is where the other script fragment must be represented by a UTXO.&lt;/p&gt;

&lt;p&gt;Graftroot is an extension to Taproot which would let the top-level key-path
signers sign delegating scripts, but not other tapscript branches. There are
also several confusingly named extensions and alternatives in the links below.&lt;/p&gt;

&lt;p&gt;Delegation could also be combined with Anyprevout so that delegation
authorizations are bound to a specific coin or to a specific script. CSFS
enables a basic kind of delegation as well. This would enable, with Graftroot, a
version of Taproot where the trees are constructed interactively and do not have
any lookup cost.&lt;/p&gt;

&lt;p&gt;Other than what’s presently possible, there are no concrete proposals for adding
new delegation features to Bitcoin.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-March/018615.html&quot;&gt;Coin Delegation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-February/015700.html&quot;&gt;Graftroot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/sipa/ca1502f8465d0d5032d9dd2465f32603&quot;&gt;Entroot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-July/016249.html&quot;&gt;G’Root (not graftroot)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;bip-300-drivechains&quot;&gt;BIP-300 DriveChains&lt;/h3&gt;

&lt;p&gt;Drive chains are a highly application specific type of recursive covenant that
is designed to help sidechains operate by tracking sidechain deposits and
withdrawals with an on-chain miner driven voting system.&lt;/p&gt;

&lt;p&gt;The sidechains would have the ability to run arbitrary smart contracts (at the
choice of the sidechain operators). Miners the upvote, downvote, or abstain from
voting on withdrawals through a special output type.&lt;/p&gt;

&lt;p&gt;One of the main downsides to this approach is that the BIP-300 proposal as
written requires the addition of new global state databases, rather than local
state contained within the covenant transaction itself.&lt;/p&gt;

&lt;p&gt;Overall Drivechains are relatively controversial among the community; with lots
of interest from the community and also some outspoken critics because of the
changes to Bitcoin’s incentive stability for consensus. It’s included here for
completeness and by request of what topics to cover in today’s post.&lt;/p&gt;

&lt;p&gt;It’s the author’s opinion that while the concept of Drivechains is useful, the
implementation of it does not need to be as transactions inside of the existing block
space and instead could be tracked via a separate commitment (like Segwit). This could
happen if Drivechains were implemented via a more generliazed covenant rather than
application specific.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bitcoin/bips/blob/master/bip-0300.mediawiki&quot;&gt;BIP-300&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.drivechain.info&quot;&gt;Drivechains&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;elements-opcodes&quot;&gt;Elements Opcodes&lt;/h3&gt;

&lt;p&gt;Elements is Blockstream’s Bitcoin fork for their Liquid Sidechain. Elements has
planned to add a broad variety of opcodes that can help to accomplish a variety
of tasks, including many of the above, in addition to their existing extensions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://elementsproject.org/features/opcodes&quot;&gt;Existing Opcodes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ElementsProject/elements/blob/master/doc/tapscript_opcodes.md&quot;&gt;Upgrade for Taproot&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Breathe! That was a lot! There’s still other stuff that’s floating around, but
these are the top-of-mind primitives in my head for bringing more
programmability to Bitcoin.&lt;/p&gt;

&lt;p&gt;Future posts will zero in on what’s possible with BIP-119 and Sapio and help
make the case that it is a fantastic next step in Bitcoin’s Upgrade journey by
showing (not telling) how one little limited opcode opens up an entire world of
possibilities, as well as laying out a – dare I say – personal roadmap for the
inclusion and development of other upgrades as a coherent narrative for Bitcoin.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Review of Smart Contract Concepts for Bitcoin</title>
   <link href="/bitcoin/2021/12/04/advent-7/"/>
   <updated>2021-12-04T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/04/advent-7</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 7 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this post we’ll review a concepts for thinking about different types of smart
contract capabilities and the implications of their availability.&lt;/p&gt;

&lt;h2 id=&quot;recursive-vs-non-recursive&quot;&gt;Recursive v.s. Non Recursive&lt;/h2&gt;

&lt;p&gt;Recursive is pretty much just a fancy way of saying “loops”. This is sometimes
also called “Turing Complete”. That’s an even fancier way of saying loops. For
example, imagine a bitcoin contract with the following logic:&lt;/p&gt;

&lt;p&gt;When Alice requests moving 1 coin to Bob by broadcasting a transaction with the
request, Alice has 24 hours to completely cancel the transfer by broadcasting
another transaction.&lt;/p&gt;

&lt;p&gt;This is a looping contract because after cancelling Alice can immediately
re-request the transfer. An example of non-looping but similar logic would be:&lt;/p&gt;

&lt;p&gt;When Alice requests moving 1 coin to Bob,  Alice has 24 hours to cancel the
transfer by sending the coins to Alice’s backup key.&lt;/p&gt;

&lt;p&gt;Here, the contract terminates after one canceled request by moving the coin
elsewhere.  It’s possible to emulate recursive behavior a limited amount by
“unrolling” a loop. For example:&lt;/p&gt;

&lt;p&gt;When Alice requests moving 1 coin to Bob,  Alice has 24 hours to cancel the
transfer by sending the coins to (when Alice requests moving 1 coin to Bob, 
Alice has 24 hours to cancel the transfer by sending the coins to Alice’s backup
key).&lt;/p&gt;

&lt;p&gt;Here we substituted the backup key with a copy of the original logic. Now Alice
can make 2 cancellable requests before sending the money to the backup. This
looks recursive, and it can be expressed by a recursive meta-program. Meta
program is just a fancy term for a program that makes programs. But when we put
the contract into writing (e.g., an address on the chain), it has to be unrolled
for the specific number of iterations we want possible.&lt;/p&gt;

&lt;p&gt;Unrolling is a very useful technique, and can be used in a broad variety of
circumstances. For example, imagine we unroll a contract a million times and
specify that transactions can only happen every 10 blocks. That covers like 200
years of contract execution. However, unrolling has it’s limits. When choices
(action A or B) are introduced, unrolling can be less effective since you have
and exponential blowup (that means unrolling even like 32 steps might be too
many). However, there are some tricks that can be employed by a clever and
careful programmer to reduce this complexity through, for example, memoization.&lt;/p&gt;

&lt;h2 id=&quot;fully-enumerated-vs-open-ended&quot;&gt;Fully Enumerated v.s. Open Ended&lt;/h2&gt;

&lt;p&gt;Suppose I have a contract which is supposed to strike an American option&lt;sup id=&quot;fnref:option&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:option&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and
transfer a token. It might look like this:&lt;/p&gt;

&lt;p&gt;If Alice is paid 1 BTC by December 25th, 2021 Midnight, then transfer 100 tokens
to Bob’s Control.&lt;/p&gt;

&lt;p&gt;A fully enumerated contract would be expressed as:&lt;/p&gt;

&lt;p&gt;If Alice is paid 1 BTC by December 25th, 2021 Midnight, then transfer 100 tokens
to Bob’s Address B.&lt;/p&gt;

&lt;p&gt;Whereas an Open Ended contract would be expressed as:&lt;/p&gt;

&lt;p&gt;If Alice is paid 1 BTC by December 25th, 2021 Midnight, then transfer 100 tokens
to the address Bob requested with the payment.&lt;/p&gt;

&lt;p&gt;The key difference being that in the fully enumerated case we must know the
exact specifics of the contract and how it will execute, and in the open ended
contract case there are bits and pieces we can dynamically specify.&lt;/p&gt;

&lt;p&gt;There are ways that a fully enumerated contract can emulate dynamic choice. For
example:&lt;/p&gt;

&lt;p&gt;If Alice is paid 1 BTC by December 25th, 2021 Midnight, then transfer 100 tokens
to one of Bob’s Address B1, B2, or B3 at Bob’s discretion.&lt;/p&gt;

&lt;p&gt;Now Bob can pick from one of three destinations in the future. However, these
options must have been known in advance (a priori). With an open ended contract,
the address could be generated after the fact (post hoc).&lt;/p&gt;

&lt;p&gt;This is a separate concept from recursive or non recursive. A contract that
loops could loop through a set of fully enumerated states until reaching some
terminal predetermined “exit” state (e.g., a plain address). The option contract
described above is non-recursive, but can be open ended.&lt;/p&gt;

&lt;h2 id=&quot;client-vs-consensus-validation&quot;&gt;Client v.s. Consensus Validation&lt;/h2&gt;

&lt;p&gt;When you have a Bitcoin in an output, anyone who has run, say, Bitcoin Core can
tell that it is valid by seeing it in the UTXO set. But what happens if you want
to issue a token on top of Bitcoin with some set of unique rules? Bitcoin does
not know anything about these tokens, and so it would be possible to make an
invalid transaction (e.g., spending more value than you have). In order to
ensure the token is valid and not corrupt, one must trace every prior
transaction back to some “axiomatic” genesis transaction(s) minting the token.
These traces can be cached, but by default Bitcoin software will not enforce
that only valid transfers be made. We say that the token is Client validated
while the Bitcoin is Consensus validated.&lt;/p&gt;

&lt;p&gt;Is one worse than the other? Not necessarily. While permitting invalid
transactions in the chain seems bad, as long as the invalid transactions can be
uniformly excluded by all who care about the token it is not much worse than the
work you do to run a Bitcoin full node anyways. There does seem to be some value
in the Bitcoin network preventing you from making invalid transactions, but the
network doesn’t stop you from making bad transactions (e.g., you could send
money to the wrong place).&lt;/p&gt;

&lt;p&gt;Client side validation can check all sorts of properties, not just tokens. For
example, you could write a contract for an on-chain governed company and check
transactions for valid state transitions amending the rules.&lt;/p&gt;

&lt;p&gt;The main drawback to client side validation comes when you want your contract to
interoperate with Bitcoin values. While client side validation can burn tokens
that are transferred invalidly, imagine an exchange contract that swaps Bitcoin
for Token. If the exchange contract sends more Bitcoin than it should, the
clients can tell that it was an invalid transaction but the Bitcoin is still
gone. Thus Client validated contracts are best left to things that don’t hold
Bitcoin. The exception to this rule is if the Client validated contracts admit a
custodian, a special monitor or set of monitors that handle the contracts
Bitcoin balances in e.g. a multisig. The monitors can client-side validate the
contracts and sign off on any balance transfers. The drawback to this approach
is trust, but in certain applications that we’ll see later the monitor could be
all of the participants themselves, which makes the application of the rules
trustless.&lt;/p&gt;

&lt;h2 id=&quot;validation-vs-computation&quot;&gt;Validation v.s. Computation&lt;/h2&gt;

&lt;p&gt;Validation and Computation are two sides of the same coin. A simple example to
demonstrate:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Task&lt;/th&gt;
      &lt;th&gt;Input&lt;/th&gt;
      &lt;th&gt;Output&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Computation&lt;/td&gt;
      &lt;td&gt;Sort the numbers [4,5,1]&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;[1,4,5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Validation&lt;/td&gt;
      &lt;td&gt;Check that [4,5,1] is sorted by indexes A&lt;/td&gt;
      &lt;td&gt;A = [2,0,1]&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Validation &lt;em&gt;is&lt;/em&gt; a computation, but hopefully it’s easier to perform the
validation computation than the computation itself.&lt;/p&gt;

&lt;p&gt;In a Bitcoin transaction we are always validating that the transaction was
approved. A transaction in Bitcoin makes a clear precondition (the coins spent)
and postcondition (the coins sent). Even in cases where we have to do a lot of
computation to check the authorization, we still know the proposed outcome.&lt;/p&gt;

&lt;p&gt;Compare to an Ethereum transaction: We pass some input to a function, and the
EVM verifies that our input was authorized (e.g., send 1 Eth to contract X with
message “hello”). Then, the side effects of that action are computed dynamically
by the EVM. For certain contracts, we might be able to predict what the side
effect will be (e.g., a 1:1 token exchange like Eth to Wrapped Eth), but for
other contracts (e.g., a floating exchange rate for Eth to Wrapped BTC) we will
get an outcome that can’t be fully predicted. It is possible for contracts to
choose to engineer themselves in a way to create more predictability, however in
Ethereum this does not result in an Invalid transaction, it results in a valid
transaction (that e.g. still costs gas) that has a result which is not taken.
For example, a transaction which says “Buy 1 WBTC for 15 ETH” might fail to
acquire WBTC since the price is now 16ETH, but the transaction would be valid
that you tried to make the trade and failed. This is because Ethereum’s base
layer is computational in nature with little validation: validation must be
built on top.&lt;/p&gt;

&lt;h3 id=&quot;sidenote-malleability&quot;&gt;Sidenote: Malleability&lt;/h3&gt;

&lt;p&gt;For certain Bitcoin “covenant” transactions the validation/computation line can
be thin. Transactions must always be transactions in a block, but it’s possible
that in the future miners could receive “details” of a transaction and be
responsible for generating the appropriate transaction themselves. For example,
Blockstream released details on a &lt;a href=&quot;https://medium.com/blockstream/simplicity-taproot-and-universal-sighashes-18be8647b3bd&quot;&gt;noninteractive
feebumping&lt;/a&gt;
transaction, whereby a miner can dynamically compute a transaction that pays
them more fees the longer it takes to confirm.&lt;/p&gt;

&lt;p&gt;In the case of malleability like this, it’s not as simple as saying “don’t do
it”, because miners have an incentive to extract the value if it is available.&lt;/p&gt;

&lt;h2 id=&quot;dynamic-state&quot;&gt;Dynamic State&lt;/h2&gt;

&lt;p&gt;Contracts can have different types of state. State is just a fancy term for
information available to execution.&lt;/p&gt;

&lt;p&gt;Global state is information that is observable from anywhere. An example of this
in Bitcoin is the UTXO Set: any transaction could spend any coin, and can “pull
it into scope” by naming it’s Outpoint (whether or not the transaction is valid
is another question). Another example of global state is the current block
height, used for validating things like lock times. In Ethereum, there is a much
expanded concept of Global state whereby contracts persist and allow read/write
access from other contracts, and unlike Bitcoin’s UTXO set, observing a piece of
information doesn’t destroy it like spending a coin does.&lt;/p&gt;

&lt;p&gt;Local State is information observable only within your own context. For example,
a contract might hold balances for 3 different people, but the current values of
those split balances is not something queryable by outside parties. This also
includes implicit state, such as “the contract is currently pending an Action
from Alice” that are not explicitly coded.&lt;/p&gt;

&lt;p&gt;Lastly, certain things are not State. An example of this is an authorizing
signature, which is ephemeral data that is used in the transaction execution but
does not have relevance for the continued execution of the contract and is not
particularly observable (which signature we use shouldn’t matter).&lt;/p&gt;

&lt;h2 id=&quot;general-vs-specific&quot;&gt;General v.s. Specific&lt;/h2&gt;

&lt;p&gt;A General contract primitive is something that can be used across many different
types of contract. A Specific contract implements well defined logic. In Bitcoin
and Ethereum, the focus is on General contract primitives that can be used many
ways. In some other ecosystems (e.g. NXT, Stellar), contract primitives have
much more specific functionality.&lt;/p&gt;

&lt;p&gt;General/Specific ends up being more of a spectrum than a binary. Certain
contract primitives might be very specific but find general use, similarly some
general primitives might be more general than others.&lt;/p&gt;

&lt;p&gt;For example, the Lightning Network on Bitcoin has pursued a path of using
general purpose extensions to Bitcoin so as not to “special case” payment
channels. But is that worth it? Might Payment Channels be cheaper, easier to
use, etc if we just designed built-in channels from the get-go? Perhaps yes, but
then it might be harder to embed other things or incorporate new innovations
into Lightning if it had to fit a single mold.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This isn’t an exhaustive list of topics by any means, but it should be a good
primer for thinking about upgrade proposals that people discuss in Bitcoin.
You’ll find out more about that in… tomorrow’s post!.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:option&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;An American option is the right to either purchase or compell a counterparty to buy an asset until a deadline. &lt;a href=&quot;#fnref:option&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>What's Smart about Smart Contracts: Bitcoin Maxi Edition</title>
   <link href="/bitcoin/2021/12/03/advent-6/"/>
   <updated>2021-12-03T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/03/advent-6</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 6 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that we’ve established the four pillars of Privacy, Decentralization, Self
Custody, and Scalability, let’s get into smart contracts. But first…&lt;/p&gt;

&lt;h1 id=&quot;does-bitcoin-have-smart-contracts&quot;&gt;DOES BITCOIN HAVE SMART CONTRACTS?&lt;/h1&gt;

&lt;p&gt;There is a lot of fuss around if bitcoin has or doesn’t have smart contracts,
and this is usually people talking past one another. Bitcoin does have enough
functionality to create certain smart contracts. But Bitcoin does not “have
Smart Contracts” in the same way that, say, Ethereum “has” Smart Contracts.
Sure, one can argue that because Ethereum is weaker in terms of its fulfillment
of the four pillars, it doesn’t really have smart contracts either. But almost
undeniably there is something happening in the Ethereum Ecosystem that isn’t
happening for Bitcoin – yet.&lt;/p&gt;

&lt;p&gt;Often, Bitcoin Boosters will say that the types of things happening on Ethereum
aren’t desirable at all and are just scams. Many of these Boosters then go on to
promote projects of similar dubious nature… but that’s off topic for this post!
While there are many projects that frankly suck, there are also many projects on
Ethereum that are relevant to the interests of Bitcoiners! Examples of projects
that advance Ethereum’s realization of these 4 pillars that would be difficult
to build on Bitcoin include: Gnosis Safe for Custody; Tornado Cash for Privacy;
Optimistic/Zero Knowledge Rollups for scalability; SmartPool for on-chain mining
pool coordination. It’s claimed that any time something of value proves out in
the other ecosystems, Bitcoin can easily just incorporate the highlights.&lt;/p&gt;

&lt;p&gt;My position is somewhat unique on this matter: Smart Contracts aren’t something
you build on top of a layer with good decentralization, privacy, scalability,
and self custody – Smart Contracts are a central part of what makes achieving
those pillars possible! In other words, we need a Smart Contract ecosystem that
enables broad innovation in order to make our four pillars robust. This is not
the same as saying we need the Ethereum VM, but we do need something to be
different than the status quo today to empower builders to create new tools on
top of Bitcoin. This differs from a traditional Bitcoiner perspective which is
more along the lines of once we improve our (insert generic property here); then
we can consider figuring out how to add more smart contracts.&lt;/p&gt;

&lt;h2 id=&quot;that-bar-sucks-its-too-crowded&quot;&gt;That bar sucks it’s too crowded&lt;/h2&gt;

&lt;p&gt;Another reason sometimes given for not wanting smart contracts is that they’re
too expensive and won’t scale.  While this is a valid concern, the story around
fees is somewhat interesting. You may have seen people complain about high fees
on other platforms and say therefore it sucks and should die. It’s a bit like saying
a crowded bar is no good. Obviously, if people are at the bar it is good. That
your enjoyment is less is solely because you’re antisocial. On other platforms,
there are users paying exorbiant fees to do transactions… but would they be
doing them if they weren’t getting commensurate value? Let’s have a look at some
data from &lt;a href=&quot;https://cryptofees.info&quot;&gt;cryptofees&lt;/a&gt;&lt;sup id=&quot;fnref:date&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:date&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;1 Day Fees&lt;/th&gt;
      &lt;th&gt;7 Day Avg. Fees&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Ethereum&lt;/td&gt;
      &lt;td&gt;$62,620,320.03&lt;/td&gt;
      &lt;td&gt;$55,285,528.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Uniswap&lt;/td&gt;
      &lt;td&gt;$11,315,687.79&lt;/td&gt;
      &lt;td&gt;$10,507,247.12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Binance Smart Chain&lt;/td&gt;
      &lt;td&gt;$7,240,187.13&lt;/td&gt;
      &lt;td&gt;$7,525,565.73&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Balancer&lt;/td&gt;
      &lt;td&gt;$1,572,934.46&lt;/td&gt;
      &lt;td&gt;$445,368.69&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Aave&lt;/td&gt;
      &lt;td&gt;$1,465,761.04&lt;/td&gt;
      &lt;td&gt;$1,354,792.55&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SushiSwap&lt;/td&gt;
      &lt;td&gt;$1,379,856.87&lt;/td&gt;
      &lt;td&gt;$1,664,071.03&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bitcoin&lt;/td&gt;
      &lt;td&gt;$1,160,676.57&lt;/td&gt;
      &lt;td&gt;$730,368.10&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Clearly a lot of folks are willing to pay for Ethereum and projects on top of
it. Bitcoin is ultimately a business, and it relies on its customers paying fees
to incentivize the production of blocks. More fees, more incentive to provide
security for Bitcoin. It’s a little problematic, therefore, when users are
getting more utility from (by virtue of how much they are spending) other chains
than Bitcoin&lt;sup id=&quot;fnref:gent&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:gent&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Although we need to be careful to not hurt Bitcoin’s essential properties, it’s
clear that smart contracts provide massive leverage for incentivizing users to
do transactions to pay for block production, without which Bitcoin falls apart.&lt;/p&gt;

&lt;h2 id=&quot;capitalist-or-communist&quot;&gt;Capitalist or Communist?&lt;/h2&gt;

&lt;p&gt;The last point I’ll leave you with is perhaps a bit charged / “problematic”, but
I think it’s a good one. Bitcoin is a bit like America. Ethereum is a bit like China.
Provisionally, America is the Free Market Capitalism country and China is the
State Controlled Communist Markets country. In practice, if you visit a market
in China there &lt;em&gt;seems&lt;/em&gt; to be a lot more capitalism than in the US. Tons and tons
of small businesses, operating with (seemingly) little regulation. On the other
hand, in San Francisco you can spend
&lt;a href=&quot;https://sf.eater.com/2021/4/22/22397615/matcha-n-more-ice-cream-store-200000-quits&quot;&gt;$200k&lt;/a&gt;
trying to get permits for an Ice Cream shop and fail. On the flip side, in the states once you’re
successful and operating it’s pretty darn hard for the government to substantial interfere.
In China, your CEO might vanish for a few weeks like Jack Ma.&lt;/p&gt;

&lt;p&gt;Bitcoin is a bit like America. Building on it is incredibly hard, but if you
figure it out and crack the code it’s supposed to work forever and devs bend
backwards to ensure your use case won’t break.&lt;/p&gt;

&lt;p&gt;Ethereum is a bit like China. Building on it is incredibly easy – at first –
but if what you’re doing violates the “social order” your thing will get rekt by
king VB with EIPscallibur. Examples of this include the removal of refunds for
clearing space which bricked a popular gas fee arbitrage token.&lt;/p&gt;

&lt;p&gt;Now, obviously this description is tinged with preference. I &lt;em&gt;love&lt;/em&gt; America.
Best country in the world (or, rather, terrible country, just better than all
the other terrible countries). However, Bitcoin is not America and Ethereum is
not China. There can be a middle road, and benefits from such an approach as
well. Smart contracts seem to be really good at enabling permissionless
innovation. Permissionless innovation is great for capitalism! Capitalism is
great for improving utility of users and coordinating people. Wouldn’t it be
nice if building on Bitcoin didn’t require getting proposals passed the
developer “commitiburo” and  more innovators picked Bitcoin as the best chain to
build new ideas on top of? Obivously we don’t want to sacrifice the other parts
that make Bitcoin great, but we can still entertain the types of economic
benefits we would see by enabling more permissionless innovation. Because
ultimately, and perhaps tautologically…&lt;/p&gt;

&lt;h2 id=&quot;the-best-platform-for-capitalism-wins&quot;&gt;The best platform for capitalism wins&lt;/h2&gt;

&lt;p&gt;As described, Bitcoin has certain positive and negative properties. Ethereum
too. At the end of the day, in aggregate, what “matters” is what participants
choose to use and rely on through a free market selection process. That’s why
despite &lt;em&gt;not&lt;/em&gt; offfering the playground of Ethereum, Bitcoin has something that
people value more: stability. However, stability and stagnation are two sides of
the same coin. Stagnate for too long and competitors will eat your lunch.  And
perhaps the stability that makes Bitcoin unique will eventually be convincingly
present in other ecosystems, despite Bitcoin’s head start in that endeavor.&lt;/p&gt;

&lt;p&gt;Spooky Scary!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In the coming posts we’ll review the concepts more in depth, the state of the
art research for Bitcoin Smart Contracts, and get into some examples of useful
Bitcoin contracts.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:date&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Snapshot from December 2nd 2021 &lt;a href=&quot;#fnref:date&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:gent&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Shoutout &lt;a href=&quot;https://pleb.fi/transcripts/2020/miami/ryang/&quot;&gt;Ryan Gentry&lt;/a&gt;. &lt;a href=&quot;#fnref:gent&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Pillars of Bitcoin: Privacy</title>
   <link href="/bitcoin/2021/12/02/advent-5/"/>
   <updated>2021-12-02T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/02/advent-5</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 5 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Privacy is foundational to Bitcoin. Fundamentally, we care about censorship
resistance so folks can’t stop you from doing activity they can tell you’re
doing… but what if they couldn’t tell you were doing anything at all? The more
private a system is, the better it is at ensuring that all participants are free
to do as they wish.&lt;/p&gt;

&lt;p&gt;Unfortunately, privacy is one of the most difficult things to achieve in the
universe. For every action there is an equal and opposite reaction; if one wants
to make an action, how can one ensure the reaction is not observable? And if one
masks the reaction, how can one hide the masking?&lt;/p&gt;

&lt;p&gt;Privacy exists in a delicate position in our society. America is hands down the
leader in rights to privacy of any society, but citizens still face a barrage of
assaults against their privacy. Privacy from the government also differs from
privacy from corporations, and the corporations often times can be in cahoots
with the government. Some regulatory regimes (e.g., the EU) claim to be “better
on privacy” than America, but have overall a weaker sense of individual rights
than in America (so they may be better at the privilege of privacy, but not at
the right to it).&lt;/p&gt;

&lt;p&gt;Why is privacy so delicate? In part, because unlike speech there’s no explicit
enumerated right to privacy&lt;sup id=&quot;fnref:centric&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:centric&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Privacy is an unenumerated right under
the American constitution. What this means is that legally we do believe it to
be a right because it seems to be implied by other constitutional protections
that could not exist without it (e.g., the right to not be searched without due
process).  Because there’s not explicit protection of privacy, it’s a constant
battle to determine what constitutes an violation of privacy. For example, if
your house is extra hot because you’re growing pot in it (or hint hint Bitcoin
mining), can police use thermal cameras to detect it and then establish probable
cause to get a warrant and raid your house? See Kyllo v. United States, that’s
an illegal search baby! However it’s possible that this line would erode over
time as the expectation of privacy changes – if everyone had thermal camera
sunglasses and could see your pot growing plain as day, maybe it’d be
unreasonable to think
you’re private!&lt;/p&gt;

&lt;p&gt;Cryptographic research has yielded amazing tools for creating provable privacy
for digital actions. For example, it’s possible to send a digital message in a
manner such that only the intended recipient can read it. And as long as your
spying adversary isn’t standing over either of your shoulders looking at your
screen (or more realistically, running a scanning program on all your data like
the one Apple said they might be doing earlier this year), the only people who
will know the contents of the message are you and the recipient.&lt;/p&gt;

&lt;h3 id=&quot;the-government-kinda-sorta-hates-this-stuff&quot;&gt;The government kinda sorta hates this stuff!&lt;/h3&gt;

&lt;p&gt;Because the bad guys can use it! But, because America is super free privacy
loving country, citizens still have a basically unlimited protected right to use
whatever privacy technology they want. Many politicians have mentioned wanting
backdoors into software, but none have truly succeeded to introduce much truly
limiting. Not to mention you can’t make math illegal, which is all that
cryptography is. Alphabet soup agencies resort to trying to insert backdoors,
but these are still subject to public review and the information revealed could
only really be used legally for big “national security issues” like against a
group with a pre-existing warrant, but the general collection of information
would be illegal under the expectation of privacy right. At least in theory –
Snowden showed us that mass data collection
&lt;em&gt;does&lt;/em&gt; still happen… But cryptography gets better, and open-source supply chain
devices become better, so inserting backdoors in the code becomes harder and
harder.&lt;/p&gt;

&lt;p&gt;So great, probably solved for Bitcoin, right? Just Crypto It. Not quite. While
systems like ZCash do exist that make transactions much more private, they take
up more space, so they decrease the availability of block space… however,
perhaps with better privacy, there’s less ability to discriminate against
different transaction sources, so less decentralization is needed to guarantee
censorship resistance.&lt;/p&gt;

&lt;p&gt;This points to another conflict, which arises with privacy: auditability v.s.
transparency v.s. Deniability.&lt;/p&gt;

&lt;p&gt;An auditable system means that anyone can verify the history of all transactions
and check for validity transparently. Many bitcoiners have a preference for
“elementary school math”, where validating the transaction record requires very
basic math in the code, and not much else. However, if you go to a fully
encrypted form, you might no longer be able to easily check important rules like
the amount of coins not being increased through a crypto backdoor. This type of
auditability where you could “do it by hand on a calculator” we’ll call
transparency, since you can see everything! If it were encrypted, it would be
opaquely auditable. You could tell it’s valid, but not the specific transfers
that happened. Maybe no one person is going to look through all the data, but
across all humanity someone is bound to audit at least the transactions they’re
involved in.&lt;/p&gt;

&lt;p&gt;Deniability stands in contrast to either of these properties. If, say, a
government agency comes to you and says “hey, we know you controlled key X,
please show us all transactions that X was involved in”, a deniable system would
allow you to produce any answer, making such a query useless. However, if a
system was strongly deniable like that, it would be very hard to audit because
the audit could potentially turn up differing results. So Bitcoin transactions
aren’t particularly deniable by default.&lt;/p&gt;

&lt;p&gt;One of the drawbacks of Bitcoin’s auditability is that the auditability is
&lt;em&gt;forever&lt;/em&gt;. So if you have a lapse of privacy, all your old information can be
checked. So let’s say you bought a coffee in 2021, and in 2055 the government
decides all coffee drinkers are going to go to jail to pay for their drug use
sins, then your old cafe might be able to reveal you as a customer. Bitcoin
never forgets.&lt;/p&gt;

&lt;h2 id=&quot;its-my-data-and-i-want-it-private-now&quot;&gt;It’s My Data and I want it Private Now&lt;/h2&gt;
&lt;p&gt;Therefore it’s an urgent priority to make Bitcoin as private as possible as soon
as possible in order to keep users safe now and forever, or else the fundamental
usability of the system is at risk. However, compromising on auditability or
decentralization would be unpopular, so it’s not as simple as adding ZCash and
increasing block space.&lt;/p&gt;

&lt;p&gt;There are a lot of different pathways Bitcoin can take to increase privacy. For
example, the lightning network can mask and make many payments ephemeral, as
well as adding deniability if one continually signs false histories of revoked
txns.  Sidechains can add all sorts of privacy primitives, if they want. And
on-chain techniques like swaps or joins can be used to make the base privacy
better as well.&lt;/p&gt;

&lt;p&gt;In future posts we’ll explore how covenants can have a role in improving
privacy!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:centric&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;This post is a bit America centric… generally speaking, America has the strongest set of protections of citizen (and non-citizen) rights of any country, so we use the American system as a meter-stick in this post. That privacy doesn’t exist as an enumerated right in the country which most strongly protects individual rights, as noted early, implies it’s only really worse in other countries. &lt;a href=&quot;#fnref:centric&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Pillars of Bitcoin: Decentralization</title>
   <link href="/bitcoin/2021/12/01/advent-4/"/>
   <updated>2021-12-01T00:00:00+00:00</updated>
   <id>/bitcoin/2021/12/01/advent-4</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 4 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Many may have tried, but few have successfully characterized what “being
decentralized” means in an objective / quantitative sense. Instead, we’re left
with soft “know it when I see it”s.&lt;/p&gt;

&lt;p&gt;Decentralization may be a pillar of Bitcoin with a lotta fanfare, but it’s still
just a means to an end. It’s about the Pantheon, not the pillars! A system can
be very decentralized and still kinda suck. Much like pillars with no roof won’t
keep the rain out!&lt;/p&gt;

&lt;h2 id=&quot;got-gas&quot;&gt;Got Gas?&lt;/h2&gt;
&lt;p&gt;For a more than slightly contrived example, imagine a pre-internet driver
navigating gas stations prices.  Kind of “decentralized”, right?
Users/purchasers operate on local information to see pricing and make a decent
decision, and sellers operate on local information to stay competitive. Over
time the network should “converge” a sellers learn who has better prices
throughout town, but from the perspective of an individual purchaser it’s really
hard for them to determine within their remaining tank range/willingness to
drive across town for a dollar who has the best prices. So while the market
works as a decentralized pricing system, it’s not highly consistent!&lt;/p&gt;

&lt;h2 id=&quot;its-hard-no-cap&quot;&gt;It’s Hard; No CAP&lt;/h2&gt;

&lt;p&gt;Computer network nerds have three rules for keeping their jobs: consistency,
availability, and partition tolerance. What do these mean in practice? Thinking
back to our gas analogy, gas stations are very available (you can always get gas
at some price), they’re strongly partition tolerant (i.e., if you can’t see
other gas station’s advertised prices you won’t know if it’s better, but you can
still get gas). But the pricing might be all over the map! No consistency!&lt;/p&gt;

&lt;p&gt;It’s really hard to achieve all three properties – there even exist proofs of
its impossibility. Instead, engineers make tradeoffs to achieve different
amounts of guarantee across the properties.&lt;/p&gt;

&lt;p&gt;For Bitcoin we care a &lt;em&gt;lot&lt;/em&gt; about consistency&lt;sup id=&quot;fnref:pedantic&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:pedantic&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. If I send money to
Alice, I should not be able to send it to Bob. We also care a lot about
partition tolerance. If some group of participants should shunt themselves out
from others, the system should still operate? So do we inherently care less
about availability? Well, kinda! If the “blockchain is closed” and you can’t
transact, at least you still have your money. And technologies like Lightning
Network can help bridge the gaps if the Bitcoin blockchain is unavailable that
you can still fully confirm transactions as long as it comes back eventually.&lt;/p&gt;

&lt;p&gt;So, interestingly, Availability seems like the property we need to care about
the least… but it’s one of the main reasons we need decentralization! That’s
because even though we might have a design that elevates the other two
properties, it doesn’t mean that availability is unimportant. And availability
is not one monolithic level, there are many different types of availability
fault one might experience on a network. For example, you might experience
reduced or no availability if:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The network doesn’t have blockspace at your price&lt;/li&gt;
  &lt;li&gt;The internet is down&lt;/li&gt;
  &lt;li&gt;Your usual peers are offline&lt;/li&gt;
  &lt;li&gt;Theres a fire at a major data center&lt;/li&gt;
  &lt;li&gt;Your battery on your phone dies&lt;/li&gt;
  &lt;li&gt;A big solar flare happens&lt;/li&gt;
  &lt;li&gt;An evil government changes your DNS records to your mining pool and you don’t know the IP address&lt;/li&gt;
  &lt;li&gt;An evil government runs the network entirely and doesn’t like your transactions so they get censored.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of these problems, decentralization can help us with! Some,
decentralization can’t help with. And some are caused &lt;em&gt;by decentralization&lt;/em&gt;. Uh
oh!&lt;/p&gt;

&lt;p&gt;For example…&lt;/p&gt;

&lt;p&gt;A fire a major data center can be defrayed by being more decentralized – a fire
can only spread so far! The other data centers should be fine, since Bitcoin is
partition tolerant, the overall network is available.&lt;/p&gt;

&lt;p&gt;If a big solar flare happens, there’s not much &lt;em&gt;any&lt;/em&gt; of us can do if all the
internet is down and our devices got fried. Too catastrophic… We can recover
eventually, your metal seed plates will be fine, but hopefully someone had some
Faraday cage shielded backups.&lt;/p&gt;

&lt;p&gt;If blockspace is too expensive, decentralization may be the cause!&lt;/p&gt;

&lt;p&gt;In order to keep the network decentralization friendly, Bitcoin uses far less
bandwidth and storage than a centralized system (like Google) could use. This
ensures that participants on the network need not be particularly well resourced
or well connected to be a meaningful, full participant in the Bitcoin Network.&lt;/p&gt;

&lt;p&gt;That’s because of another availability issue: censorship. Bitcoin fundamentally
stands as a fuck-you to the entrenched powers that be. As such, Bitcoin uses
decentralization to guarantee censorship-resistance against state actors. While
there’s been much ink scaled about the censorship of scalability v.s. the
censorship of state actors, Bitcoin is hyper focused on providing some form of
“equal protection”.&lt;/p&gt;

&lt;p&gt;Everyone hates that you lose availability from high tx prices, and all are
equally affected&lt;sup id=&quot;fnref:arguably&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:arguably&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Everyone hates solar flares, and all are equally
affected. But with state actor censorship, enemies of the state, be they Jews,
Conservative Non-Profits, Black Americans, Gazan Chocolatiers, People who
believe things posted on *******’s Twitter Account etc, can be picked
apart and subjected to selective abuses.  If anyone can run a node (and
hopefully miner), and most people don’t have a political agenda, we can maybe
protect individuals of any background.&lt;/p&gt;

&lt;p&gt;As such, Bitcoin’s decentralization is focused on censorship-resistance, even at
the expense of on-chain availability.&lt;/p&gt;

&lt;h2 id=&quot;the-neverending-story&quot;&gt;The Neverending Story&lt;/h2&gt;
&lt;p&gt;The story doesn’t end there. Decentralization, as we noted earlier, is very
tough to quantify. Even if we can’t quantify it, we can still reason about
decentralization efficiency. Given the “costs of decentralization”, how much
censorship resistance do we get? Can we decrease the costs and achieve the same
amount?  Can we keep the cost the same and gain more censorship resistance?
Or… do we need to increase the costs, because we’re not censorship resistant
enough? Stay tuned for future posts we’re we’ll see if we can’t do something
about it!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:pedantic&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;If we’re being pedantic, technically Bitcoin sacrifices consistency for &lt;em&gt;eventual consistency&lt;/em&gt; to preserve the other properties… but it really depends on what you view the “output” of the network being as you can detect consistency losses by seeing hashrate decreases, for example. My opinion is we sacrifice availability of high quality confirmations for consistency… &lt;a href=&quot;#fnref:pedantic&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:arguably&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;There is a complex interaction between scalability solutions and chain space that can help bridge the fact that rich people are typically in power and poorer people aren’t. &lt;a href=&quot;#fnref:arguably&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Pillars of Bitcoin: Self Custody</title>
   <link href="/bitcoin/2021/11/30/advent-3/"/>
   <updated>2021-11-30T00:00:00+00:00</updated>
   <id>/bitcoin/2021/11/30/advent-3</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 3 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Not your keys, not your coin. A simple maxim often repeated by Bitcoiners, but
an important one. Why?&lt;/p&gt;

&lt;h2 id=&quot;that-thing-about-the-gold-standard-you-probably-heard-before&quot;&gt;That thing about the gold standard you probably heard before:&lt;/h2&gt;

&lt;p&gt;In the existing financial system, your assets aren’t really your assets. Let’s
suppose you own a share of Google. You don’t really own that share, you own a
virtual claim and the actual certificate sits somewhere with a corporation like
The Depository Trust &amp;amp; Clearing Corporation (DTCC). So what? Why does it matter
who holds the paper?&lt;/p&gt;

&lt;p&gt;The U.S. Dollar is a great example of why you should care. One dollar used to
represent an amount of Gold you could redeem for real physical
bite-it-to-see-its-pure gold. This was a promise of course, the paper dollar did
not have the actual gold in it. This was all good and dandy until in 1933,
Executive Order 6102 was put in place which made the holding of physical gold
illegal. Get arrested and go to jail illegal. EO 6102 mandated that all Gold be
turned in to the Federal Reserve. This was quickly followed by a devaluing of
the redemptive value of the dollar in Gold by the government from $20.67 per
troy ounce to $35 as a “one time” move&lt;sup id=&quot;fnref:troy&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:troy&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Today a troy ounce costs around
$1,800. This is because in 1971 an Executive Order was put through that ended
the dollar’s gold backing entirely.&lt;/p&gt;

&lt;h3 id=&quot;whats-this-got-to-do-with-bitcoin&quot;&gt;What’s this got to do with Bitcoin?&lt;/h3&gt;

&lt;p&gt;If Bitcoin is held in accounts at regulated entities like exchanges a similar
act to 6102 could make redeeming actual bitcoin impossible for users of those
services. Suppose those users are forced to receive in place of their exchange
Bitcoin a Bitcoin Note that is backed by bitcoin. And then one day, the amount
of Bitcoin per Bitcoin Note can be reduced
– or worse, completely unlinked.&lt;/p&gt;

&lt;p&gt;If this happens, all is lost. Bitcoin is fundamentally about a monetary standard
for the world where no self-important rulers can manipulate the currency. Self
custody is a requirement for Bitcoin to avoid these sorts of takeovers.&lt;/p&gt;

&lt;h2 id=&quot;ok-ok-ill-keep-my-coins-off-exchange&quot;&gt;OK, OK, I’ll keep my coins off exchange…&lt;/h2&gt;
&lt;p&gt;Just fixing your behavior isn’t enough, to keep Bitcoin functional you need most
users to follow suit.  Yet many users today do choose to keep some or all of
their Bitcoin on centralized services (yours truly included!).&lt;/p&gt;

&lt;p&gt;This is for two main reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Game Theory: we can’t do anything about this.  As long as not too many other
people are using an exchange for custody, it doesn’t matter if you are since a
regulatory takeover won’t be too effective. So selfishly, you may as well
benefit from the ease of keeping your coin on a service (assuming it is easier)
rather than taking responsibility for your own assets. Likewise if no-one else
is self custodying there’s not much advantage for you to be either.&lt;/li&gt;
  &lt;li&gt;Software freakin’ sucks for self custody! We can fix this. Although the
quality of wallets has improved dramatically from Bitcoin’s early days, it’s
still incredibly difficult to do well. Further, self-custody solutions don’t
have solid options for handling many common needs such as inheritance, spending
limits, and more.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we work on strengthening the fully self-sovereign self-custody options that
Bitcoin users have at their disposal, we can help more Bitcoin users to choose
to keep their funds themselves and achieve “herd immunity” against future
executive order 6102s. If we self custody in great number, we don’t permit them
the immediate victory over most users. You can’t arrest everyone, not easily at
least.&lt;/p&gt;

&lt;p&gt;in short…&lt;/p&gt;

&lt;h1 id=&quot;plebz&quot;&gt;PLEBZ&lt;/h1&gt;
&lt;h1 id=&quot;together&quot;&gt;TOGETHER&lt;/h1&gt;
&lt;h1 id=&quot;stronk&quot;&gt;STRONK&lt;/h1&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:troy&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;A troy ounce of gold is about a 1 inch by 1 inch square that is 0.1 inches high. &lt;a href=&quot;#fnref:troy&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Pillars of Bitcoin: Scalability</title>
   <link href="/bitcoin/2021/11/29/advent-2/"/>
   <updated>2021-11-29T00:00:00+00:00</updated>
   <id>/bitcoin/2021/11/29/advent-2</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Welcome to day 2 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the first of four posts in an advent mini-series about four fundamental
pillars of Bitcoin. I know, I know, a series within a series. What am I, nuts?
But it’s important that we begin our journey by setting the stage with a few
big picture objectives for Bitcoin before we get into why Smart Contracts
matter.&lt;/p&gt;

&lt;p&gt;After all, we’re trying to build the hardest money possible, not Crypto
Kitties… right?&lt;/p&gt;

&lt;p&gt;The four pillars I’ve chosen to focus on are Scalability, Self Custody,
Decentralization, and Privacy. Are there other properties that are also
important? Sure. Might there be a “more fundamental” name for each pillar? Ok.
But generally I find that these 4 categories are different enough from one
another and capture a very wide swath of what Bitcoin is and not overly
specific or overly general. Otherwise we’d just have one pillar for Bitcoin:
“To Fix This”.&lt;/p&gt;

&lt;p&gt;Now onto the content.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Scalability is a controversy generating issue. Throughout Bitcoin’s history
there have been acerbic disagreements about what sort of scale is required and
how to accomplish it. Back then I even helped create a conference series,
Scaling Bitcoin, where people got to present to/shout at each other in person!&lt;/p&gt;

&lt;p&gt;But why is scalability so important? And why does it generate controversy?&lt;/p&gt;

&lt;p&gt;Famously, certain folks have remarked that, “you can’t buy coffee with Bitcoin”
because fees would be too high. This is an issue that’s easy to empathize with;
if transactions cost $10 who wants to do that for a $5 coffee – No One!&lt;/p&gt;

&lt;p&gt;The common response is that Bitcoin isn’t for trivial purposes like buying a
cup of coffee, it’s The Hardest And Most Sound Money To Ever Exist And If You
Buy Coffee With It You Are Stupid.&lt;/p&gt;

&lt;p&gt;There’s some truth to that. Bitcoin doesn’t need to function to enable your
trivial day to day purchases, it needs to exist to help you take self-sovereign
control over your money! Forget about your coffee, stack sats, survive
hyperinflation, avoid the pod, don’t eat the bugs. Capiche?&lt;/p&gt;

&lt;p&gt;So what’s the rub? Well, if Bitcoin is to really be the vaccine against
autocratic rulers and corrupt financial systems, it needs to protect everyone,
not just elite sat-stackers who can afford to use it. Scalability represents
our desire for Bitcoin to be affordable for all who could benefit from it. Many
who live under abusive or corrupt regimes today might already be priced out.
Imagine earning 1000 satoshis per day and spending 300 satoshis to do a
transaction. Real bummer. And what if fees go up? There’s also the insulting
concept of dust in Bitcoin, 546 satoshis, currently about $0.30. Some people
work hard just to earn that much! Where do you think people who fall on this
low end of the economic spectrum live… in the freest of the free western
countries? No, they’re Congolese children mining cobalt. Maybe it’s OK that
they’re priced out: Bitcoin preserves wealth (and freedom), it doesn’t create
it. And just having cheaper fees isn’t going to free the child workers. But
still, wouldn’t you rather have Bitcoin be able to benefit anyone who might
have the need to use it, regardless of net worth?&lt;/p&gt;

&lt;p&gt;Good news: there are techniques that exist today for scaling access to Bitcoin.
Bad news: they all have different tradeoffs.&lt;/p&gt;

&lt;h2 id=&quot;just-make-the-blocks-bigger-bro&quot;&gt;Just Make the Blocks Bigger Bro&lt;/h2&gt;

&lt;p&gt;Early on in Bitcoin’s history a contingency of Bitcoiners
felt strongly that Bitcoin should scale by increasing the size of Blocks to
accommodate more transactions per second and keeping fees low. While mild block
size increases (e.g., as done with SegWit) are probably ok, the ever-increasing
block size would threaten Bitcoin’s decentralization and make it harder for
anyone to be able to run and audit the system. And if you can’t run and audit
Bitcoin yourself, you might as well be using the legacy financial system.&lt;/p&gt;

&lt;p&gt;There are some efficiency improvements that can shrink transactions marginally,
contributing to an effectively larger block. But Blockspace will always be
scarce, no matter how space efficient transactions are.&lt;/p&gt;

&lt;h2 id=&quot;lightning-network&quot;&gt;Lightning Network&lt;/h2&gt;

&lt;p&gt;The Lightning Network is a very popular means of scaling bitcoin. It makes a
second layer on top of Bitcoin where you can make cheaper and lower latency
payments. It functions sort of like the equivalent of Venmo versus Bank Wire
Transfers. You set up a “payment channel” with a counterparty, and are able to
make many cheap payments between you and the counterparty. You can even route
payments through friend’s channels if you don’t have a direct link. A few major
downsides to this approach are as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;That it requires an active online presence and ability to get bitcoin
transactions confirmed (which still costs money!)&lt;/li&gt;
  &lt;li&gt;It requires some form of durable storage any time you make a transaction.&lt;/li&gt;
  &lt;li&gt;That in order to receive funds, you have to have someone loan you the
“potential” capital (think credit worthiness, which requires some sort of
reputation system and identities).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In countries like El Salvador, which have begun adopting Bitcoin as legal
tender, many users of the Lightning Network are doing so through a centralized
service provider which doesn’t protect users from the types of abuse possible
in current banking paradigms. In theory, this central service provider isn’t
there because the El Salvador government is some kind of soon-to-be
dictatorship, but rather because solving the problems of capital loan, regular
online presence, and durable storage are hard problems for citizens of a poor
country.&lt;/p&gt;

&lt;h2 id=&quot;sidechains&quot;&gt;Sidechains&lt;/h2&gt;

&lt;p&gt;Another popular approach is to make federated sidechains, such as
RootStock, Liquid, Nomic, or ThorChain, etc. A Federated Sidechain is
essentially a “fancy multisig”, where funds are sent into the custody of a set
of entities (usually such that many independent entities would have to collude
to steal funds). The federation then runs some sort of cryptocurrency backed by
the deposits. Users are granted virtual bitcoin on the sidechain which they can
use in accordance with the rules of the sidechain. Eventually they may request
that whatever balance they have on the sidechain be sent out of the sidechain
and into a normal bitcoin address of their choosing. This achieves a sort of
scalability because the base layer does not have to validate or store any of
the transactions occurring on the sidechain. However, the tradeoff is severe:
the funds are completely owned by the Federation, which means that users are
not guaranteed to be able to access their funds. It’s basically a bank with a
cool API.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This post doesn’t end in a fun or upbeat way: we want everyone to be able to
access and benefit from Bitcoin; we can’t get everyone for access in the obvious
way of bigger blocks or we risk unravelling Bitcoin’s core guarantees; and the
solutions using layers on top of bitcoin reduce some of the core properties that
make Bitcoin valuable to society in the first place. Some of these tradeoffs may
be acceptable in certain cases, but we must always strive to support the most
users with the strongest Hard Money properties we can.&lt;/p&gt;

&lt;p&gt;In future posts we’ll see how more sophisticated smart contracts could improve
Bitcoin’s scalability, or at least provide a different set of tradeoffs compared
to the solutions above.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Day 1: Rubin's Bitcoin Advent Calendar</title>
   <link href="/bitcoin/2021/11/28/advent-1/"/>
   <updated>2021-11-28T00:00:00+00:00</updated>
   <id>/bitcoin/2021/11/28/advent-1</id>
   <content type="html">&lt;p&gt;What says Christmas more than an Advent Calendar to count the days till Santa
comes? Honestly, I’m not too sure, I’m a Jew. Happy Hanukkah everyone! But in
the spirit of the season, I figured the community would love a series of blog
posts (one a day) discussing the future of Bitcoin and Smart Contracts.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can find an index of all the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So here’s how it’s going to work:&lt;/p&gt;

&lt;h2 id=&quot;todays-the-first-day&quot;&gt;Today’s the first day!&lt;/h2&gt;

&lt;p&gt;Advent Calendars are designed to be from the 4th Sunday before Christmas till
Christmas and as such vary in length. Lucky you; this year is a long one!
Unfortunately for me, I’ve got to make 26 more exciting posts to pull this off.
Each of these posts is going to be short-but-sweet (much like the chocolates
you’re used to) and designed to highlight an important concept or idea about
Bitcoin Smart Contracting. I’ll put each post on my personal blog, email out a
link on the &lt;a href=&quot;https://judica.org/join&quot;&gt;judica newsletter&lt;/a&gt;, and tweet it out.&lt;/p&gt;

&lt;h2 id=&quot;this-series-is-for-you&quot;&gt;This series is for you.&lt;/h2&gt;

&lt;p&gt;It doesn’t matter if you’re a programmer,
investor, pleb, or just trying to learn more. Through the series
I’ll do my best to thoroughly introduce concepts for anyone to
follow along and learn.&lt;/p&gt;

&lt;h2 id=&quot;of-course-im-going-to-be-a-little-biased&quot;&gt;Of course I’m going to be a little biased.&lt;/h2&gt;
&lt;p&gt;The perspectives shared are my own and the focus is on things that I focus on,
but I’ll do my best to present the balance and nuance!&lt;/p&gt;

&lt;p&gt;If you want to send me some holiday cheer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3E6p1UgrgwAFvZAF7xUiRcBR2vAEdYNXjZ&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Hope you enjoy the series!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>CheckSequenceVerify DISCOURAGE_UPGRADABLE_NOPS Defect</title>
   <link href="/bitcoin/2021/09/03/upgradable-nops-flaw/"/>
   <updated>2021-09-03T00:00:00+00:00</updated>
   <id>/bitcoin/2021/09/03/upgradable-nops-flaw</id>
   <content type="html">&lt;p&gt;The other day I was writing some tests for BIP-119 (shoutout
&lt;a href=&quot;https://twitter.com/glozow&quot;&gt;Gloria&lt;/a&gt; for the detailed feedback on improving
tests). I noticed something peculiar while attempting to write static test
vectors for CTV. This peculiar thing led me to discover a minor flaw in
Bitcoin’s interpreter – it isn’t going to break anything in the short term,
but it has implications for how certain upgrades might be done in the future.&lt;/p&gt;

&lt;p&gt;In the interpreter we pass specific flags in at different times to check
different rules at different times. This is used because we generally want the
Mempool to be “restrictive” and block validation to be unrestrictive.  That
sounds like the opposite of what you would want, but it’s because we want to
ensure that we never break a consensus rule, so our mempool is “strict” to
protect e.g. a miner from making a bad block, because our node’s understanding
of consensus validation is less strict so we always know the mempool is full of
stuff that will pass consensus.&lt;/p&gt;

&lt;p&gt;One of the specific types of “stricter” that is in the mempool is for things
that may be changed in the future. For example, Taproot (a change proposed to
Bitcoin) uses a Witness V1 script. Before Taproot activates, Witness V1 Scripts
are &lt;em&gt;always&lt;/em&gt; valid no matter if they’re signed or not. After it activates, a
new rule takes effect in consensus, and Witness V1 Scripts will be processed in
accordance with Taproot’s rules. Because the Mempool is stricter, it never lets in
any Witness V1 script spends until it knows how to properly validate it. That way,
for a miner who doesn’t want to upgrade to Taproot, they can use the old rules in their
Mempool and not ever mine a bad block.&lt;/p&gt;

&lt;p&gt;One of the flags used for this purpose is DISCOURAGE_UPGRADABLE_NOPS. A NOP
is simply an opcode in bitcoin that has no effect (nada). In the future,
someone could add a rule to that NOP (e.g., check that the stack args present
when the NOP executes satisfy some properties or the transaction is invalid,
but do not remove anything from the stack so that the old consensus rules still
seem correct). This is sufficient for consensus, but maybe people have decided
that they want to create a bunch of outputs with NOPs in it because they are
cute. Then, a fork that would add new semantics to a NOP would have the impact
of locking people out of their wallets.  To prevent this, the Mempool uses the
rule DISCOURAGE_UPGRADABLE_NOPS which makes it so that if you try to
broadcast an output script with a NOP it gets bounced from the Mempool (but not
consensus of course, should a deviant miner mine such a transaction). Hopefully
our users get the message to not use NOPs because we… discourage upgradable
nops.&lt;/p&gt;

&lt;p&gt;CheckSequenceVerify (CSV) was one such NOP before it grew up to be a big n’
important opcode. Essentially all that CSV does is check that the sequence
field is set in a particular manner. This lets you set relative block and time
lock (e.g., takes this much time before a coin is spendable again). However,
it’s possible that we might come up with new kinds of lock times in the future,
so we have a bit we can set in the sequence that makes it ignored for consensus
purposes. Maybe in the future, someone would find something nice to do with it,
eh?&lt;/p&gt;

&lt;p&gt;This is the sequence verification code:&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OP_CHECKSEQUENCEVERIFY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCRIPT_VERIFY_CHECKSEQUENCEVERIFY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// not enabled; treat as a NOP3&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCRIPT_ERR_INVALID_STACK_OPERATION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// nSequence, like nLockTime, is a 32-bit unsigned integer&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// field. See the comment in CHECKLOCKTIMEVERIFY regarding&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 5-byte numeric operands.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CScriptNum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stacktop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fRequireMinimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// In the rare event that the argument may be &amp;lt; 0 due to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// some arithmetic being done first, you can always use&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 0 MAX CHECKSEQUENCEVERIFY.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nSequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCRIPT_ERR_NEGATIVE_LOCKTIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// To provide for future soft-fork extensibility, if the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// operand has the disabled lock-time flag set,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// CHECKSEQUENCEVERIFY behaves as a NOP.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nSequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CTxIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEQUENCE_LOCKTIME_DISABLE_FLAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Compare the specified sequence number with the input.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CheckSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCRIPT_ERR_UNSATISFIED_LOCKTIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spot anything funky? Look closer…&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// To provide for future soft-fork extensibility, if the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// operand has the disabled lock-time flag set,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// CHECKSEQUENCEVERIFY behaves as a NOP.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nSequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CTxIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEQUENCE_LOCKTIME_DISABLE_FLAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, where we say it behaves as a NOP we don’t check any rules and skip the checks.&lt;/p&gt;

&lt;p&gt;See where the problem lies? If we ever &lt;em&gt;did&lt;/em&gt; get around to a future upgrade
here, then old miners who refuse to upgrade would be more than happy to accept
invalid transactions into their mempool, and then following the fork, would end
up mining invalid blocks leading to potential network partitions.&lt;/p&gt;

&lt;p&gt;That would be bad! Let’s not do that.&lt;/p&gt;

&lt;p&gt;What we really should be doing is:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// To provide for future soft-fork extensibility, if the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// operand has the disabled lock-time flag set,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// CHECKSEQUENCEVERIFY behaves as a NOP.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nSequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CTxIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEQUENCE_LOCKTIME_DISABLE_FLAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which is exactly what I propose to do in &lt;a href=&quot;https://github.com/bitcoin/bitcoin/pull/22871&quot;&gt;this PR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If this solution is adopted, then after the last release of the Bitcoin Core
Implementation that has the unpatched code goes
&lt;a href=&quot;https://bitcoincore.org/en/lifecycle/&quot;&gt;End-of-Life&lt;/a&gt;, we could safely deploy
new sequence rules. Because it takes a while for software to go EOL, I hope we
can patch this soon.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Infrastructure Bill: It's Go Time for Radical Self Custody</title>
   <link href="/bitcoin/2021/08/02/infrastructure-bill-thoughts/"/>
   <updated>2021-08-02T00:00:00+00:00</updated>
   <id>/bitcoin/2021/08/02/infrastructure-bill-thoughts</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/JeremyRubin/utxos.org/pull/4&quot;&gt;TL;DR: click here to answer call to action&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/JeremyRubin/utxos.org/pull/4&quot;&gt; &lt;img src=&quot;/public/img/bitcoin/virginchadcustody.png&quot; alt=&quot;&quot; /&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The infrastructure bill draft has been circulating which contains language that
would have massive impact for the crypto ecosystem (and Bitcoin) in the United
States, and most likely globally. The broad implication of the proposed bill is
that many types of service provider would be categorized as brokers, even if
fully ‘non custodial’. E.g., a coinjoin coordinator might be a broker, even if
they never take control of the funds, because they are facilitating a
transaction. There’s a lot of nuance, and the language is still being changed,
so we’ll see where it lands. But that’s not the point of this blog post.&lt;/p&gt;

&lt;p&gt;The point of this blog post is that we need to &lt;em&gt;hurry the fuck up&lt;/em&gt; and improve
the self-sovereign software available and widely used by bitcoiners. You heard
me right, &lt;em&gt;hurry the fuck up&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;While there’s space for debate around perfect designs and optima for protocol
improvements, these discussions take years to turn into code running in end
users wallets. I do not believe that we have time to leisurely improve
self-sovereign custody solutions while regulators figure out a wrench to throw
in our spokes.&lt;/p&gt;

&lt;p&gt;Why am I so concerned about this bill in particular? A confidential source
tells me that this language came out of the blue, an executive branch driven
regulatory ninja attack of sorts. Normally, when the government looks to
regulate an industry, the provisions and terms get floated around by
legislators for a long while with industry input, comment periods, and more.
Then, when a bill or other rules get passed, it’s something that the industry
has at least had a chance to weigh in on and prepare for. My source claims no
one has seen the clauses in the infrastructure bill before, and they infer that
may mean this is a part of a broader crack-down coming from specific political
personalities and agencies. This means we may be seeing government actions
further restricting users’ rights in the pipeline much sooner than anyone could
anticipate.&lt;/p&gt;

&lt;p&gt;I’ve long been saying that we should be deploying &lt;a href=&quot;https://utxos.org&quot;&gt;BIP-119
CTV&lt;/a&gt; for congestion control &lt;em&gt;before&lt;/em&gt; we see broad congestion
on the network. If you wait until a problem is manifest, it can take years to
deploy a solution. This merits proactivity in solving a problem before it
comes. Today, the need to improve self-custody looms urgently on the horizon.&lt;/p&gt;

&lt;p&gt;CTV is not a panacea solution. It doesn’t magically fix all custodial issues.
But, along with &lt;a href=&quot;https://learn.sapio-lang.org&quot;&gt;Sapio&lt;/a&gt;, it does offer a pathway
to dramatically improving self custody options, letting users customize vault
smart contracts which do not depend on any third parties. Deploying CTV now is
an opportunity to put in motion the wheels for broad ecosystem support for
these enhanced custody protocols. We may come up with better options in the
future which may obsolete CTV in place of more clever technologies. I cheer
those efforts. But we need solutions for Tomorrow.&lt;/p&gt;

&lt;p&gt;A soft fork activation for CTV could be deployable for Bitcoin imminently,
should the community embrace it. The spec is nearly 2 years old, the code has
required only small updates to be mergeable with other changes to Bitcoin Core.
The review burden is 185 lines of consensus code, and a couple hundred lines of
tests. To that end I believe it is prudent for the Bitcoin community to embrace
the deployment of CTV and I’m calling on the community to &lt;a href=&quot;https://github.com/JeremyRubin/utxos.org/pull/4&quot;&gt;soft-signal
intent&lt;/a&gt; for a soft-fork
activation of CTV.&lt;/p&gt;

&lt;p&gt;We cannot control what rules state authorities attempt to mandate. But we can
individually control our own compliance with measures we see as unjust, and as
a community we can advance technologies and solutions that ensure that choice
remains squarely in the hands of every user and not the service providers they
may use.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>BIP-118 What Gets Hashed Chart</title>
   <link href="/bitcoin/2021/07/09/bip-118-sighash-chart/"/>
   <updated>2021-07-09T00:00:00+00:00</updated>
   <id>/bitcoin/2021/07/09/bip-118-sighash-chart</id>
   <content type="html">&lt;p&gt;As a part of my ongoing review of BIP-118 I put together a
&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1KeWJ_cly9zoRX5_h70RTniRT2m8_iaVceK_aF6obWeM&quot;&gt;chart&lt;/a&gt;
of what gets hashed under the current proposal.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1KeWJ_cly9zoRX5_h70RTniRT2m8_iaVceK_aF6obWeM&quot;&gt;&lt;img src=&quot;/public/img/bip-118.png&quot; alt=&quot;BIP-118 Chart&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not tightly checked to be free of errors, but I figured such a chart would be
helpful for folks evaluating BIP-118.&lt;/p&gt;

&lt;p&gt;Perhaps the BIPs (generally, incl 34x) could be updated to present the
information in such a chart – at least for me it’s much clearer than following
a bunch of conditional logic (maybe if there’s ever desire for some consensus
refactoring this could be a table in the code replacing the cond logic).
A few highlighted nuances:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;input index is never signed (i previously thought one mode signed it). Key reuse under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APOAS | Default&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APOAS | All&lt;/code&gt; is a bit extra unsafe given susceptibility to the “half-spend” problem. This limits usability of APO for covenants a-la CTV because you can’t stop someone from adding inputs to your contract nor can you prevent half-spend problems when reusing addresses.&lt;/li&gt;
  &lt;li&gt;APO signs the Amounts, APOAS never does.&lt;/li&gt;
  &lt;li&gt;APO signs both the SPK and the Tapleaf hash, meaning that APO binds itself to the entire script rather than just it’s fragment. There’s no setting which is “just this fragment”&lt;/li&gt;
  &lt;li&gt;APO’s signature binds it to a specific script fragment &lt;em&gt;within&lt;/em&gt; a taproot key, but not a specific script path&lt;/li&gt;
  &lt;li&gt;the flag “default” is not really a flag at all – when default is used (as a or’d byte) there are different results than when default is inferred (by absence of a byte) (this is maybe a bitcoin core specific quirk).&lt;/li&gt;
  &lt;li&gt;There are 16 different possible modes total, so all combinations of flags mean &lt;em&gt;something&lt;/em&gt; (advisable or not as with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACP | None&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*| Default&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*| All&lt;/code&gt; overlap, so there’s an opportunity to either reserve or assign 4 additional sighash modes if desired. These could cover some of the gaps above, or be saved for future purposes rather than be wasted now. Another point of interest is – not to rock the boat – but because BIP-118 is defining a new key type we could do away with the notion that sighash flags are “flags” and convert to an enum (e.g., numbered 0-256 for whatever combination of fields each would incur) and give each signature type a sensible name, rather than thinking of things as a combo of flags (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APOAS&lt;/code&gt; is not some intersection of what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APO&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACP&lt;/code&gt; do independently).&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Quantum Proofing Bitcoin with a CAT</title>
   <link href="/blog/2021/07/06/quantum-bitcoin/"/>
   <updated>2021-07-06T00:00:00+00:00</updated>
   <id>/blog/2021/07/06/quantum-bitcoin</id>
   <content type="html">&lt;p&gt;I recently published &lt;a href=&quot;https://rubin.io/blog/2021/07/02/signing-5-bytes/&quot;&gt;a blog
post&lt;/a&gt; about signing up to a
5 byte value using Bitcoin script arithmetic and Lamport signatures.&lt;/p&gt;

&lt;p&gt;By itself, this is neat, but a little limited. What if we could sign longer
messages? If we can sign up to 20 bytes, we could sign a HASH160 digest which
is most likely quantum safe…&lt;/p&gt;

&lt;p&gt;What would it mean if we signed the HASH160 digest of a signature? What the
what? Why would we do that?&lt;/p&gt;

&lt;p&gt;Well, as it turns out, even if a quantum computer were able to crack ECDSA, it
would yield revealing the private key but not the ability to malleate the
content of what was actually signed.  I asked my good friend and cryptographer
&lt;a href=&quot;https://madars.org/&quot;&gt;Madars Virza&lt;/a&gt; if my intuition was correct, and he
confirmed that it should be sufficient, but it’s definitely worth closer
analysis before relying on this. While the ECDSA signature can be malleated to a
different, negative form, if the signature is otherwise made immalleable there
should only be one value the commitment can be opened to.&lt;/p&gt;

&lt;p&gt;If we required the ECDSA signature be signed with a quantum proof signature
algorithm, then we’d have a quantum proof Bitcoin! And the 5 byte signing scheme
we discussed previously is a Lamport signature, which is quantum secure.
Unfortunately, we need at least 20 contiguous bytes… so we need some sort of
OP_CAT like operation.&lt;/p&gt;

&lt;p&gt;OP_CAT can’t be directly soft forked to Segwit v0 because it modifies the
stack, so instead we’ll (for simplicity) also show how to use a new opcode that
uses verify semantics, OP_SUBSTRINGEQUALVERIFY that checks a splice of a string
for equality.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fun Fact: OP_CAT existed in Bitcoin untill 2010, when Satoshi “secretly”
forked out a bunch of opcodes. So in theory the original Bitcoin implementation
supported Post Quantum cryptography out of the box!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... FOR j in 0..=5
    &amp;lt;0&amp;gt;
    ... FOR i in 0..=31
        SWAP hash160 DUP &amp;lt;H(K_j_i_1)&amp;gt; EQUAL IF DROP &amp;lt;2**i&amp;gt; ADD ELSE &amp;lt;H(K_j_i_0)&amp;gt; EQUALVERIFY ENDIF
    ... END FOR
    TOALTSTACK
... END FOR

DUP HASH160

... IF CAT AVAILABLE
    FROMALTSTACK
    ... FOR j in 0..=5
        FROMALTSTACK
        CAT
    ... END FOR
    EQUALVERIFY
... ELSE SUBSTRINGEQUALVERIFY AVAILABLE
    ... FOR j in 0..=5
        FROMALTSTACK &amp;lt;0+j*4&amp;gt; &amp;lt;4+j*4&amp;gt; SUBSTRINGEQUALVERIFY DROP DROP DROP
    ...  END FOR
    DROP
... END IF

&amp;lt;pk&amp;gt; CHECKSIG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s a long script… but will it fit? We need to verify 20 bytes of message
each bit takes around 10 bytes script, an average of 3.375 bytes per number
(counting pushes), and two 21 bytes keys = 55.375 bytes of program space and 21
bytes of witness element per bit.&lt;/p&gt;

&lt;p&gt;It fits! &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;20*8*55.375 = 8860&lt;/code&gt;, which leaves 1140 bytes less than the limit for
the rest of the logic, which is plenty (around 15-40 bytes required for the rest
of the logic, leaving 1100 free for custom signature checking). The stack size
is 160 elements for the hash gadget, 3360 bytes.&lt;/p&gt;

&lt;p&gt;This can probably be made a bit more efficient by expanding to a ternary
representation.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        SWAP hash160 DUP &amp;lt;H(K_j_i_0)&amp;gt; EQUAL  IF DROP  ELSE &amp;lt;3**i&amp;gt; SWAP DUP &amp;lt;H(K_j_i_T)&amp;gt; EQUAL IF DROP SUB ELSE &amp;lt;H(K_j_i_1)&amp;gt; EQUALVERIFY ADD  ENDIF ENDIF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should bring it up to roughly 85 bytes per trit, and there should be 101
trits (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log(2**160)/log(3) == 100.94&lt;/code&gt;), so about 8560 bytes… a bit cheaper!
But the witness stack is “only” &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2121&lt;/code&gt; bytes…&lt;/p&gt;

&lt;p&gt;As a homework exercise, maybe someone can prove the optimal choice of radix for
this protocol… My guess is that base 4 is optimal!&lt;/p&gt;

&lt;h2 id=&quot;taproot&quot;&gt;Taproot?&lt;/h2&gt;

&lt;p&gt;What about Taproot? As far as I’m aware the commitment scheme (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q = pG + hash(pG
|| m)G&lt;/code&gt;) can be securely opened to m even with a quantum computer (finding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q&lt;/code&gt;
such that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qG = Q&lt;/code&gt; might be trivial, but suppose key path was disabled, then
finding m and p such that the taproot equation holds should be difficult because
of the hash, but I’d need to certify that claim better).  Therefore this
script can nest inside of a Tapscript path – Tapscript also does not impose a
length limit, 32 byte hashes could be used as well.&lt;/p&gt;

&lt;p&gt;Further, to make keys reusable, there could be many Lamport keys comitted inside
a taproot tree so that an address could be used for thousands of times before
expiring. This could be used as a measure to protect accidental use rather than
to support it.&lt;/p&gt;

&lt;p&gt;Lastly, Schnorr actually has a stronger non-malleability property than ECDSA,
the signatures will be binding to the approved transaction and once Lamport
signed, even a quantum computer could not steal the funds.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>CheckSigFromStack for 5 Byte Values</title>
   <link href="/blog/2021/07/02/signing-5-bytes/"/>
   <updated>2021-07-02T00:00:00+00:00</updated>
   <id>/blog/2021/07/02/signing-5-bytes</id>
   <content type="html">&lt;p&gt;I recently published &lt;a href=&quot;https://rubin.io/blog/2021/07/02/covenants/&quot;&gt;a blog post&lt;/a&gt;
about covenants on Bitcoin.&lt;/p&gt;

&lt;p&gt;Readers were quick to point out I hadn’t
fully explained myself on a claim I made that you can do a form of
CheckSigFromStack in Bitcoin today.&lt;/p&gt;

&lt;p&gt;So I thought it would be worthwhile to fully describe the technique – for the
archives.&lt;/p&gt;

&lt;p&gt;There are two insights in this post:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;to use a bitwise expansion of the number&lt;/li&gt;
  &lt;li&gt;to use a lamport signature&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s look at the code in python and then translate to bitcoin script:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preimage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preimage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_signed_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;witnesses&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preimage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;witnesses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preimage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So what’s going on here? The signer generates a key which is a list of pairs of
hash images to create the script.&lt;/p&gt;

&lt;p&gt;To sign, the signer provides a witness of a list of preimages that match one or the other.&lt;/p&gt;

&lt;p&gt;During validation, the network adds up a weighted value per preimage and checks
that there are no left out values.&lt;/p&gt;

&lt;p&gt;Let’s imagine a concrete use case: I want a third party to post-hoc sign a sequence lock. This is 16 bits.
I can form the following script:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;pk&amp;gt; checksigverify
0
SWAP sha256 DUP &amp;lt;H(K_0_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;gt; ADD ELSE &amp;lt;H(K_0_0)&amp;gt; EQUALVERIFY ENDIF
SWAP sha256 DUP &amp;lt;H(K_1_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;lt;&amp;lt;1&amp;gt; ADD ELSE &amp;lt;H(K_1_0)&amp;gt; EQUALVERIFY ENDIF
SWAP sha256 DUP &amp;lt;H(K_2_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;lt;&amp;lt;2&amp;gt; ADD ELSE &amp;lt;H(K_2_0)&amp;gt; EQUALVERIFY ENDIF
SWAP sha256 DUP &amp;lt;H(K_3_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;lt;&amp;lt;3&amp;gt; ADD ELSE &amp;lt;H(K_3_0)&amp;gt; EQUALVERIFY ENDIF
SWAP sha256 DUP &amp;lt;H(K_4_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;lt;&amp;lt;4&amp;gt; ADD ELSE &amp;lt;H(K_4_0)&amp;gt; EQUALVERIFY ENDIF
SWAP sha256 DUP &amp;lt;H(K_5_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;lt;&amp;lt;5&amp;gt; ADD ELSE &amp;lt;H(K_5_0)&amp;gt; EQUALVERIFY ENDIF
SWAP sha256 DUP &amp;lt;H(K_6_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;lt;&amp;lt;6&amp;gt; ADD ELSE &amp;lt;H(K_6_0)&amp;gt; EQUALVERIFY ENDIF
SWAP sha256 DUP &amp;lt;H(K_7_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;lt;&amp;lt;7&amp;gt; ADD ELSE &amp;lt;H(K_7_0)&amp;gt; EQUALVERIFY ENDIF
SWAP sha256 DUP &amp;lt;H(K_8_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;lt;&amp;lt;8&amp;gt; ADD ELSE &amp;lt;H(K_8_0)&amp;gt; EQUALVERIFY ENDIF
SWAP sha256 DUP &amp;lt;H(K_9_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;lt;&amp;lt;9&amp;gt; ADD ELSE &amp;lt;H(K_9_0)&amp;gt; EQUALVERIFY ENDIF
SWAP sha256 DUP &amp;lt;H(K_10_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;lt;&amp;lt;10&amp;gt; ADD ELSE &amp;lt;H(K_10_0)&amp;gt; EQUALVERIFY ENDIF
SWAP sha256 DUP &amp;lt;H(K_11_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;lt;&amp;lt;11&amp;gt; ADD ELSE &amp;lt;H(K_11_0)&amp;gt; EQUALVERIFY ENDIF
SWAP sha256 DUP &amp;lt;H(K_12_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;lt;&amp;lt;12&amp;gt; ADD ELSE &amp;lt;H(K_12_0)&amp;gt; EQUALVERIFY ENDIF
SWAP sha256 DUP &amp;lt;H(K_13_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;lt;&amp;lt;13&amp;gt; ADD ELSE &amp;lt;H(K_13_0)&amp;gt; EQUALVERIFY ENDIF
SWAP sha256 DUP &amp;lt;H(K_14_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;lt;&amp;lt;14&amp;gt; ADD ELSE &amp;lt;H(K_14_0)&amp;gt; EQUALVERIFY ENDIF
SWAP sha256 DUP &amp;lt;H(K_15_1)&amp;gt; EQUAL IF DROP &amp;lt;1&amp;lt;&amp;lt;15&amp;gt; ADD ELSE &amp;lt;H(K_15_0)&amp;gt; EQUALVERIFY ENDIF
CHECKSEQUENCEVERIFY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to sign a 16 bit value V, the owner of K simply puts on the stack the
binary representation of V indexed into the K. E.g., to sign &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;53593&lt;/code&gt;, first
expand to binary &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0b1101000101011001&lt;/code&gt;, then put the appropriate K values on the
stack.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;K_15_1
K_14_1
K_13_0
K_12_1
K_11_0
K_10_0
K_9_0
K_8_1
K_7_0
K_6_1
K_5_0
K_4_1
K_3_1
K_2_0
K_1_0
K_0_1
&amp;lt;sig&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This technique is kind of bulky! It’s around 80x16 = 1280 length for the
gadget, and 528 bytes for the witnesses. So it is &lt;em&gt;doable&lt;/em&gt;, if not a bit
expensive. There might be some more efficient scripts for this – would a
trinary representation be more efficient?&lt;/p&gt;

&lt;p&gt;The values that can be signed can be range limited either post-hoc (using
OP_WITHIN) or internally as was done with the 16 bit value circuit where it’s
impossible to do more than 16 bits.&lt;/p&gt;

&lt;p&gt;Keys &lt;em&gt;can&lt;/em&gt; be reused across scripts, but signatures may only be constructed one
time because a third party could take two signed messages and construct an
unintended value (e.g., if you sign both 4 and 2 then a third party could
construct 6).&lt;/p&gt;

&lt;p&gt;There are certain applications where this could be used for an effect – for
example, an oracle might have a bonding contract whereby posessing any K_i_0
and K_i_1 allows the burning of funds.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Templates, Eltoo, and Covenants, Oh My!</title>
   <link href="/blog/2021/07/02/covenants/"/>
   <updated>2021-07-02T00:00:00+00:00</updated>
   <id>/blog/2021/07/02/covenants</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/public/img/post-covenant-meme.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’ve been following The Discourse, you probably know that Taproot is
merged, locked in, and will activate later this November. What you might not
know is what’s coming next… and you wouldn’t be alone in that. There are a
number of fantastic proposals floating around to further improve Bitcoin, but
there’s no clear picture on what is ready to be added next and on what
timeline. No one – core developer, technically enlightened individuals, power
users, or plebs – can claim to know otherwise.&lt;/p&gt;

&lt;p&gt;In this post I’m going to describe 4 loosely related possible upgrades to
Bitcoin – SH_APO (BIP-118), OP_CAT, OP_CSFS, and OP_CTV (BIP-119). These four
upgrades all relate to how the next generation of stateful smart contracts can
be built on top of bitcoin. As such, there’s natural overlap – and competition
– for mindshare for review and deployment. This post is my attempt to stitch
together a path we might take to roll them out and why that ordering makes
sense. This post is for developers and engineers building in the Bitcoin space,
but is intended to be followable by anyone technical or not who has a keen
interest in Bitcoin.&lt;/p&gt;

&lt;h2 id=&quot;bitcoin-eschews-roadmaps-and-agendas&quot;&gt;Bitcoin Eschews Roadmaps and Agendas.&lt;/h2&gt;

&lt;p&gt;I provide this maxim to make clear that this document is by no means an
official roadmap, narrative, or prioritization. However, it is my own
assessment of what the current most pragmatic approach to upgrading Bitcoin is,
based on my understanding of the state of outstanding proposals and their
interactions.&lt;/p&gt;

&lt;p&gt;My priorities in producing this are to open a discussion on potential new
features, risk minimization, and pragmatic design for Bitcoin.&lt;/p&gt;

&lt;h3 id=&quot;upgrade-summaries&quot;&gt;Upgrade Summaries&lt;/h3&gt;

&lt;p&gt;Below follows summaries of what each upgrade would enable and how it works. You
might be tempted to skip it if you’re already familiar with the upgrades, but I
recommend reading in any case as there are a few non obvious insights.&lt;/p&gt;

&lt;h4 id=&quot;apo-sighash_anyprevout-sighash_anyprevoutanyscript&quot;&gt;APO: SIGHASH_ANYPREVOUT, SIGHASH_ANYPREVOUTANYSCRIPT&lt;/h4&gt;

&lt;p&gt;Currently proposed as
&lt;a href=&quot;https://github.com/bitcoin/bips/blob/d616d5492bc6e6566af1b9f9e43b660bcd48ca29/bip-0118.mediawiki&quot;&gt;BIP-118&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;APO provides two new signature digest algorithms that do not commit to the coin
being spent, or the current script additionally. Essentially allowing scripts
to use outputs that didn’t exist at the time the script was made. This would be
a new promise enforced by Bitcoin (ex. “You can close this Lightning channel
and receive these coins if you give me the right proof. If a newer proof comes
in later I’ll trust that one instead.”).&lt;/p&gt;

&lt;p&gt;APO’s primary purpose is to enable off chain protocols like
&lt;a href=&quot;https://blockstream.com/2018/04/30/en-eltoo-next-lightning/&quot;&gt;Eltoo&lt;/a&gt;, an
improved non-punitive payment channel protocol.&lt;/p&gt;

&lt;p&gt;APO can also
&lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/017038.html&quot;&gt;emulate&lt;/a&gt;
some of the main features of CTV and could be made to work with Sapio,
partially. See the complimentary upgrades section for more detail.&lt;/p&gt;

&lt;h4 id=&quot;cat--variants&quot;&gt;CAT (+ variants)&lt;/h4&gt;

&lt;p&gt;Currently no BIP. However, CAT exists in
&lt;a href=&quot;https://github.com/ElementsProject/elements/blob/bd2e2d5c64d38286b2ca0519f1215bed228e4dcf/src/script/interpreter.cpp#L914-L933&quot;&gt;Elements&lt;/a&gt;
and &lt;a href=&quot;https://github.com/bitcoincashorg/bitcoincash.org/blob/3e2e6da8c38dab7ba12149d327bc4b259aaad684/spec/may-2018-reenabled-opcodes.md&quot;&gt;Bitcoin
Cash&lt;/a&gt;
as a 520 byte limited form, so a proposal for Bitcoin can crib heavily from
either.&lt;/p&gt;

&lt;p&gt;Cat enables appending data onto other pieces of data. Diabolically simple
functionality that has many advanced use cases by itself and in concert with
other opcodes. There are many “straightforward” use cases of cat like requiring
sighash types, requiring specific R values, etc, but there are too many devious
use cases to list here.  Andrew Poelstra has a decent blogpost series (&lt;a href=&quot;https://www.wpsoftware.net/andrew/blog/cat-and-schnorr-tricks-i.html&quot;&gt;part
1&lt;/a&gt; and
&lt;a href=&quot;https://www.wpsoftware.net/andrew/blog/cat-and-schnorr-tricks-ii.html&quot;&gt;part
ii&lt;/a&gt;) if
you’re interested to read more. In particular, with much cleverness, it seems
possible one could implement full covenants with just CAT, which covers
(inefficiently) most of the other techniques discussed in this post.&lt;/p&gt;

&lt;h4 id=&quot;csfs-checksigfromstack&quot;&gt;CSFS: CHECKSIGFROMSTACK&lt;/h4&gt;

&lt;p&gt;Currently no BIP. However, CSFS exists in
&lt;a href=&quot;https://github.com/ElementsProject/elements/blob/bd2e2d5c64d38286b2ca0519f1215bed228e4dcf/src/script/interpreter.cpp#L1580-L1618&quot;&gt;Elements&lt;/a&gt;
and in &lt;a href=&quot;https://github.com/bitcoincashorg/bitcoincash.org/blob/master/spec/op_checkdatasig.md&quot;&gt;Bitcoin
Cash&lt;/a&gt;,
so a proposal for Bitcoin can crib heavily from either.&lt;/p&gt;

&lt;p&gt;CSFS enables checking of a signature against a message and key from the stack
without including any transaction data.&lt;/p&gt;

&lt;p&gt;Use cases include oracle protocols, key delegations, a &lt;a href=&quot;https://stanford2017.scalingbitcoin.org/files/Day1/SB2017_script_2_0.pdf&quot;&gt;channel update
invalidation
variant&lt;/a&gt;
(Laolu claims this can be tweaked to be fully non punitive like eltoo, but
you’ll need to bug him to write it up), and (+CAT) full covenants.&lt;/p&gt;

&lt;h4 id=&quot;ctv-op_checktemplateverify&quot;&gt;CTV: OP_CHECKTEMPLATEVERIFY&lt;/h4&gt;

&lt;p&gt;Currently proposed as
&lt;a href=&quot;https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki&quot;&gt;BIP-119&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CTV enables committing to a specific “next” transaction from script. This is
the ability to make an unbreakable promise on chain which Bitcoin can enforce
(e.g. “This coin can only be spent to my multisig, or my backup after a
timelock”). This is a departure from normal script which is traditionally only
concerned with restrictions on the sender, CTV imposes restrictions on the
recipient. More technically, CTV is essentially the ability to embed a
signature of a specific transaction inside of a script without needing any
elliptic curve operations. The validation costs are low. For more advanced
logic, you can nest multiple different CTV Hashes either using taproot or up to
the script length limits in regular script.&lt;/p&gt;

&lt;p&gt;CTV can be used for vaults, channels, and &lt;a href=&quot;https://utxos.org/uses/&quot;&gt;many other
uses&lt;/a&gt;. There’s also
&lt;a href=&quot;https://learn.sapio-lang.org&quot;&gt;Sapio&lt;/a&gt; which is a language and toolkit for
creating many kinds of programs with CTV.&lt;/p&gt;

&lt;p&gt;CTV compliments CSFS to be able to emulate APO-like functionality
sufficient to build Eltoo, potentially making APO feature-wise redundant.&lt;/p&gt;

&lt;h2 id=&quot;comparative-analysis&quot;&gt;Comparative Analysis&lt;/h2&gt;

&lt;p&gt;Now that we’ve got the basics covered, let’s explore these upgrades
comparatively across several dimensions.&lt;/p&gt;

&lt;h3 id=&quot;design-specificity&quot;&gt;Design Specificity&lt;/h3&gt;

&lt;p&gt;“Design Specificity” is a subjective measure of how substantially an upgrade
could change from its current design while still meeting the features goals. It
is not to be confused with security or safety. Ranked in order from most to
least design specific, with non-exhaustive lists of design questions based on
ongoing community discourse as well as my own personal understanding of what
might be desirable.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CSFS&lt;/li&gt;
  &lt;li&gt;CTV&lt;/li&gt;
  &lt;li&gt;CAT&lt;/li&gt;
  &lt;li&gt;APO&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;explanations--open-questions&quot;&gt;Explanations &amp;amp; Open Questions:&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;CSFS is very simple and there is essentially a single way to implement it. Three open questions are:
    &lt;ol&gt;
      &lt;li&gt;Should CSFS require some sort of tagged hash? Very likely answer is no –
tags interfere with certain use cases)&lt;/li&gt;
      &lt;li&gt;Should CSFS split the signature’s R &amp;amp; S value stack items for some
applications that otherwise may require OP_CAT? E.g. using a pinned R
 value allows you to extract a private key if ever double signed, using 2 R
 values allows pay-to-reveal-key contracts. Most likely answer is no, if that is
 desired then OP_CAT can be introduced&lt;/li&gt;
      &lt;li&gt;Should CSFS support a cheap way to reference the taproot internal or
external key? Perhaps, can be handled with undefined upgradeable
 keytypes. One might want to use the internal key, if the signed data should be
 valid independent of the tapscript tree.  One might want to use the external
 key, if the data should only be valid for a single tapscript key + tree.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;CTV is a commitment to all data that can malleate TXID besides the inputs
being spent, therefore CTV does not have much space for variation on design.
    &lt;ol&gt;
      &lt;li&gt;Should the digest be reordered or formatted differently? If there were
more data on what types of covenants might be built in the future, a
 better order could be picked. Some thought has already gone into an order and
 commitments that make covenants easier, see the BIP for more. It’s also
 possible the serialization format for the variable length fields (scriptsigs,
 outputs) could be changed to make it easier to work with from script. (Maybe,
 minor change)&lt;/li&gt;
      &lt;li&gt;Should CTV include more template types? Possibly, CTV includes an upgrade
mechanism baked in for new template types, so it is extensible for future
 purposes.&lt;/li&gt;
      &lt;li&gt;Should CTV commit to the amounts? CTV does not commit to the amount that
a coin has. Input-inspecting functionality should be handled by separate
 opcodes, as CTV would be overly restrictive otherwise. E.g. dynamic fees
 through new inputs would be harder: given CTV’s design it is not possible to
 detect which field did not match therefore it is not possible to script against
 unexpected amount sent errors without some compromise (e.g. timeouts).&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;CAT is simplistic, and there are really few ways to implement it. However,
because it requires some restrictions for security, there are difficult to
 answer open design questions:
    &lt;ol&gt;
      &lt;li&gt;What is the appropriate maximum stack size CAT should permit? Currently
the design in Elements is 520 bytes, the max general stack size permitted
 in script.&lt;/li&gt;
      &lt;li&gt;Should CAT be introduced or
&lt;a href=&quot;https://github.com/ElementsProject/elements/pull/817&quot;&gt;SHASTREAM&lt;/a&gt;,
 SUBSTRING, or another variant? There is a strong argument for SHASTREAM because
 when constructing covenants (e.g. for use with CTV) based on TX data it’s
 possible for size of a data field (e.g., serialization of all outputs) to
 exceed 520 bytes.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;There are many tough questions that the community has grappled with during
APO’s design and engineering process, generally asking how APO-like
 techniques can be made ‘Generally Safe’ given iit breaks current assumptions
 around address reuse.
    &lt;ol&gt;
      &lt;li&gt;Should APO require chaperone signatures (in order to ensure that replay
is not done by 3rd parties)? Current Answer: No, anyone is free to burn
 their keys by revealing them to similar effect.&lt;/li&gt;
      &lt;li&gt;Should APO use key tagging to mark keys that can use APO: Current Answer:
yes, APO should be “double opt-in” (both requiring a tag and a signer to
 produce such a signature)&lt;/li&gt;
      &lt;li&gt;Should APO allow signing with the external taproot key: Current Answer:
no, because it makes APO not “double opt-in”.&lt;/li&gt;
      &lt;li&gt;Should APO optimize signing with the internal taproot key? Answer:
default key 0x01 refers to taproot internal key, so it can be made
 cheaper if you’re going to need it without having to repeat the entire key.&lt;/li&gt;
      &lt;li&gt;Should APO commit to the signing script? Answer: let’s do two variants.&lt;/li&gt;
      &lt;li&gt;Should APO instead be a larger refactoring of sighash logic that
encapsulates APO (e.g. sighash bitmasks)? Current Answer: No, APO is good
 enough to ship as is and doesn’t preclude future work.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;safety&quot;&gt;Safety&lt;/h3&gt;

&lt;p&gt;This category covers how “safe” each change is ranked from safest to least
safe. What makes a change more or less safe is how limited and foreseeable the
uses are of a specific opcode, in other words, how well we understand what it
can do or where it might interact poorly with deployed infrastructure.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CTV&lt;/li&gt;
  &lt;li&gt;CSFS&lt;/li&gt;
  &lt;li&gt;APO&lt;/li&gt;
  &lt;li&gt;CAT&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CTV is the safest new feature since fundamentally what it introduces is very
similar to what can be done with pre-signed transactions, so it is only a pivot
on trust and interactivity. Where there is some risk from CTV is that addresses
(or rather, invoices) that are reused might have the same program behind them
which could cause unintended behavior. This differs from the reuse problem in
APO because the problem is stateless, that is, if you verify what is behind an
address you will know what exists and does not exist. E.g., two payment channel
addresses will create distinct payment channels that updates cannot be replayed
across. In contrast with APO, paying one APO using address twice creates two
instances of the same channel, state updates from one channel can be used on
the other.&lt;/p&gt;

&lt;p&gt;CSFS is the next safest, it is just a small piece of authenticated data. CSFS
and CTV are relatively close in terms of safety, but CSFS is slightly less safe
given a remote possibility of surprising  uses of it to perform unforeseen
elliptic curve operations. This functionality already exists for up to 5-byte
messages. A hash preimage revelation can emulate a signer compactly. Using
binary expansions and addition could be used to allow signing of values more
compactly (e.g., 2x16x32 byte hashes could be used to construct a signature of
a post-hoc selected Sequence lock). &lt;a href=&quot;/blog/2021/07/02/signing-5-bytes/&quot;&gt;Read more here&lt;/a&gt;. Therefore it is appropriate to think of
CSFS as an expansion of the efficiency of this technique, reusability of keys,
and the types of data that can be signed over. Although CSFS is famously used
to build covenants by comparing a CSFS signature to a CHECKSIG signature and
getting transaction data onto the stack, CSFS cannot do that without CAT.&lt;/p&gt;

&lt;p&gt;APO. This is the next safest because APO has some questions around key reuse
safety and statefulness of information. See the above description in CTV for
why this is tangibly worse for APO than CTV. &lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-September/002176.html&quot;&gt;See more discussion of APO’s
safety &amp;amp; design trade offs
here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CAT is the least ‘safe’ in terms of extant Bitcoin concepts as it is highly
likely CAT introduces at least advanced covenants if added, especially in
conjunction with the above opcodes, but may also enable other unintended
functionality. CAT is a source of continual surprise with regards to what it
enables in composition with existing opcodes, therefore a systematic review of
composability and known uses should be done before considering it. That CAT was
forked out by Satoshi is of limited relevance as the variant proposed for
reintroduction would not have the vulnerability present initially.&lt;/p&gt;

&lt;h3 id=&quot;complimentary-upgrades&quot;&gt;Complimentary Upgrades&lt;/h3&gt;

&lt;p&gt;Pairings of upgrades can work together to deliver functionality that neither
could alone:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CAT + CSFS: full blown arbitrary covenants
    &lt;ol&gt;
      &lt;li&gt;With arbitrary covenants you can deploy many different kinds of smart
contracts which are out of scope for this article.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;CAT + CTV: Expanded covenants
    &lt;ol&gt;
      &lt;li&gt;slightly simpler to use interface but fewer features than CSFS + CAT which can
covenant over witness data and inputs.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;CTV + CSFS: Eltoo
    &lt;ol&gt;
      &lt;li&gt;This can add very similar functionality to eltoo with the script fragment:
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTV &amp;lt;musig(pka, pkb)&amp;gt; CSFS &amp;lt;S+1&amp;gt; CLTV&lt;/code&gt;
 The protocol is essentially identical to the Eltoo paper, however there are
 a couple subtle differences required for dynamic fee rates.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;CTV + APO: Slightly Different
    &lt;ol&gt;
      &lt;li&gt;Several sources have claimed that APO offers a strict superset
of CTV’s functionality (but not efficiency). This is false. Their digests
are slightly different, as such there are some niche smart contracts that could
use the differences in commitment structure for interesting effects (CTV
commits to all scriptsigs and sequences, APO cannot cover that data but can
cover a few variants of less data covered).&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By all means not an exhaustive list – feel free to message me with additions.&lt;/p&gt;

&lt;h3 id=&quot;recommendation&quot;&gt;Recommendation&lt;/h3&gt;

&lt;p&gt;My recommendation is to deliver the upgrades described in this document in the
following order:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CTV&lt;/li&gt;
  &lt;li&gt;CSFS&lt;/li&gt;
  &lt;li&gt;APO&lt;/li&gt;
  &lt;li&gt;CAT/SHASTREAM/SUBSTRING/etc&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This recommendation comes as a synthesis of the thoughts above on the
composability, safety, and open design considerations of the various proposals
currently in flight.&lt;/p&gt;

&lt;p&gt;With CTV in place, we can begin experimenting with a wide variety of contracts
using the Sapio toolchain, as well as improve and invest in maturing the
toolchain. Mature toolchains will make it easier to safely engineer and deploy
applications making use of CTV and future upgrades.&lt;/p&gt;

&lt;p&gt;CSFS is an independent change that can be deployed/developed in parallel to or
before CTV, the implementation from Elements could be easily ported to Bitcoin.
With CSFS and CTV, Eltoo-like constructions will be possible as well.&lt;/p&gt;

&lt;p&gt;APO can then be deployed as an optimization to existing use patterns driven by
market adoption of CTV+CSFS based use. This also gives us time to kick the can
down the road on the design questions that APO prompts around generalization of
signature digests and key reuse safety.  A similar approach was &lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016996.html&quot;&gt;discussed on
the mailing
list&lt;/a&gt;,
but without the insight that CSFS + CTV was sufficient for Eltoo like
constructions, requiring CAT instead.&lt;/p&gt;

&lt;p&gt;Lastly, OP_CAT can be delivered as part of an effort towards generalized
arbitrary covenants and perhaps in conjunction with some special purpose
opcodes (such as OP_CHECKINPUT) that can more easily handle common cases. CAT,
although it has safe implementations used in Elements, deserves very strict
scrutiny given it’s documented surprising uses.&lt;/p&gt;

&lt;p&gt;This approach represents a gradual relaxation of Bitcoin’s restrictions around
smart contract programming that introduces useful, safe primitives and gives
the community time to build and deploy useful infrastructure. The path
described in this post is an opportunity to upgrade bitcoin with simple
primitives that compose nicely for permissionless innovation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks to those who reviewed drafts of this post and provided valuable
feedback improving the clarity and accuracy of this post, including
&lt;a href=&quot;https://github.com/pyskell&quot;&gt;pyskell&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ProofOfKeags&quot;&gt;Keagan
McClelland&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/RyanTheGentry&quot;&gt;Ryan
Gentry&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/roasbeef&quot;&gt;Olaoluwa
Osuntokun&lt;/a&gt;. Edit + Feedback ≠ Endorsement.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Designing Bitcoin Contracts with Sapio</title>
   <link href="/talks/2021/06/10/bitcoin21-talk/"/>
   <updated>2021-06-10T00:00:00+00:00</updated>
   <id>/talks/2021/06/10/bitcoin21-talk</id>
   <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/w3FL0kEO_R4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Bitcoin is DeFi Panel</title>
   <link href="/talks/2021/06/09/bitcoin21-panel/"/>
   <updated>2021-06-09T00:00:00+00:00</updated>
   <id>/talks/2021/06/09/bitcoin21-panel</id>
   <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/VQgklSuo0KU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>How Taproot Could Improve Bitcoin — If It Gets Adopted</title>
   <link href="/talks/2021/06/04/unconfirmed-taproot/"/>
   <updated>2021-06-04T00:00:00+00:00</updated>
   <id>/talks/2021/06/04/unconfirmed-taproot</id>
   <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/pAcCNDiJX-I&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Delegated signatures in Bitcoin within existing rules, no fork required (Connector Outputs)</title>
   <link href="/bitcoin/2021/03/10/coin-delegates/"/>
   <updated>2021-03-10T00:00:00+00:00</updated>
   <id>/bitcoin/2021/03/10/coin-delegates</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This originally appeared on the &lt;a href=&quot;https://gnusha.org/pi/bitcoindev/CAD5xwhhC1Y13p7KazfUOXFZ5vi5MA9EQ-scyafv4aNkjskoXBg@mail.gmail.com/&quot;&gt;mailing list&lt;/a&gt;, and has been edited lightly for some updates in 2025.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’m aware that some folks (I think nullc, sipa, myself… maybe more?) are
aware of how to do script delegation in Bitcoin today (without any
modifications to Bitcoin), but realized in a conversation with Andrew P
that the technique is not widely known. So I figured it made sense to do a
brief explainer of how this works for the archives / so the technique is
documented. If someone has other citations for this, please let me know. This 
technique is now popular in BitVM and in Ark.&lt;/p&gt;

&lt;p&gt;If you like cartoons follow along &lt;a href=&quot;https://docs.google.com/presentation/d/1ikcthy3p-Ah59pJyss0TLEj-Q2FF6tv7BXhkORzErAE/edit#slide=id.p&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Technically what we are doing is delegating a UTXO to a specific UTXO, and
not to a script.&lt;/p&gt;

&lt;p&gt;Suppose you have a coin on UTXO A. You would like to delegate it to script
S. You can either scan the chain for any UTXOs bound to S or use some
arbitrary coin B to create a transaction X with an output D that has script
S (doesn’t have to have any value, but let’s say it has a nominal amount to
avoid dust issues). Because tx X is not malleable, we don’t need to
actually broadcast it and spend B till we want to use the delegation, and
it can be created (for the TXID) without B’s owner being online. However
you get the UTXO, and if it exists or not yet, let’s call it D.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: if you’re using a delegation script multiple times, you can optimize
the creation step a bit&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, using A, you sign a transaction with 2 inputs (one of them being D)
and SIGHASH_NONE. This signs all of the inputs (but not their sequences!)
but none of the outputs. Let’s call this transaction stub G.&lt;/p&gt;

&lt;p&gt;Now, using S, you sign D’s input on G with SIGHASH_ALL and the outputs you
want to create (whatever they may be). Let’s call the finished transaction
F.&lt;/p&gt;

&lt;p&gt;Effectively, the holder of A has delegated the control of their coin to a
specific instance of the script S. Once delegated, S may authorize almost
any transaction they want (complicated if they want to sign a multiple
input transaction; but there are good substitutes).&lt;/p&gt;

&lt;p&gt;Advanced Topics:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Revocation&lt;/em&gt;: There are multiple ways to revoke, either moving A, moving D,
refusing to sign and create D (when D is derived from B), etc. Because
these are UTXO-bound they are revocable. (the cartoon may help here)
&lt;em&gt;Cross input delegation&lt;/em&gt;: A set of N coins may create a sighash_none
transaction with 1 additional input for the delegating script
&lt;em&gt;Partial Spending Authorizations&lt;/em&gt;: Replacing sighash_none with
sighash_single allows an input to specify a single change address (plug –
OP_CTV covenants can be thought of as a way to get around sighash_single to
allow sighash_single to cover signing a set of outputs)
&lt;em&gt;Delegation after time&lt;/em&gt;: Because the lock_time field is covered,
delegations can be set up to only be valid at some point in the future.
Only a single sequence lock per delegated coin may be used directly.
&lt;em&gt;Multiple Delegates: *By signing a txn with several delegate outputs, it is
possible to enforce multiple disparate conditions. Normally this is
superfluous – why not just concatenate S1 and S2? The answer is that you
may have S1 require a relative height lock and S2 require a relative time
lock (this was one of the mechanisms investigated for powswap.com).
*Sequenced Contingent Delegation&lt;/em&gt;: By constructing a specific TXID that may
delegate the coins, you can make a coin’s delegation contingent on some
other contract reaching a specific state. For example, suppose I had a
contract that had 100 different possible end states, all with fixed
outpoints at the end. I could delegate coins in different arrangements to
be claimable only if the contract reaches that state. Note that such a
model requires some level of coordination between the main and observing
contract as each Coin delegate can only be claimed one time.
*CTV Specific P2SH Non Coin Delegation: *OP_CTV allows for a similar form
of delegation where by a Segwit P2SH address, as a part of the CTV
committed data, can be used without binding it to any specific UTXO. With
the addition of OP_CAT, it would be possible to both programmatically
change the outputs (rather than just approving the fixed txn) and to
dynamically select the script.
*Redelegating: *This is where A delegates to S, S delegates to S’. This
type of mechanism most likely requires the coin to be moved on-chain to the
script (A OR S or S’), but the on-chain movement may be delayed (via
presigned transactions) until S’ actually wants to do something with the
coin.&lt;/p&gt;

&lt;p&gt;There are obviously many other things you can do with delegation in
general, the above are specific to how coin delegation is done. I’m
probably missing some of the fun stuff – please riff on this!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fireside Chat Jeremy Rubin BTC Core Dev & Judica</title>
   <link href="/talks/2020/09/15/cryptofinally/"/>
   <updated>2020-09-15T00:00:00+00:00</updated>
   <id>/talks/2020/09/15/cryptofinally</id>
   <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/srMXBHkoxEM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>BITCOIN DEVELOPER IN FOCUS</title>
   <link href="/talks/2020/09/09/vallis/"/>
   <updated>2020-09-09T00:00:00+00:00</updated>
   <id>/talks/2020/09/09/vallis</id>
   <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/q3pgcVfR-KY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Sapio Stateful Smart Contracts for Bitcoin with OP_CTV</title>
   <link href="/talks/2020/07/11/reckless/"/>
   <updated>2020-07-11T00:00:00+00:00</updated>
   <id>/talks/2020/07/11/reckless</id>
   <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/4vDuttlImPc&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>CTV Interview by Aaron van Wirdum</title>
   <link href="/talks/2020/06/22/btcmag-ctv-interview/"/>
   <updated>2020-06-22T00:00:00+00:00</updated>
   <id>/talks/2020/06/22/btcmag-ctv-interview</id>
   <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/0rMQ1p6q36g&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

</content>
 </entry>
 
 <entry>
   <title>BIP-119</title>
   <link href="/talks/2020/04/06/mit-expo-2020/"/>
   <updated>2020-04-06T00:00:00+00:00</updated>
   <id>/talks/2020/04/06/mit-expo-2020</id>
   <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/UgIEJeJg_ik&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>CHECKTEMPLATEVERIFY</title>
   <link href="/talks/2020/01/30/chaincode-3/"/>
   <updated>2020-01-30T00:00:00+00:00</updated>
   <id>/talks/2020/01/30/chaincode-3</id>
   <content type="html">&lt;iframe src=&quot;https://anchor.fm/chaincode/embed/episodes/Jeremy-Rubin-and-CHECKTEMPLATEVERIFY---Episode-3-eahnt3/a-a1cotkp&quot; height=&quot;102px&quot; width=&quot;400px&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>The Bitcoin Game 66 Jeremy Rubin</title>
   <link href="/talks/2019/07/02/the-bitcoin-game/"/>
   <updated>2019-07-02T00:00:00+00:00</updated>
   <id>/talks/2019/07/02/the-bitcoin-game</id>
   <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/FZck9V2fWn0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Protocol Improvement Outlooks w/ Matt Corallo, Jeremy Rubin, 'Roasbeef' & Steve Lee</title>
   <link href="/talks/2019/06/29/bitcoin-2019/"/>
   <updated>2019-06-29T00:00:00+00:00</updated>
   <id>/talks/2019/06/29/bitcoin-2019</id>
   <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/JhokT9Fg4FA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Spork Probabilistic Bitcoin Soft Forks</title>
   <link href="/talks/2019/02/06/sbc-spork/"/>
   <updated>2019-02-06T00:00:00+00:00</updated>
   <id>/talks/2019/02/06/sbc-spork</id>
   <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/J1CP7qbnpqA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>The Problem with ASICBOOST</title>
   <link href="/talks/2018/11/04/asicboost/"/>
   <updated>2018-11-04T00:00:00+00:00</updated>
   <id>/talks/2018/11/04/asicboost</id>
   <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ET2QDRZVUwc&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Giving Money Away?</title>
   <link href="/bitcoin/2018/06/30/cant-give-wealth/"/>
   <updated>2018-06-30T19:18:08+00:00</updated>
   <id>/bitcoin/2018/06/30/cant-give-wealth</id>
   <content type="html">&lt;p&gt;&lt;em&gt;a version of this originally appeared on &lt;a href=&quot;https://www.tokendaily.co/blog/giving-money-away&quot;&gt;tokendaily.co&lt;/a&gt;, I still need to verify all edits match.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Give a Man a Bitcoin, and You Feed Him for a Day. Teach a Man To Mine Bitcoin, and You
Feed Him for a Lifetime. – Ancient Proverb&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don’t snooze – many cryptocurrency projects are giving away coins for free – act
fast and you can get some too!
Whatever they call it: an airdrop, a share, a gift, a giveaway, etc, the idea is
the same, noble intentions of correcting long-standing social iniquities by
“giving money away” (in the form of cryptocurrency) to disenfranchised
groups&lt;sup id=&quot;fnref:0&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:0&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. The disenfranchised group varies project-to-project; sometimes it is F/LOSS developers,
sometimes all internet users, low-income individuals, etc.&lt;/p&gt;

&lt;p&gt;There’s a catch that subverts this good intention – even ignoring difficult
issues around identification of real users – it’s really hard to effectively
correct these iniquities by giving away cash.&lt;/p&gt;

&lt;p&gt;Plans that simply give out assets are misguided, because they conflate &lt;em&gt;money&lt;/em&gt;
with a different, though related, concept: &lt;em&gt;wealth&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There are many ways to define these terms, but in this article I’ll define
wealth as an individual’s ability to instigate changes that improve their
current situation in some capacity. For example, I am wealthy if I know how to
fix my own car when it breaks down. There are also harder to quantify forms of
this wealth which only exist relative to a group such as leadership ability.&lt;/p&gt;

&lt;p&gt;On the other hand, for this article, I’ll define money as a tool for convincing
others of an individual’s wealth when they want something. For example, I could
get a mechanic to fix my car in exchange a service or good of equal value –
perhaps I can give the mechanic some advice on her ICO pitch deck – but in many
cases it’s difficult to find something the other party wants, values equally,
knows I have, or that I am able to offer currently.  Instead, I give the
mechanic a fixed amount of money, which is an easier to agree on &lt;em&gt;means of
exchange&lt;/em&gt;, &lt;em&gt;unit of account&lt;/em&gt;, and &lt;em&gt;store of value&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In another sense, money is a symptom of wealth. Where there is smoke, there is
fire. Where there is money, there should be wealth. If one has a valuable skill,
such as knowing how to rebuild an engine, one can use it to acquire money. While
having money might be a good indicator that one possesses some valuable skill,
you can easily imagine situations where this would be a false indicator – like
lottery winners.&lt;/p&gt;

&lt;p&gt;Giving money to a person lacking financial responsibility is unlikely to
increase their wealth; like trying to use a cloud of smoke to start a fire.
Lottery winners exemplify the challenge of converting ‘unearned’ money into
wealth, about a third or more quickly go bankrupt despite their winnings&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.
Intuitively, if you wouldn’t invest in a slot jockey with your money before they
hit the jackpot, what makes you think they’d do any better with their winnings?&lt;/p&gt;

&lt;p&gt;Giving people wealth is more effective than giving them money. But is giving away
wealth possible? And just how effective can giving away money truly be?&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Let’s set those questions aside for a moment, we’ll revisit them later.&lt;/p&gt;

&lt;p&gt;For now, we’ll construct a toy model&lt;sup id=&quot;fnref:inspiredby&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:inspiredby&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; for discussing giveaways. As with any
model, this toy model is overly simplified for many reasons – I’ll do my best
to clarify which things are simplified. The main purpose in presenting a toy
model is to establish a common framework for how to think about giveaways.&lt;/p&gt;

&lt;p&gt;Suppose we can represent everyone in the world’s assets as a vector \(v_a\)
and their wealth as a vector \(v_w\). Assets are tangible things usable for
transactions or ownership, and wealth is a measure of an individuals quality.
For instance, a debit card uses assets and a credit card uses wealth.&lt;/p&gt;

&lt;p&gt;We can model assets as a proxy for wealth, and model the efficiency of the proxy
with a cost function such as Euclidean distance between the normalized vectors.
We normalize the vectors to account for unit bias&lt;sup id=&quot;fnref:unit&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:unit&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, if everyone had $100 or $1M,
it wouldn’t matter.&lt;/p&gt;

\[C_P(v_a, v_w) = \sqrt{(\hat{v}_m - \hat{v}_w)^2}\]

&lt;p&gt;In reality, Euclidean distance may be a really poor choice of cost function –
perhaps a better choice is cosine similarity, perhaps there is a regularization
parameter that says cost should be higher if the distribution doesn’t fall
along a power law, perhaps Gini coefficient&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;  should be included, etc. But we
will get a lot of mileage out of using a simple cost function for discussing the
general shape of the problem.&lt;/p&gt;

&lt;p&gt;I posit you can only meaningfully give people assets insofar as the giveaway
works to minimize the cost function subject to a regularization parameter (otherwise our
giveaway might be &lt;em&gt;too&lt;/em&gt; radical, which could destabilize the economy). For
example, the following formula is one possible giveaway cost function:&lt;/p&gt;

\[C_G(v_a, v_w, \Delta v_a) = C_P(v_a + \Delta v_a, v_w
) - C_P(v_a, v_w) + \eta \cdot || \Delta v_a||\]

&lt;p&gt;In plain English, you want the smallest giveaway for the largest correction in
wealth/assets disparity. If \(C_G(v_a, v_w, \Delta v_a) &amp;gt; 0\), then you
destabilize the monetary supply.&lt;/p&gt;

&lt;p&gt;Again, this cost function is only offered as an example. We may also care
about other regularizations against different types of giveaways – for
instance, we might want to penalize giveaways that are ‘unfair’ with high
variance between amounts – but we can use this model a starting point to look
at a few examples.&lt;/p&gt;

&lt;p&gt;If you want to follow along, the model is in python below:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To work a quick, concrete example of correcting inequalities:&lt;/p&gt;

&lt;p&gt;Suppose Alice has $10 and Bob has $20, but
Alice is “worth” $10 and Bob is “worth” $12. I.e., \(v_a = [10, 20], v_w = [10,
12]\). To correct for the inequality, we either want Alice to have more money
or Bob to have less. How bad is the current inequality? The cost function tells
us \(C_P([10, 20], [10, 12]) \approx 0.23\).&lt;/p&gt;

&lt;p&gt;Suppose \(\eta = 0.01\).&lt;/p&gt;

&lt;p&gt;Let’s examine four plausible giveaways&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if we give everyone a small amount?&lt;/strong&gt;
\(\Delta v_a = [1, 1] \to C_G \approx -0.0046\)&lt;/p&gt;

&lt;p&gt;Negative cost! It works! By increasing Alice’s and Bob’s assets, we made the
overall efficiency of the monetary supply better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if we give everyone a lot!&lt;/strong&gt;&lt;/p&gt;

\[\Delta v_a = [10, 10] \to C_G \approx 0.018\]

&lt;p&gt;Too much! Our money is less efficient.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if we tax Bob a little and give to Alice?&lt;/strong&gt;&lt;/p&gt;

\[\Delta v_a = [1, -1] \to C_G \approx -0.047\]

&lt;p&gt;&lt;strong&gt;What if we tax Bob a lot and give the tax to Alice?&lt;/strong&gt;&lt;/p&gt;

\[\Delta v_a = [6, -6] \to C_G \approx 0.011\]

&lt;p&gt;&lt;strong&gt;What if we just destroy some of Bob’s assets?&lt;/strong&gt;&lt;/p&gt;

\[\Delta v_a = [0, -11] \to C_G \approx 0.023\]

&lt;p&gt;Let’s look at these examples as graphs. In the below graphs of giveaways, the blue
areas are efficient, the red is inefficient, and the white areas are neutral.
On the X axis is the amount Alice is to receive, on the Y axis Bob. Mind the scales on the right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/giveaway/cost-eta-0.01.png&quot; alt=&quot;Small Eta&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nice – there is a large blue region where we can improve the inequality! This
region is roughly a line segment from \((-10, -20)\) to \((18, 12)\).&lt;/p&gt;

&lt;p&gt;In reality, in this model we might want to pick \(\eta\) such that the
regularization amount is 1 if the size of the giveaway is the same as the
monetary supply:&lt;/p&gt;

\[\eta = \frac{1}{||v_a||} = \frac{1}{\sqrt{10^2 + 20^2}} \approx 0.045\]

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/giveaway/cost-eta-0.045.png&quot; alt=&quot;Big Eta&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, the blue region is much smaller, and the maximum magnitude of the benefit
is several orders of magnitude smaller. The giveaway doesn’t work that well!&lt;/p&gt;

&lt;p&gt;Finding cost-reducing giveaways may be impossible in many circumstances (e.g.,
with a slightly greater \(\eta\)). This is always the case if the
cost-function \(C_G\) is positive semi-definite with respect to the initial
condition.&lt;/p&gt;

&lt;p&gt;It bears repeating: this model is heavily simplified. In a real scenario, the
regularization is much likely much larger.&lt;/p&gt;

&lt;p&gt;Major wealth transfers often involve war,
death, and destruction. Intuitively, if I stand to lose $M dollars, I am willing
to spend $M dollars to prevent that loss (even if the total loss may be larger
– see war of attrition&lt;sup id=&quot;fnref:war&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:war&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;)&lt;/p&gt;

&lt;p&gt;We also can’t simply find the blue-zones easily – ultimately, we don’t know how
wealthy everyone is exactly and there are billions of people, not just two.
Wealth is not a fixed quantity. Just giving someone assets doesn’t make them
wealthier, nor does taking away some of their assets in the short term. In the
long term, however, people’s wealth drifts and moves.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;There’s been a lot of research that’s been done on the efficacy various forms of
giveaway. Here’s a run down on 4 cases:&lt;/p&gt;

&lt;p&gt;Example 1: Finland gave away 560 euros/month to 2,000 randomly selected
unemployed Finns for two years. Finland didn’t find an increase in employment,
but did find increased happiness. When the recipients base was slated to
increase, unsavory side effects such as increased nationalism manifested&lt;sup id=&quot;fnref:6&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Example 2: GiveDirectly gives unconditional cash transfers to impoverished areas
in East Africa. GiveDirectly claims to have seen a large improvement in the
earnings of those who received unconditional cash transfers several years after
the transfer&lt;sup id=&quot;fnref:givedirectly&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:givedirectly&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Example 3: The EU Africa Emergency trust, which is referenced in the
Economist&lt;sup id=&quot;fnref:6:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;, set up gifts to give to residents of countries which were below a
certain poverty threshold if the government would share key reports and data.
The program faced budgetary issues.&lt;/p&gt;

&lt;p&gt;Example 4: &lt;a href=&quot;https://www.givecrypto.org&quot;&gt;GiveCrypto&lt;/a&gt; is a brand new initiative
which gives crypto wallets with coins (unclear &lt;em&gt;which&lt;/em&gt; ones) to those in need.
This is substantial because cryptocurrency also helps fill in with banking
infrastructure, unlike previous programs like GiveDirectly which relied on
existing analog systems.&lt;/p&gt;

&lt;p&gt;A problem shared across these studies broadly is that they are not large enough.
The amounts of money dispersed is significantly smaller than the magnitude of
inequality between the sponsors and the recipients. Performing such socioeconomic
experiments at scale may self destruct an economy and society unwilling to bear
the cost of a non-experiment sized giveaway. Increasing nationalism, as seen in
Finland, could be a precursor for increased violence or decreased long term
global development.&lt;/p&gt;

&lt;p&gt;A second issue is that these programs are targeted at increasing wealth, not
decreasing inequality. As is often said, a rising tide raises all boats. If the
global economy improves as a result of assisting impoverished individuals, the
benefit is not clearly greater for the receiver than the giver. For instance,
the giver may benefit greatly from having new agricultural trade, sources of
cheap educated labor, advanced manufacturing capability, or from increasing
peace in troubled regions defraying the risk of costly wars.&lt;/p&gt;

&lt;p&gt;A third concern is that such programs create subversive reliance. For instance,
in Gambia, when politicians wanted to stop passing on surveillance data to the
EU, which would end the payments, mass protests erupted. The Gambian citizens
were put into a precarious relationship with the EU, whereby the EU had the
power to influence their politics and conduct – perhaps against their longer
term interests. This emphasizes the importance of unconditionality, as
promulgated by GiveDirectly. Unfortunately, the discretion to continue or not
continue a giveaway itself constitutes a conditionality. It’s best to structure
programs so as to minimize the chance of dependence or economic reliance for
the independence and freedom of the recipients.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s look examine some strategies in light of the real world research and our
model.&lt;/p&gt;

&lt;h2 id=&quot;give-small-amounts-frequently&quot;&gt;Give Small Amounts, Frequently&lt;/h2&gt;

&lt;p&gt;Giving away a large amount should be mostly infeasible because of
regularization.  However, by giving away small amounts repeatedly, we have an
opportunity to re-examine the money to wealth ratios for each individual, and we
also give the money distributed a chance to impact wealth. This is reminiscent
of gradient descent as used in Machine Learning&lt;sup id=&quot;fnref:grad&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:grad&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The down side is that if the distributions are too small then the economy can
sufficiently absorb and dissipate the extra money without benefiting anyone, and
if they are too frequent then it may not be different than a single larger
    giveaway, causing chaos.&lt;/p&gt;

&lt;h2 id=&quot;target-specific-groups-with-bad-wealth--assets-ratios&quot;&gt;Target Specific Groups with Bad Wealth : Assets Ratios&lt;/h2&gt;

&lt;p&gt;One way to improve the odds of our distribution working is by finding
small communities with bad money to wealth ratios and focusing on them
exclusively. This is essentially the GiveDirectly model for working in East
Africa.&lt;/p&gt;

&lt;p&gt;However, we must be careful. Because of the normalization of the assets vector,
giving money to one person fundamentally takes money from everyone else.&lt;/p&gt;

&lt;p&gt;Shown below, 90 people with 10 wealth and 10 assets each, and 10 people with 10
wealth and 1 assets each. We give all 10 asset-poor people X assets each. Y is
\(\eta\), the learning rate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/giveaway/one-poor-give.png&quot; alt=&quot;One Poor Person&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This shows us that there is a range of reasonable giveaways, so long as we
discount giving money heavily (above \(\eta \approx 0.01 \) everyone is made
worse off giving away any money).&lt;/p&gt;

&lt;p&gt;It’s also critical to ensure that this is somewhat Pareto Efficient – if
increasing the wealth of one group puts them on par or above another, that other
group may suffer. For instance, if supporting a poor community results in a
flood of agricultural products, existing farmers quality of life may be made
worse.&lt;/p&gt;

&lt;h2 id=&quot;self-determination--currency-competition&quot;&gt;Self Determination &amp;amp; Currency Competition&lt;/h2&gt;

&lt;p&gt;One way to improve the efficiency of the money supply is to allow people to
issue currencies at will for whatever group wants to.&lt;/p&gt;

&lt;p&gt;The price discovery process for this currency on the open market serves as a
feedback loop for if that distribution formed a good giveaway or not and the
integrity of those who operate and hold the new currency.&lt;/p&gt;

&lt;p&gt;Internally to the group self-determining, the new currency should be viewed as
more efficient among the group itself.&lt;/p&gt;

&lt;p&gt;In a parallel world, instead of GiveCrypto, there’s GiveLiquidity which buys and
sells cryptocurrencies issued by communities to help them bootstrap
internationally. This would help avoid  colonialist
influence because communities would have more autonomy over the new money supply
they are adopting.&lt;/p&gt;

&lt;h2 id=&quot;increase-wealth-directly&quot;&gt;Increase Wealth Directly&lt;/h2&gt;

&lt;p&gt;This is a bit of a trick. Recall, our cost functions from our toy model are
about optimizing our money supply – not our overall outcome.&lt;/p&gt;

&lt;p&gt;Individual wealth can increase directly without a gift of assets. For instance,
sponsoring educational programs is a way to increase the wealth of society –
this is commonly done through subsidized school programs. There’s evidence that
shows that unconditional cash transfers increase attendance at schools more
than conditional transfers, but improving the quality of education available
could provide an even larger boost.&lt;/p&gt;

&lt;p&gt;Another take on this is to remove “wealth-conversion depressants”. An example of
this is hair stylist licenses&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;, they ultimately serve as a barrier for entry
based on assets available (not based on skill).&lt;/p&gt;

&lt;h2 id=&quot;counteracting-another-giveaway&quot;&gt;Counteracting Another “Giveaway”&lt;/h2&gt;

&lt;p&gt;If other contemporaneous events emulate a giveaway that redistributes assets in
such a manner that there is a substantial worsening of wealth to assets ratio, a
concurrent giveaway could counteract this. Two examples of this are giving
resources to educated refugees and asylum seekers who left behind their property
and assets (the conflict is reassigning their assets via violence) as is being
done in Turkey&lt;sup id=&quot;fnref:turkey&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:turkey&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt; and proposals to use Bitcoin in Venezuela to counteract
the instability of the Bolivar&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;12&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In writing this article, my hope was not to convince you that you can’t make
people’s lives better – au contraire! Working to improve the human condition is
something that each and every one of us should do every day, and I laud those
trying, even if I disagree with their tactics.&lt;/p&gt;

&lt;p&gt;I do hope that you are left understanding how difficult it is to give away money
with good effect. Fully fixing the inequality would cause massive upheaval and
disorder, increasing the fairness but decreasing the wealth. Peer reviewed
experiments with promising results are unlikely to scale because they don’t run
up against this societal regularization. They also, at scale, may cause an
untold loss of liberty as more income is unearned and dependent on the
discretion of the ruling class.&lt;/p&gt;

&lt;p&gt;I’ll leave you with this: In setting up the dichotomy between wealth and assets,
I’ve completely side-stepped the much more interesting question: wealth
inequality. Is it an issue if someone else is, by natural virtue, exponentially
better off than me?  Should that inequality be rectified? Can it be?  When a new
disease breaks out, the immunologist’s value to society increases, maybe that’s
how it should be.  Maybe we could all attain equal wealth at the cost of our
individuality. Or perhaps we could all be equal, but none great. Maybe our best bet
is for each of us to ask, are we better off than we were before; and what can
we do for those of among us who are not as fortunate?&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:0&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;em&gt;disclosure: I am an advisor to Stellar, which aspires to give away cryptocurrency to many people.&lt;/em&gt; &lt;a href=&quot;#fnref:0&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://fortune.com/2016/01/15/powerball-lottery-winners/&quot;&gt;Powerball&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:inspiredby&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;This model is inspired by general format of a gradient descent problem. &lt;a href=&quot;#fnref:inspiredby&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:unit&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Accounting for the fact that there could be X ‘dollars’ per unit wealth. &lt;a href=&quot;#fnref:unit&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;A measure of centralization of wealth distribution. See &lt;a href=&quot;https://en.wikipedia.org/wiki/Gini_coefficient&quot;&gt;the wikipedia entry.&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:war&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/War_of_attrition_(game)&quot;&gt;https://en.wikipedia.org/wiki/War_of_attrition_(game)&lt;/a&gt; &lt;a href=&quot;#fnref:war&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://worldif.economist.com/article/13518/giving-money-everyone&quot;&gt;Economist on UBI&lt;/a&gt; &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:6:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:givedirectly&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://givedirectly.org/research-on-cash-transfers&quot;&gt;GiveDirectly&lt;/a&gt; &lt;a href=&quot;#fnref:givedirectly&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:grad&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Two great interactive sites demonstrating these methods, &lt;a href=&quot;https://www.benfrederickson.com/numerical-optimization/&quot;&gt;one&lt;/a&gt; and  &lt;a href=&quot;https://distill.pub/2017/momentum/&quot;&gt;two&lt;/a&gt;. &lt;a href=&quot;#fnref:grad&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.theatlantic.com/business/archive/2016/08/hair-braider/494084/&quot;&gt;Hair Licenses&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:turkey&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.ft.com/content/5c7fdfde-e187-11e6-9645-c9357a75844a&quot;&gt;Turkey&lt;/a&gt; &lt;a href=&quot;#fnref:turkey&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.coindesk.com/plan-send-millions-bitcoin-venezuela-taking-shape/&quot;&gt;Sending coin to Venezuela&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A hardCORE workout w/ Bitcoin Core Dev Jeremy Rubin</title>
   <link href="/talks/2018/04/23/hardcore-workout/"/>
   <updated>2018-04-23T00:00:00+00:00</updated>
   <id>/talks/2018/04/23/hardcore-workout</id>
   <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/PKzJktErUdk&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>The Bitcoin Hunter</title>
   <link href="/talks/2018/01/25/reply-all/"/>
   <updated>2018-01-25T00:00:00+00:00</updated>
   <id>/talks/2018/01/25/reply-all</id>
   <content type="html">&lt;iframe scrolling=&quot;no&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;152&quot; allowtransparency=&quot;true&quot; allow=&quot;encrypted-media&quot; src=&quot;https://open.spotify.com/embed/episode/6KpdRYyMSoqYda3DgqGEdg&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Open Letter on Diversity & Inclusion at Scaling Bitcoin</title>
   <link href="/blog/2017/09/27/scaling-diversity-and-inclusion/"/>
   <updated>2017-09-27T00:00:00+00:00</updated>
   <id>/blog/2017/09/27/scaling-diversity-and-inclusion</id>
   <content type="html">&lt;p&gt;We started &lt;a href=&quot;https://scalingbitcoin.org&quot;&gt;Scaling Bitcoin&lt;/a&gt; with a deep commitment to diversity and inclusion.
Fundamentally, Scaling Bitcoin is about bringing together elements of the
Bitcoin community that would not otherwise – many of the core contributors met
face to face for the first time in Montreal. Meeting face to face was a
fantastic opportunity to bridge divides and seek common goals; at Scaling
Bitcoin spontaneous discussions broke out which would have never occurred
online. Diversity and inclusion are key elements in pulling together different
parts of our community to have the discussions fruitfully. Fundamentally
Scaling Bitcoin exists to work towards eliminating any barrier to entry for any
person to contribute to Bitcoin’s scientific and engineering ecosystem.&lt;/p&gt;

&lt;p&gt;Diversity and inclusion are complicated multi-faceted topics – at Scaling
Bitcoin, we do our best to address them from all sides. Our conference aspires
to be in a different region every time, from our first event in Montreal, to
Hong Kong, to Milan, and now, to Silicon Valley. Our participants and sponsors
come from all over the world (18 countries at the last event!), speak many
different languages, and have vastly different perspectives on how we’ll
accomplish our shared goal of Scaling Bitcoin.&lt;/p&gt;

&lt;p&gt;We help people attend Scaling Bitcoin who would not be able to otherwise as a
part of our diversity and inclusion efforts. This help comes in multiple forms,
including discounted tickets for students, as well as travel and accommodation
assistance for those who require it. Our chief concern is getting the
individuals most likely to contribute to Bitcoin’s scientific and engineering
ecosystem to the conference. We also try to help those who face additional
difficulties to better integrate into the community. In past Scaling Bitcoins,
this has included efforts and special programming through our academic
supporting organizations to better socially integrate low-income, minority, and
female participants at Scaling Bitcoin. For example, at Milan one of our
Academic partners (&lt;a href=&quot;http://dci.mit.edu&quot;&gt;The MIT DCI&lt;/a&gt;) hosted a special dinner for the students from
their summer bootcamp (&lt;a href=&quot;https://medium.com/mit-media-lab-digital-currency-initiative/apply-now-mit-intro-to-cryptocurrencies-bootcamp-for-underrepresented-minorities-and-women-ba85fa8fc898&quot;&gt;you can read about it
here&lt;/a&gt;)
to get to interact with some core developers in a smaller group setting.&lt;/p&gt;

&lt;p&gt;Bitcoin developers and scientists don’t just materialize overnight, it requires
diligent study and effort. This is an intimidating prospect for almost anyone,
and many capable developers drop out for lack of good support. Initiatives like
&lt;a href=&quot;http://chaincode.com&quot;&gt;Chaincode&lt;/a&gt;’s &lt;a href=&quot;http://bluematt.bitcoin.ninja/2016/08/08/chaincode/&quot;&gt;Hacker
Residency&lt;/a&gt; and
&lt;a href=&quot;https://www.dglab.com/en/&quot;&gt;DGLAB&lt;/a&gt;’s &lt;a href=&quot;https://bc-2.jp/&quot;&gt;BC2&lt;/a&gt; workshop have been
wildly successful in nurturing talented Bitcoin Core Developers. Scaling
Bitcoin is simply doing our part to onboard more talent. Explicitly seeking to
onboard talent from diverse backgrounds is a critical for engineering Bitcoin
to be an empowering technology to meet the needs of users all over the world.
The last several decades of research on the subject shows that seeking out
social diversity leads to better decision-making across the board (&lt;a href=&quot;https://www.scientificamerican.com/article/how-diversity-makes-us-smarter/&quot;&gt;read about
the research
here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This year, as a part of our efforts to improve Scaling Bitcoin by better
structuring our Planning Committee we created a Diversity &amp;amp; Inclusion
Committee. This committee is comprised of individuals who were excited to help
us to continue our efforts around diversity and inclusion. One of the main
tasks for this committee is to help us review and process subsidy requests,
which are awarded based on many factors, including, likelihood of contributing
to Bitcoin’s scientific and engineering ecosystem, demonstrated need, and total
cost (we have a limited budget, after all). Despite now having an explicit
committee for diversity and inclusion, it continues to be the job of every
volunteer in Scaling Bitcoin to work towards eliminating any barrier to entry
for any person to contribute to Bitcoin’s scientific and engineering ecosystem.
Different people experience different barriers to entry to a field like
Bitcoin, thus, the kinds of support programs we offer are not always available
to everyone (we can’t afford to give everyone student ticket pricing!). The
Diversity &amp;amp; Inclusion Committee is there to ensure that our efforts are fair
and sufficient.&lt;/p&gt;

&lt;p&gt;Technology conferences like Scaling Bitcoin present a remarkable opportunity
for building community. In light of recent reports of incidents of harassment
and exclusionary practices at tech conferences, we’ve take a progressive stance
on making sure that Scaling Bitcoin remains a respectful and safe space for all
of our participants to build that community. Incidents of harassment and
exclusionary practices negatively impact people of all genders, races, and
backgrounds, as well as the conferences and their communities. We take such
issues seriously and have required all participants to follow our &lt;a href=&quot;https://scalingbitcoin.org/code-of-conduct&quot;&gt;Code of
Conduct&lt;/a&gt; since the first Scaling Bitcoin event in 2015.&lt;/p&gt;

&lt;p&gt;Part of what makes Scaling Bitcoin such a remarkable gathering is the intense
level of focus on the technology during the event. Our CoC exists to minimize
the possibility of distractions and to maximize the learning, shared
understanding and technical advancement of one of the most important
engineering projects of our time. We hope that our attendees recognize and
support that objective, and the organizing committee will as well.&lt;/p&gt;

&lt;p&gt;Additionally, the Program Committee, which handles talk selection, operates
with complete autonomy from the rest of the Scaling Bitcoin organization,
including the Diversity &amp;amp; Inclusion Committee. No one is excluded from the
conference as a result of our diversity and inclusion efforts. The main goal of
the Program Committee is to unbiasedly select talks with the highest potential
impact on Bitcoin. The majority of tickets are sold openly to the public. We
welcome any suggestions and ideas from the Bitcoin community as to how our
efforts can be more effective and we will continue to do our best to make
Bitcoin a more diverse and inclusive environment.&lt;/p&gt;

&lt;p&gt;We’re excited to be hosting what we expect to be the best Scaling Bitcoin yet
this year. To increase our reach and impact in the community, we’re hosting a 2
Day tutorial preceding Scaling Bitcoin called Dev++. This is a wonderful
opportunity for those just entering the space to get fast-paced high-quality
instruction on becoming a Bitcoin Engineer. Following the conference, we will
have a Career Fair and an event for startups to pitch to investors. You can
read more about these new initiatives at
&lt;a href=&quot;https://bitcoinedge.org&quot;&gt;BitcoinEdge.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sincerely,&lt;/p&gt;

&lt;p&gt;Jeremy Rubin&lt;/p&gt;

&lt;p&gt;Scaling Bitcoin Planning Committee&lt;/p&gt;

&lt;p&gt;&lt;em&gt;With special thanks to &lt;a href=&quot;https://twitter.com/byrongibson&quot;&gt;Byron Gibson&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/neha&quot;&gt;Neha
Narula&lt;/a&gt;, and the rest of the Scaling Bitcoin Planning
Committee for reviewing and editing this letter, and for maintaining a strong
commitment to diversity and inclusion in Bitcoin.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>United States Government Censorship of Fuck Nazis Virtual Lapel Pin</title>
   <link href="/blog/2017/09/01/usg-censorship-fuck-nazis/"/>
   <updated>2017-09-01T00:10:00+00:00</updated>
   <id>/blog/2017/09/01/usg-censorship-fuck-nazis</id>
   <content type="html">&lt;p&gt;When I woke up in the morning of September 1st, 2017 I immediately began my
morning ritual of lazily glancing through emails.  On this morning, one
particular email stood out — the Fuck Nazis Virtual
Lapel Pin had been censored by the United States Government.&lt;/p&gt;

&lt;p&gt;Let’s jump back a minute for some context.&lt;/p&gt;

&lt;p&gt;On August 19th, 2017 I began a new project, the &lt;a href=&quot;https://fucknazis.us&quot;&gt;Fuck Nazis Virtual Lapel
Pin&lt;/a&gt;. The project’s goal was to raise funds to resist the
recent uptick in Nazism and other forms of violent racist extremism in America.
The Fuck Nazis Virtual Lapel Pin is a unique fund-raiser because donors
quid-pro-quo receive a digital asset in return for their contribution, I hoped
this would harness the excitement around the emerging &lt;a href=&quot;https://www.sec.gov/oiea/investor-alerts-and-bulletins/ib_coinofferings&quot;&gt;“Initial Coin
Offering”&lt;/a&gt;
phenomenon.&lt;/p&gt;

&lt;p&gt;The reception was not as positive as I had hoped it would be — earlier in
the week, I had been subject to some minor &lt;a href=&quot;/blog/2017/09/01/ethereum-censorship-fuck-nazis/&quot;&gt;censorship by the Ethereum
Maintainers and Community Moderators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On September 1st, 2017 at 2:40 AM Pacific Daylight Time Neustar initiated a
transfer of my domain. One hour and 29 minutes later Neustar sent me an email
explaining the transfer.&lt;/p&gt;

&lt;p class=&quot;center-image&quot;&gt;&lt;img src=&quot;/public/img/fucknazis.us/unauth-transfer.png&quot; alt=&quot;The Takedown&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;center-image&quot;&gt;&lt;img src=&quot;/public/img/fucknazis.us/explanation.png&quot; alt=&quot;The Takedown&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve sent Neustar an email requesting that they reinstate my registration, but I’ve not yet heard back from them.&lt;/p&gt;

&lt;p class=&quot;center-image&quot;&gt;&lt;img src=&quot;/public/img/fucknazis.us/reinstate-me.png&quot; alt=&quot;Request to Reinstate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Neustar is a contractor hired by the U.S. Governemnt to operate the .us TLD.
Because they are managing a federally owned property, I beleive they are
obligated to follow the First Amendment with respect to registered names.
Otherwise, I do not think the FCC may legally continue to use them as a
contractor. To quote
&lt;a href=&quot;http://www.icannwatch.org/article.pl?sid=02/04/25/082532&quot;&gt;ICANNWatch&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[W]hile a private entity like Neustar is under no intrinsic obligation to
respect the First Amendment, the fact that they did this under government
consultation, and pursuant to a government-granted charter to operate the
country code registry for the United States, raises serious issues of
Constitutionality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s not a strange expectation to hold that contractors of the United States
Government must abide by constitutional provisions. For instance, private
prisons are not at liberty to exact cruel and unusual punishments. Kimberly N.
Brown delivers a thorough treatment of this in &lt;a href=&quot;http://www.repository.law.indiana.edu/cgi/viewcontent.cgi?article=11083&amp;amp;context=ilj&quot;&gt;“We the People,” Constitutional
Accountability, and Outsourcing
Government&lt;/a&gt;.
While there are controversial cases, it is generally clear that public actors
must hold accountable private actors that they delegate their constitutional
powers to.&lt;/p&gt;

&lt;p&gt;Notwithstanding the concern over whether it is the FCC or Neustar who is
legally culpable, we can safely assume that the FCC is bound to ensure that
Neustar respects constitutional rights in fulfilling their duties as a
government contractor, and therefore examine Neustar as a government actor.&lt;/p&gt;

&lt;p&gt;Neustar’s management policy document can be found
&lt;a href=&quot;https://www.ntia.doc.gov/files/ntia/publications/ustld2007_07_b_services.pdf&quot;&gt;here&lt;/a&gt;.
The relevant sections are B-78 and B-98. Neustar claims that they will &lt;em&gt;review&lt;/em&gt;
domains which contain the “7 Words” and possibly delete them (presumably,
ensuring that they are not violating the registrant’s First Amendment rights).
Their claim is that the domain &lt;a href=&quot;https://fucknazis.us&quot;&gt;fucknazis.us&lt;/a&gt; violate’s
the “7 Words” policy enforced by Neustar. (This is a reference to George
Carlin’s infamous &lt;a href=&quot;https://en.wikipedia.org/wiki/Seven_dirty_words&quot;&gt;Seven Dirty
Words&lt;/a&gt; skit) In this case, the
presence of “fuck” in the domain is what alerted Neustar to need to review my
domain.  However, in failing to waive &lt;a href=&quot;https://fucknazis.us&quot;&gt;fucknazis.us&lt;/a&gt; I
believe they violated my First Amendment rights.&lt;/p&gt;

&lt;p&gt;There are three major relevant Supreme Court cases here,  &lt;a href=&quot;https://www.law.cornell.edu/supremecourt/text/403/15&quot;&gt;Cohen v. California
(1971)&lt;/a&gt;, &lt;a href=&quot;https://www.law.cornell.edu/supremecourt/text/413/15&quot;&gt;Miller v.
California (1973)&lt;/a&gt;, and
&lt;a href=&quot;https://supreme.justia.com/cases/federal/us/438/726/case.html&quot;&gt;FCC v. Pacifica Foundation (1978)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Cohen v. California, a man was arrested for disturbing the peace for wearing
a “Fuck the Draft” shirt. In this case, the speech was found to be protected by 
the First Amendment for multiple reasons. Most relevantly, the court refused to recognize
the speech as “Fighting Words”, or speech intended to elicit violence. This is because
Cohen’s voiced dissent of the draft was not intended to elicit any violence, it was simply
to voice an opinion. Similarly, the material published on the Fuck Nazis site was
clearly in support of non-violent action, e.g.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a first measure, and irrespective of what is most effective, I want to use
funds raised ensure that it is possible to protest these Nazis as safely as
possible. No one should permit the Nazis to intimidate them out of their
freedom to speak against them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;along with a list of other non-violent actions I would use the funds raised to
support. The court went further to find that&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Finally, and in the same vein, we cannot indulge the facile assumption that
one can forbid particular words without also running a substantial risk of
suppressing ideas in the process. Indeed, governments might soon seize upon
the censorship of particular words as a convenient guise for banning the
expression of unpopular views. We have been able, as noted above, to discern
little social benefit that might result from running the risk of opening the
door to such grave results.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This makes it clear that the censorship of Fuck Nazis Virtual Lapel Pins by revocation
of the domain &lt;a href=&quot;https://fucknazis.us&quot;&gt;fucknazis.us&lt;/a&gt; is unconstitutional.&lt;/p&gt;

&lt;p&gt;Miller v. California is a case of a very different nature involving the
distribution of pornographic content, but it established a simple three-prong
test for unprotected explicit speech. If you pass all three tests, then the work
is considered obscene.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(a) whether “the average person, applying contemporary community standards”
would find that the work, taken as a whole, appeals to the prurient interest.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fail: Fuck Nazis is clearly non-pornographic and elicits no sexual response.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(b) whether the work depicts or describes, in a patently
offensive way, sexual conduct specifically defined by the applicable state
law.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fail: Fuck Nazis is clearly non-sexual.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(c) whether the work, taken as a whole, lacks serious literary,
artistic, political, or scientific value. If a state obscenity law is thus
limited, First Amendment values are adequately protected by ultimate
independent appellate review of constitutional claims when necessary.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fail: Fuck Nazis is a political and artistic project, and is presented cogently.&lt;/p&gt;

&lt;p&gt;Having &lt;em&gt;clearly&lt;/em&gt; failed all three tests, Fuck Nazis is non-obscene protected
speech by all measures.&lt;/p&gt;

&lt;p&gt;Critically, both Cohen v. California and Miller v. California are both rulings
with regards to the state’s ability to restrict speech. Only FCC v. Pacifica
Foundation deals with the federal government’s ability to restrict “obscene”
speech, which established the “7 Dirty Words”.&lt;/p&gt;

&lt;p&gt;The critically relevant part of FCC v. Pacifica Foundation is that the measures
enforce by the FCC (to only broadcast during hours children are unlikely to be
awake) did not prevent adults from accessing and finding the content. In this
case, Neustar’s actions against Fuck Nazis does prevent adults from accessing
the content unadulterated (whereas the time restriction enforced by the FCC
permitted identical material to be broadcast at a reasonably later time).
Furthermore, based on Neustar’s enforced policies I would be able to register
the domain “nazis.us” (if it were available — it’s been held since 2014)
and use the subdomain “fuck” giving me the “fuck.nazis.us” domain. This makes
the case that there is zero benefit from the measure taken by Neustar, at the
expense of the significant burden of forcing me to change a domain that I have
already linked to in numerous communications. Of greater concern is the general
freedom of speech risk established by this enforcement mechanism.&lt;/p&gt;

&lt;p&gt;Based on the above, Neustar, acting as an agent of the United States
government, plainly violated my First Amendment rights causing damages to my project
that are difficult to quantify given that  the fund-raiser I was hosting on the site is
ongoing.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Censorship by Ethereum Maintainers</title>
   <link href="/blog/2017/09/01/ethereum-censorship-fuck-nazis/"/>
   <updated>2017-09-01T00:00:00+00:00</updated>
   <id>/blog/2017/09/01/ethereum-censorship-fuck-nazis</id>
   <content type="html">&lt;p&gt;The Ethereum Maintainers and Moderators inexplicably took actions to censor the
Fuck Nazis Virtual Lapel Pin.&lt;/p&gt;

&lt;p&gt;When I posted the project to the Ethereum subreddit on August 26th
(&lt;a href=&quot;https://www.reddit.com/r/ethereum/comments/6w9vd0/announcing_the_fuck_nazis_virtual_lapel_pin_sale/&quot;&gt;here&lt;/a&gt;)
it faced an immediate barrage of negative attention from the Ethereum
community. I can tolerate negative reception, but I can’t tolerate
censorship.&lt;/p&gt;

&lt;p&gt;One of the negative response I noticed a few days after posting was Vitalik
Buterin (the infamous founder and lead maintainer of Ethereum) liking a
&lt;a href=&quot;https://www.reddit.com/r/ethereum/comments/6w9vd0/announcing_the_fuck_nazis_virtual_lapel_pin_sale/&quot;&gt;libelous
tweet&lt;/a&gt;
which called my project “a shameless attempt at scamming people”. I typically
interpret a like on Twitter as at least a weak endorsement (the twitter-meme
“RT not endorsement” can be taken to imply that while retweeting is not
endorsement, maybe liking is).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/avsa/status/902163764258144257&quot;&gt; &lt;img src=&quot;/public/img/fucknazis.us/vitalik-scam.png&quot; alt=&quot;Vitalik likes a libelous tweet&quot; class=&quot;center-image&quot; /&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From my perspective, Vitalik’s implicit endorsement of a libelous
message claiming that I am perpetrating fraud with Fuck Nazis is the only
shame-worthy action! From day one Fuck Nazis’ course of action has been
focused on many charitable causes, including:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Donations to organizations like the Southern Poverty Law Center and the Anti-Defamation League.&lt;/li&gt;
  &lt;li&gt;Sponsoring guards for synagogues who are denied publicly funded police details.&lt;/li&gt;
  &lt;li&gt;Workshops on how to non-violently oppose Nazis in cities where they are staging demonstrations.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After Vitalik liked the above tweet, I noticed that my post was censored
from &lt;a href=&quot;https://reddit.com/r/ethereum&quot;&gt;/r/ethereum&lt;/a&gt; by the moderators (Vitalik is
also the lead moderator of /r/ethereum). This censorship occured days after it
had been on the front page, leading me to believe it was removed for no logical
reason other than distaste for the issue involved.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/ethereum/search?q=Fuck+Nazis&amp;amp;restrict_sr=on&amp;amp;sort=relevance&amp;amp;t=all&quot;&gt; &lt;img src=&quot;/public/img/fucknazis.us/eth-censored.png&quot; alt=&quot;Removed from /r/ethereum&quot; class=&quot;center-image&quot; /&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I met Vitalik back in 2014, in the very early days of Ethereum, so I was
willing to give him the benefit of the doubt on the post removal. I shot him an
email on August 29th and again on the 31st but he is yet to respond.&lt;/p&gt;

&lt;p class=&quot;center-image&quot;&gt;&lt;img src=&quot;/public/img/fucknazis.us/reddit-mod.png&quot; alt=&quot;No Response&quot; /&gt;&lt;/p&gt;

&lt;p&gt;His lack of response to me signals, but does not confirm, that it was him who
 censored Fuck Nazis and he is unwilling to justify his actions to me directly.&lt;/p&gt;

&lt;p&gt;The Ethereum Foundation and affiliated contributors have no legal requirement to grant me
free speech as a private organization.&lt;/p&gt;

&lt;p&gt;That said, they do have a moral responsibility to protect free speech and to be
inclusive of many different kinds of people within their community. By actively
censoring my post on Fuck Nazis, they have chosen to signal their alignment
with a racist agenda and cause a chilling effect on future social impact
projects on Ethereum.&lt;/p&gt;

&lt;p&gt;Their attempted censorship runs counter to the philosophy stated on
&lt;a href=&quot;https://ethereum.org&quot;&gt;ethereum.org&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ethereum is a  decentralized platform that runs smart contracts: applications
that run exactly as programmed without any possibility of downtime,
censorship, fraud or third party interference.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While certainly Reddit doesn’t attempt to make the same censorship guarantees
as Ethereum, it’s difficult to imagine that if the leader of the development
team behind Ethereum is engaged in censoring causes spitefully on Reddit that
he will lead the team to fulfill the promises laid out in their statement.&lt;/p&gt;

&lt;p&gt;Vitalik (and others in the Ethereum Foundation) must make clear their strong
intention for building inclusive and tolerant community with explicit actions
to improve the situation. Until sufficiently addressed, the entire community
must continually push leaders of the Ethereum community for more information
on how they plan to treat similar issues in the future.&lt;/p&gt;

&lt;p&gt;This isn’t about getting an apology for censoring the Fuck Nazis thread, it’s
about not building technologies that put power into the hands of hateful
people who will use their power to infringe on your human rights.&lt;/p&gt;

&lt;p&gt;Overall, this is the least of my worries currently: the Fuck Nazis Virtual
Lapel Pin project is currently facing &lt;a href=&quot;/blog/2017/09/01/usg-censorship-fuck-nazis/&quot;&gt;ongoing censorship from the U.S.
Goverment&lt;/a&gt; as well. But I figured
it was worthwhile for me to write up this post so that the Ethereum community can
respond accordingly.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Perfunctory Tokens for Public Works</title>
   <link href="/talks/2017/07/24/perfunctory-tokens/"/>
   <updated>2017-07-24T00:00:00+00:00</updated>
   <id>/talks/2017/07/24/perfunctory-tokens</id>
   <content type="html">&lt;p&gt;I gave a talk at the Digital Garage New Context Conference in Tokyo about “Perfunctory Tokens”.&lt;/p&gt;

&lt;p&gt;It’s presented as a set of opinions I’m thinking through about with regards to the emergent ICO phenomenon.&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/228186350&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://vimeo.com/228186350/4fe319322c&quot;&gt;NCC 2017 TOKYO/ DAY 2 Blockchain SESSION 3 TALK：Perfunctory Tokens &amp;amp; Public Works&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Drawing the Blockchain</title>
   <link href="/blog/2017/02/25/correct-blockchain-pointers/"/>
   <updated>2017-02-25T00:00:00+00:00</updated>
   <id>/blog/2017/02/25/correct-blockchain-pointers</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/blockchainpointers.png&quot; alt=&quot;This is correct&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of my major pet peeves in presentations about the blockchain is that most
people seem to draw the arrows/pointers in the incorrect direction.&lt;/p&gt;

&lt;p&gt;Pointers should point from newer blocks to older blocks. This is because in a
blockchain, each block is immutable so it would be impossible to update older
blocks to point to newer ones. This is also in line with most singly linked
list representations. Because it can be confusing, it’s always best to include
reference heights for extra clarity.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Kansai Trip</title>
   <link href="/blog/2017/02/09/kansai-trip/"/>
   <updated>2017-02-09T00:00:00+00:00</updated>
   <id>/blog/2017/02/09/kansai-trip</id>
   <content type="html">&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;This post got backlogged, so just putting it up unfinished. Will backfill pictures when I find them later.&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I took a few day reprieve from Tokyo to visit the Kansai prefecture.&lt;/p&gt;

&lt;p&gt;While there, I visited Osaka and Nara. I was feeling a little bit unwell so
I skipped Kyoto/Kobe, but will be looking forward to visiting when I’m next
in Japan!&lt;/p&gt;

&lt;h3 id=&quot;getting-to-kansai&quot;&gt;Getting to Kansai&lt;/h3&gt;

&lt;p&gt;I decided to take an early morning Shinkansen (i.e. a bullet train) from Tokyo
to Osaka on Tuesday morning. Because my hotel stay was officially over, I
stayed the night in a “Manga Kissaten”. For the uninitiated, a Manga Kissa is
basically a somewhat skeevy 24/7 pay-per-hour library with free drinks and
private booths. I had heard that they were a reasonable place to stay – I
think I had a particularly bad one, the air was smoke filled, the drinks were
just OK, there was no shower in the morning, and they didn’t dim the lights
past midnight (these are all problems I’ve heard higher-end Manga Kissaten do
not suffer). Blearly eyed, I made my way to the train station and purchased a
ticket, and boarded the first train to Osaka.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Shinkansen! Shinkansen!&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;osaka&quot;&gt;Osaka&lt;/h3&gt;

&lt;p&gt;Upon arriving in Osaka I made my way down to a place called Spa World in an area
called Dotonbori-Mae. Unfortunately, they were overbooked/expensive so I looked
elsewhere nearby. After comparing the offerings across the street, I found a
really nice backpacker’s hostel where I was able to secure a private room
(Japanese style) for about $13 USD a night.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Selfie in the hostel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the hostel I decided to just walk the length of the city, starting from the
hostel all the way to Umeda. As a straight shot, this is about 4 miles, but I
wandered around so it was longer.&lt;/p&gt;

&lt;p&gt;For lunch I ate okonomiyaki (a Japanese “pizza” that’s a little closer to a
omelette). It is served on a hot griddle, yum!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Later that night I went to the Don Quixote. DQ is like a wacky Walmart/Spencer’s
Gifts hybrid. It has everything from groceries to a sex shop. A few floors up
there was an (unrelated?) arcade/casino. I bought some chips and started playing
games. After playing for about an hour (and not doing very well), I went to cash
out my remaining tokens. I found out that tokens are not actually exchangeable
for &lt;em&gt;anything&lt;/em&gt;. I asked some other players if they could help me exchange, and
they agreed because they thought you could cash out too. When they found out
they couldn’t, they seemed to be a little off put, but I gave them my tokens so
they were happy. What was weird is they even had a bank for the tokens…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;Token bank&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nara&quot;&gt;Nara&lt;/h3&gt;

&lt;p&gt;I really enjoyed my visit to Nara. The deer are so kawaii!&lt;/p&gt;

&lt;p&gt;In Nara you can find the Tōdai-ji, or a temple featuring a huge bronze Buddha
(the largest bronze statue in the world and the largest Buddha in Japan). The
Tōdai-ji temple is also one of the largest wooden buildings in the world.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Interview by Shin'ichiro Matsuo on Bitcoin Development</title>
   <link href="/talks/2017/02/01/matsuo-interview/"/>
   <updated>2017-02-01T00:00:00+00:00</updated>
   <id>/talks/2017/02/01/matsuo-interview</id>
   <content type="html">&lt;p&gt;Here’s a few cuts of an interview from when I taught at &lt;a href=&quot;https://bc-2.jp/season1/&quot;&gt;BC-2 Workshop Winter 2017&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/aycec_N59b8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/xGZVUnav8eU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/HCoFQybzIbo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

</content>
 </entry>
 
 <entry>
   <title>Introduction to Bitcoin Development</title>
   <link href="/talks/2017/02/01/intro-bitcoin-dev-jp/"/>
   <updated>2017-02-01T00:00:00+00:00</updated>
   <id>/talks/2017/02/01/intro-bitcoin-dev-jp</id>
   <content type="html">&lt;p&gt;Here’s an introduction to Bitcoin Core Development I gave at the &lt;a href=&quot;https://bc-2.jp/season1/&quot;&gt;BC-2 Workshop&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bitcoin Development process&lt;/li&gt;
  &lt;li&gt;Bitcoin Improvement Proposals (BIP) Process&lt;/li&gt;
  &lt;li&gt;Performance improvement walk through&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot; src=&quot;https://player.vimeo.com/video/215140673&quot; height=&quot;360&quot; frameborder=&quot;0&quot; width=&quot;640&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://bc-2.jp/archive/season1/materials/0104_performace.pdf&quot;&gt;PDF of slides here&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Visiting Japan</title>
   <link href="/blog/2017/01/28/japan/"/>
   <updated>2017-01-28T00:00:00+00:00</updated>
   <id>/blog/2017/01/28/japan</id>
   <content type="html">&lt;p&gt;I’m visiting Japan for two weeks to help teach &lt;a href=&quot;https://bc-2.jp&quot;&gt;BC-2&lt;/a&gt; at
Digital Garage.&lt;/p&gt;

&lt;p&gt;I’m very excited to have the chance to explore Tokyo and hope to make many new
friends while out here!&lt;/p&gt;

&lt;p&gt;Hopefully I can fill in a few details about my trip as I go…&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Structuring Multi Transaction Contracts in Bitcoin</title>
   <link href="/talks/2017/01/26/multi-txn-contracts/"/>
   <updated>2017-01-26T00:00:00+00:00</updated>
   <id>/talks/2017/01/26/multi-txn-contracts</id>
   <content type="html">&lt;p&gt;I was asked to give a talk at Stanford Cyber Initiative’s Blockchain Protocol
Analysis and Security Engineering 2017 conference on some of my forthcoming
research. While it’s still a bit green, I was excited to share some of the work I’d
been doing on multi-transaction contracts.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/pdfs/multi-txn-contracts.pdf&quot;&gt;Slides Here&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Contributing to Bitcoin</title>
   <link href="/talks/2016/11/01/dg-contributing-to-bitcoin/"/>
   <updated>2016-11-01T00:00:00+00:00</updated>
   <id>/talks/2016/11/01/dg-contributing-to-bitcoin</id>
   <content type="html">&lt;p&gt;I gave a talk at the Digital Garage New Context Conference San Francisco on how to begin contributing to Bitcoin.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/pdfs/ContributeToBitcoin.pdf&quot;&gt;Slides Here&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>tail -f /var/log/life</title>
   <link href="/blog/2016/08/23/first/"/>
   <updated>2016-08-23T00:00:00+00:00</updated>
   <id>/blog/2016/08/23/first</id>
   <content type="html">&lt;p&gt;I’m hoping to start blogging more frequently – consider this the first post.
I’m going to fill in some back-dated posts though.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Graduating MIT</title>
   <link href="/blog/2016/06/03/graduation/"/>
   <updated>2016-06-03T00:00:00+00:00</updated>
   <id>/blog/2016/06/03/graduation</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/public/img/nerdy.png&quot; alt=&quot;I'm the biggest nerd&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, I did it: I graduated MIT with my S.B. and M.Eng in 4 years! And
apparently I was the &lt;a href=&quot;https://www.boston.com/culture/education/2016/06/03/8-joyously-nerdy-occurrences-mit-commencement&quot;&gt;most
joyously nerdy&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Improving the Bitcoin Development Process</title>
   <link href="/talks/2016/03/06/improving-bitcoin-dev/"/>
   <updated>2016-03-06T00:00:00+00:00</updated>
   <id>/talks/2016/03/06/improving-bitcoin-dev</id>
   <content type="html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/OGIMXTtD0Sk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Probabalistic Payments in Bitcoin using OP_SIZE</title>
   <link href="/musings/2015/11/26/probpay/"/>
   <updated>2015-11-26T00:00:00+00:00</updated>
   <id>/musings/2015/11/26/probpay</id>
   <content type="html">&lt;p&gt;I designed a mechanism that allows for probabilistic payments in Bitcoin.&lt;/p&gt;

&lt;p&gt;The foundation of the mechanism is sane, where it veers out of “sanity” is in
the attempts to get it to work well off-chain.&lt;/p&gt;

&lt;p&gt;I originally wrote this paper on November 26th, 2015, and circulated it among a
few colleagues. I think this is the first use case of OP_SIZE to implement XOR
fair coin flipping, although &lt;a href=&quot;http://ieeexplore.ieee.org/document/6956580/?reload=true&amp;amp;arnumber=6956580&quot;&gt;Secure Multiparty Computations on
Bitcoin&lt;/a&gt;
has similar elements and it was discussed on IRC in #bitcoin-wizards that
OP_SIZE might enable probabilistic payments, but not specifically.&lt;/p&gt;

&lt;p&gt;I am first posting it on my website as of March 11th, 2017.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/pdfs/probpay.pdf&quot;&gt;full text here&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scaling Bitcoin</title>
   <link href="/blog/2015/09/11/scaling-bitcoin-mtl/"/>
   <updated>2015-09-11T00:00:00+00:00</updated>
   <id>/blog/2015/09/11/scaling-bitcoin-mtl</id>
   <content type="html">&lt;p&gt;I’m honored to be serving as Program Chair for the first ever Scaling Bitcoin in Montreal.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://scalingbitcoin.org/montreal2015/#location&quot;&gt;More Info&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Returning Home</title>
   <link href="/shenzhen/2015/07/27/sz-adventure-51/"/>
   <updated>2015-07-27T00:00:00+00:00</updated>
   <id>/shenzhen/2015/07/27/sz-adventure-51</id>
   <content type="html">&lt;p&gt;Well, my travels in Asia are over. What better way to wrap things up
than to make tea ceremony with mom and take photos on a shenzhen-selfie stick.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/nhju1iddy6wmr9c/IMG_1300.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/dikp5tyzoqdcpbp/IMG_1310.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jasmine Rice Factory Tour</title>
   <link href="/shenzhen/2015/07/14/sz-adventure-38/"/>
   <updated>2015-07-14T00:00:00+00:00</updated>
   <id>/shenzhen/2015/07/14/sz-adventure-38</id>
   <content type="html">&lt;p&gt;Note the change of location!&lt;/p&gt;

&lt;p&gt;While I was in Thailand visiting my friend there; I had the fortune of being
able to visit his family’s rice processing factory. They’re basically the
world’s largest Thai Jasmine Rice processing company.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/9ln625lh861e7pw/IMG_1077.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
That’s a lot of rice!&lt;/p&gt;

&lt;p&gt;Unprocessed rice comes in like this.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/x12eof3n7ogz53x/IMG_1069.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Lots of random stuff mixed in…&lt;/p&gt;

&lt;p&gt;The junk gets removed in big gravity sifters.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/poui33yaj2dcg3r/IMG_1067.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Gravity Sifting&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/vfnlnfr67f9q9cn/IMG_1064.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Look at that junk!&lt;/p&gt;

&lt;p&gt;The rice is then polished…&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/h7c260vx6o91af0/IMG_1056.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
An array of polishers.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/aw698mu1f84ng27/IMG_1057.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Shiny!&lt;/p&gt;

&lt;p&gt;Then, an electronic separator uses jets of air to eliminate non rice things.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/vr22y9ri1zob6ek/riceblower.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
This uses some fancy machine vision to detect rice/non-rice.&lt;/p&gt;

&lt;p&gt;The finished products&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/b3slhse3otj5922/IMG_1073.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Shown are two different grades of rice&lt;/p&gt;

&lt;h2 id=&quot;science&quot;&gt;Science!&lt;/h2&gt;

&lt;p&gt;There is also some cool stuff going on to make sure the rice is of the right quality.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/v5aouwdqb0uuccl/IMG_1084.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Spectrophotometer.&lt;/p&gt;

&lt;p&gt;Rice-o-meter&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/mivfkt9hap6p0gu/IMG_1100.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Measures transparency, whiteness, and the milling degree to judge quality.&lt;/p&gt;

&lt;p&gt;There were several other tests as well, including an amylose test.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Smell Clock</title>
   <link href="/shenzhen/2015/07/06/sz-adventure-30/"/>
   <updated>2015-07-06T00:00:00+00:00</updated>
   <id>/shenzhen/2015/07/06/sz-adventure-30</id>
   <content type="html">&lt;p&gt;The smell clock is a device I built for the Shenzhen manufacturing bootcamp. While we were there,
we had a challenge to build a prototype on a tight budget. The assignment was to build something
that could denote the passage of time.&lt;/p&gt;

&lt;p&gt;I decided, while walking around the market, that these little bottle top humidifiers were really cool:
&lt;img src=&quot;https://www.dropbox.com/s/js3k86kf9574e89/IMG_0293.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So I knew I had to incorporate them. I walked around the market scoping out
prices and couldn’t find them for a good deal.  Just when I was about to give
up, I found them at a price I could afford – if I recall it was a few dollars
a piece, but I needed a lot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/gtpkrgtlxk4hjtg/IMG_0294.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I laser cut a case for each humidifier out of acrylic and opened up each humidifier and attached a wire
to trigger the toggle switch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/3y5zyd1433yddp2/IMG_0296.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order for it to look nice, I needed some good looking bottles, so I hit the grocery store, where I found:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/xm58idnqu2o6de1/IMG_0915.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
A bicycle built from toothpaste.&lt;/p&gt;

&lt;p&gt;I didn’t find any nice bottles, so I ended up using some ugly ones.&lt;/p&gt;

&lt;p&gt;The design uses 4x4 grid of individually controllable humidifiers connected to an arduino mega. Each of the bottle is filled with different fragrances.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/dbhpdkn5x00uyrc/IMG_0916.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I ended up running into trouble with the plastic case, so I cut a new one from wood.&lt;/p&gt;

&lt;p&gt;And the finished product:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/x2p6e8yox5xcmzm/smell-demo-large2.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Wirebonding Factory Tour</title>
   <link href="/shenzhen/2015/07/01/sz-adventure-25.2/"/>
   <updated>2015-07-01T00:00:00+00:00</updated>
   <id>/shenzhen/2015/07/01/sz-adventure-25.2</id>
   <content type="html">&lt;p&gt;Wirebonding is a technique you’re probably familiar with if you’ve ever taken
apart a cheap toy.&lt;/p&gt;

&lt;p&gt;It’s a slightly harder technique to employ than using a standard packaged chip,
but if employed correctly can help reduce cost (raw die is cheaper), footprint,
and weight. The cost per wire is really small!&lt;/p&gt;

&lt;p&gt;Basically, rather than solder a chip down, you paste it down and then solder a
small wire from the chip die to the board and then cover it in goop to protect
it.&lt;/p&gt;

&lt;p&gt;This technique used to be really hard to access, but with more automation costs
have come down drastically making this an interesting technique for a
cost-concious engineer.&lt;/p&gt;

&lt;p&gt;The factory boss here was a very friendly lady, and she gave us an awesome tour!&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/7idk63gzj0b3eh1/IMG_0858.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Example of a finished wire bonded board.&lt;/p&gt;

&lt;p&gt;A worker, by hand, places the tiny raw dies onto the circuit boards using little wooden chopsticks.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/5in5azgdcvy6foy/IMG_0836.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
The dies are really tiny to be working with by hand!&lt;/p&gt;

&lt;p&gt;An employee configures the machine. In the upper left, you can see a wiring
diagram, as well as a computer showing the current alignment.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/lit9vwvz6apcu4o/IMG_0846.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The wirebonding machine drops small conductive wires from the bond points.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/7p2zduixs0tjp3b/wirebond.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Go! Go! Go!&lt;/p&gt;

&lt;p&gt;After wire bonding:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/5svqtylo4wd5ajh/IMG_0844.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Ok… maybe this is before, I can’t recall. The wires are hard to see…&lt;/p&gt;

&lt;p&gt;If there is a mistake, a worker uses a machine to correct it. The machine has
knobs which scale each human movement down by a factor of 10. This allows them
to do the detailed work needed to operate on these tiny wires.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/tuqbu24x3t336mt/manual.jpg?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Afterwards, the boards have protective goop placed on them.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/m0bq2b06syh9d3n/goop.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Goop laying machine.&lt;/p&gt;

&lt;p&gt;The boards then go into an oven to cure the goop to a hard shell.&lt;/p&gt;

&lt;p&gt;They can also do clear goops!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Manual Board Population/SMT Factory Tour</title>
   <link href="/shenzhen/2015/07/01/sz-adventure-25.1/"/>
   <updated>2015-07-01T00:00:00+00:00</updated>
   <id>/shenzhen/2015/07/01/sz-adventure-25.1</id>
   <content type="html">&lt;p&gt;When you make a lot of a board, you get a fully automated SMT line. But what about when you only make 5?
Programming a SMT line takes time and is expensive. So you can do the dumb thing – do them by hand!&lt;/p&gt;

&lt;p&gt;Yes, even though the components are tiny the employees are highly skilled with surgically precise hands.&lt;/p&gt;

&lt;p&gt;When you’re getting hand done SMT, it’s obviously at a smaller scale, so things
are a bit more laid back you could say.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/omlavw0mnkm2y8h/randomcat.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
E.g., there was a random cat hanging out.&lt;/p&gt;

&lt;p&gt;First, schematics and PCBs come in and are marked up to help the workers place parts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/47el1bsuhkyoxsn/schematic_study.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Silk screens get made to put the solder paste down.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/cffmqpvdjhvc31m/silksolder.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Parts get carefully placed onto the boards.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/m4xw75dawjjuddz/twezeplace.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The workers have really steady hands :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/xtdvdaf5v973ucs/place.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, as with any SMT process, the boards get sent to the oven.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/i6zjirhf6lg6gpo/reflowoven.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>South China Material City Tour</title>
   <link href="/shenzhen/2015/06/30/sz-adventure-24/"/>
   <updated>2015-06-30T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/30/sz-adventure-24</id>
   <content type="html">&lt;p&gt;With my back still in significant pain from the previous nights massages, it
was time for the South China Material City.&lt;/p&gt;

&lt;p&gt;The South China Material City is an industrial region situated in Shenzhen where
you can go to get raw goods or materials in bulk quantity.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/pe99swsejv3f2kx/IMG_0736.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s basically a big outdoor mall where you can go into one of many vendors and find
anything you need, from gears to leather. Everyone is very hospitable and there were
offers of tea at some of the shops.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/5alzmgi03jn0oja/IMG_0737.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There was also some (very large) indoor malls, with lots of outlet priced goods:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/61p9nsapibey9tk/IMG_0813.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There was also some more random stuff, like people drying spices on their shop fronts:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/1oiqz8prz4cz3t0/IMG_0750.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/xb0pbzy3mne6dil/IMG_0751.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or a seemingly abandoned amusement park:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/86sti4p15o45czi/IMG_0768.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/7lxft6pugcddvmc/IMG_0769.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/yyhrne3gc63krkl/IMG_0770.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/d05v92kauyawctq/IMG_0771.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/nmzmveshn6myfvm/IMG_0772.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/78eakighro1mia6/IMG_0764.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/8jaku73dmlpfy79/IMG_0765.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You really could find anything there, from chemical supplies:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/x1bhs6lq2xpf1zi/IMG_0801.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/z2ehw64l2wx74am/IMG_0803.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ud32t1jguhh4odg/IMG_0805.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To raw plastics used for cables (something like $10/25 kg):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/fl06u60rblp14hc/IMG_0797.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/0onfhadfb0k1rqg/IMG_0799.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To clips:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/7o9a6f82jjjd1ut/IMG_0784.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/y44tfirjrc2d0k7/IMG_0788.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/4k2hyo2u8cixq5y/IMG_0785.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
That one is absurd – knives on carabiner clips to cut your rope?&lt;/p&gt;

&lt;p&gt;Leathers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/bqphxz7ml4bqs0f/IMG_0760.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Creepy Leathers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/pscban3cvdh8rtx/IMG_0789.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/t8hbnyby3ozmo9j/IMG_0761.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sewing machines – from new, to very old:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/wdfaygbnz71bple/IMG_0762.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/xzlfi1uycas0rf3/IMG_0773.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tile carvers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/bkelzr8tbwg2ncx/IMG_0743.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/i5zfudzkrz1pn1b/IMG_0747.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Papercraft store where you can get nice boxes made:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/2ce8tfe6mpwtpz4/IMG_0729.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/mz2hlmuh4bbckvz/IMG_0731.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, there was cool finished good store with lots of cool electronics:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/v1gyocpe0y30bjr/IMG_0810.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/tyzcdbwpcsgenna/IMG_0808.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Overall, one of the funniest parts of the South China Material City was all the
samples people were willing to give for free.  I got clips, bracelets, ropes,
fabrics, and many other things for free or very cheap. I almost made it into a
game to see if I could get something at every vendor I stopped by. The odd
thing is that when I contacted one of the suppliers to buy more bracelets (as
gifts for my return) they never got back to me!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Chinese Massage Parlor</title>
   <link href="/shenzhen/2015/06/29/sz-adventure-23.2/"/>
   <updated>2015-06-29T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/29/sz-adventure-23.2</id>
   <content type="html">&lt;p&gt;In the evening of the 23rd, we took a trip over to a local massage parlor.
Before you crack any jokes about what goes on in the massage parlor (yes, that
does still exist if you want to find it), that’s not why we went to the massage
parlor. We went to kick back Shenzhen Style! No photos of this trip, for better
or for worse.&lt;/p&gt;

&lt;p&gt;The massage parlor is kind of like a rest and relaxation hotel. You can stay
there all night if you want to. When we showed up, we had to give the
receptionist passports in accordance with Chinese law for overnight stays.&lt;/p&gt;

&lt;p&gt;When you get to the parlor, you split off by gender, and then you take a
shower.&lt;/p&gt;

&lt;p&gt;Next, there’s a large public bath (naked!) where you can go to enjoy some cool
refreshing water, ice cold water, and steamy hot water.&lt;/p&gt;

&lt;p&gt;Following your dip in the public bath, you get a robe and slippers and head on
over to the main massage area. Here, you get a huge comfy recliner chair, the
kind you could easily sleep in.&lt;/p&gt;

&lt;p&gt;Then, a host comes over and offers you the menu, where you can order various
beverages (such as watermelon juice or beer) and massages. Bunnie was trying to
order a green tea for a very long time, because he kept on accidentally saying
road fork (they both sound like “lu cha”).&lt;/p&gt;

&lt;p&gt;Typically you start off with some light treatments, such as a foot massage or,
if you’re feeling like it, an ear scrape (I wasn’t bold enough so I stuck to
    the foot massage). Then, you can get a larger treatment if you like, your
    choice of different varieties of back massage, such as a Traditional
    Chinese Medicine or Thai Oil.&lt;/p&gt;

&lt;p&gt;As I was told it was the most traditional was indeed the Traditional Chinese
Medicine Massage, I opted for that. A few minutes later, some doctors (of the
tcm variety) came to us and led us to the massage tables.&lt;/p&gt;

&lt;p&gt;Now, I want to reserve my language somewhat, especially when it comes to
experiencing another culture, but FUCK EVERYTHING ABOUT THE TCM MASSAGE. It was
horrible, horrible pain for like an hour. The doctor systematically found every
pain and pressure point in my back and body and dug and jabbed them
mercilessly. As I squealed in pain, the doctor only laughed and prodded more.
If I had any secrets I’m sure he could have gotten me to reveal them.&lt;/p&gt;

&lt;p&gt;For the rest of the week, my back was in pretty awful pain. I don’t think I’ll
be back for a TCM massage again, but I’d go back for a Thai Oil Massage (that’s
what you normally think of when you hear “massage”).&lt;/p&gt;

&lt;p&gt;After the massage, there are some other facilities (such as ping pong) to hang
out and relax with, but I think I was too much in pain to want to take
advantage of that.&lt;/p&gt;

&lt;p&gt;Overall, the massage parlor is a pretty good deal. For about 300RMB (around
~$50 USD) you get an overnight place to stay as well as massages and
entertainment. Would definitely recommend it for your trip out to Shenzhen, but
avoid the TCM massage.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Furniture Factory Tour</title>
   <link href="/shenzhen/2015/06/29/sz-adventure-23.1/"/>
   <updated>2015-06-29T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/29/sz-adventure-23.1</id>
   <content type="html">&lt;p&gt;For Day 23 we’re going to take a look at a furniture factory. This is a HUGE
factory; probably the largest we saw on our trip, spanning many many hangars.
Unfortunately I didn’t take too many pictures at this factory.&lt;/p&gt;

&lt;p&gt;We start our journey in the furniture factory with some basic processing of raw materials:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/1rla5prdm66209y/IMG_0655.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The beams get cut up into little pieces and glued together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/54v0tdivv34w3sn/glue-tiny.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/nywbc868vkjqr01/IMG_0661.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
All done!&lt;/p&gt;

&lt;p&gt;Did I mention that it’s a large factory?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ukg22y2ba9qqb6j/IMG_0662.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;distressingpainting&quot;&gt;Distressing/Painting&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/nezrhonea04itec/IMG_0684.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;two-kinds-of-leg&quot;&gt;Two Kinds of Leg&lt;/h2&gt;

&lt;h3 id=&quot;wooden-leg&quot;&gt;Wooden Leg&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/rj7q6v1z3ar5p2z/IMG_0677.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/i57152dke4fwpki/IMG_0678.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;resin-leg&quot;&gt;Resin Leg&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/g2whlscnjqkkqoy/IMG_0714.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/pyxn805qqhw0w3d/IMG_0722.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;shipping&quot;&gt;Shipping&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/sqjri5wqvqm6jk2/IMG_0720.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;showroom&quot;&gt;Showroom&lt;/h2&gt;

&lt;p&gt;They make a lot of varieties of furniture!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/nsihxm7plpoa0jz/IMG_0643.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These gorgeous wood tables are all for domestic market! Too big to ship.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/5laeqta95wqbpk5/IMG_0646.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Precision Casting Factory Tour</title>
   <link href="/shenzhen/2015/06/26/sz-adventure-20.2/"/>
   <updated>2015-06-26T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/26/sz-adventure-20.2</id>
   <content type="html">&lt;p&gt;The precision casting plant was really neat! They have some pretty major
clients, which you might be able to guess from some of the photos (but probably best
if this doesn’t show up in the search results).&lt;/p&gt;

&lt;p&gt;This factory uses the cutting edge technologies to make über precise
components.&lt;/p&gt;

&lt;p&gt;A precision mold starts with precision materials. The materials they make use
of here are void free, meaning that there are no microscopic pockets or bubbles
in the material which would make it hard to machine precisely.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/megdqy2lxlnd3fm/voidfree.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Pretty sure this specific piece is tungsten.&lt;/p&gt;

&lt;p&gt;The blanks are then given a rough CNC cut, and then brought to a precision
grinder where a worker uses a device to trim all edges. The device scales all
of the workers movements by a large factor, and greatly magnifies the part. A
bouncing rotary tool allows the worker to grind away slowly.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/4x2b05ds2o0eux2/cut.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step is an ablation process which uses a super high current arc to
blast off material bit by bit and polish the mold and give it a mirror finish
(if I recall correctly).&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/oyag7ev874vohmm/ablate.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The polished mold pieces are very pretty!&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/e2sq59sqpj393j7/moldpieces.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The finished pieces are then assembled into a mold housing.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/3hu5hvlzusjqsal/moldassemble.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The parts are made by injection molding a metal powder into the mold. These are
very delicately held together, you could easily snap them with your bare hands.&lt;/p&gt;

&lt;p&gt;They are then forged at high heat, which bonds the metal, making it very strong.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/84glx83udxsefoo/part.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Hmm… where have I seen this part in the wild ;)&lt;/p&gt;

&lt;p&gt;Overall, this is a process you could hope-to-afford one day when either prices
come down, your company is doing really well, or you are operating in a niche
that requires it. Despite being somewhat inaccessible, it was really cool to
get to see how it all comes together!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mannequin Factory Tour</title>
   <link href="/shenzhen/2015/06/26/sz-adventure-20.1/"/>
   <updated>2015-06-26T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/26/sz-adventure-20.1</id>
   <content type="html">&lt;p&gt;A question you dread your child asking – where do mannequins come from?&lt;/p&gt;

&lt;p&gt;Well in today’s blog, we’ll find out!&lt;/p&gt;

&lt;p&gt;This factory was very perspective changing. Usually, people think of China as
being for knock-off or unoriginal products, but the Mannequin Factory was
somewhat akin to a pop-art-at-scale Andy Warhol-esque plant. There were a lot of
original ideas and very skilled hand craftsmen. The company owner/head artist
was a very charismatic Chinese man, he gave us a really wonderful tour of his
facility!&lt;/p&gt;

&lt;p&gt;Check out some of the really cool pieces designed here:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/2pazk2z8pmg4pyb/copper.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/5wng153zi8425g4/zebra.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/rjs58cwipnu0338/punk.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/p3cvvngoizpg86p/trio.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A mannequin starts with a sculptor making a small mockup to play with style and
form:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/vgc343jv7xnagk9/miniman.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then the sculptor produces a master mannequin:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/qnnv9ky97uqlp4m/wireframe.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Wireframe model.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/k9w1muvcdwi95gg/form.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Shaping the form.&lt;/p&gt;

&lt;p&gt;From that mannequin, molds are made:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/36t4joza2kkmfls/mold.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the molds, mannequins are cast:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/n43vt195oz4q4ng/glass.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Casts are done using fiberglass&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/t6vj8b42fylz415/sadmold.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
A particularly sad looking mold curing.&lt;/p&gt;

&lt;p&gt;The factory operates at a pretty large scale!&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/bwb58fzt7d7lzwa/scale.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
A lot of casts being made!&lt;/p&gt;

&lt;p&gt;I like this show because you can see casts being freshly opened and queued for
the next phase.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/ppnuf53hatcjucx/opening.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After casting, the mannequins are powdercoated/painted/glossed.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/gqmncv9mad2fkcl/painting.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After painting, blemishes are marked and repaired:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/2x84xoewd6mvlcn/blem.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Red tape is used to mark the faults.&lt;/p&gt;

&lt;p&gt;Optionally, cosmetics (or other finishing touches) are applied:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/y14zu3padyyb6cl/cosmetics1.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Archives:&lt;/p&gt;

&lt;p&gt;They keep copies of various parts of mannequins that they have produced in the
past, in case they want to reference old work.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/ov303y4jd3xx0py/archive.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/qp3g7kgxhgyabbk/headarchive.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Headroom?&lt;/p&gt;

&lt;h2 id=&quot;water-treatment&quot;&gt;Water Treatment&lt;/h2&gt;

&lt;p&gt;This factory also has an on-site water treatment facility&lt;/p&gt;

&lt;p&gt;It was not quite as involved as the one at the leather treatment facility, but
this factory does do a lot of sanding and painting so they treat their waste
water on-site.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/h1aal3z0pfqipgl/water.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;oddities&quot;&gt;Oddities&lt;/h2&gt;

&lt;p&gt;There are definitely odd things to see in a mannequin factory, or if not odd,
visually striking sights. Here are a few images, left without comment:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/egatm1nrt2uuo1i/oddity1.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/ivp0qffooeud4e4/oddity2.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/94bornea5wnkxbl/oddity3.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/abkgj1jp4g4ecnb/oddity4.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;lastly&quot;&gt;Lastly&lt;/h3&gt;

&lt;p&gt;I got a really fantastic parting gift at this factory… an arm!&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/gxx9rs7oajwwx4k/gift.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will be fun to take through customs…&lt;/p&gt;

&lt;p&gt;I’d love to do a project with it like turn it into a handy desk lamp. It’s made
of a very nice quality wood.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Zipper Factory Tour</title>
   <link href="/shenzhen/2015/06/25/sz-adventure-19/"/>
   <updated>2015-06-25T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/25/sz-adventure-19</id>
   <content type="html">&lt;p&gt;The Zipper factory tour was courtesy of &lt;a href=&quot;http://danielliang.com/randomness/&quot;&gt;Daniel Liang&lt;/a&gt;.
This was one of the more detailed tours; there’s a whole lot that goes into a zipper! Daniel’s factory
is also super large as it is essentially end-to-end, raw materials go in such as bulk plastic and metal, and 
finished spools of zipper material and zips come out.&lt;/p&gt;

&lt;h2 id=&quot;filament-making&quot;&gt;Filament Making&lt;/h2&gt;

&lt;p&gt;Filaments are used to make the plastic zipping ribs.&lt;/p&gt;

&lt;p&gt;They start out as raw plastic pelts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/n8br4vzqq44xze7/raw_pelts.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If a black color is desired, a small amount of dye pellets are added.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/7l965n0n6di2wt4/dyed_pelts.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The pellets go into the hopper (far left) to be melted down/mixed and then extruded.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/jp0i21hx2k4ehkh/filament_pano.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, I didn’t get great pictures of this part, but the filaments are
pulled through, cooled, and then spooled.&lt;/p&gt;

&lt;p&gt;Maybe this picture will help you, but I can’t really make sense of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/749pvs877ijxpfc/extruded.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tape-weaving&quot;&gt;Tape Weaving&lt;/h2&gt;

&lt;p&gt;Tapes are woven from some nylon/cotton thread. I’m not sure if this is made on
site or not, but I think if I recall it is a separate factory.&lt;/p&gt;

&lt;p&gt;The thread goes into weaving machines.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/ewpefmt4c3hfgoi/weaver3.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Weaving machine, slowed down many times.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/xqmq8galwcy6w2o/weaverarray.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Many arrays of weaving machines. Each machine weaves several tapes at once.&lt;/p&gt;

&lt;h1 id=&quot;zip-integrating&quot;&gt;Zip Integrating&lt;/h1&gt;

&lt;p&gt;These machines knit in the filaments into a plastic zipper. This is either onto a woven tape, or standalone (both are pictured below).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/tf9ije2g7k0wku9/knit-tape.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/sde4tpradlqmrmz/standalone.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;slider-making&quot;&gt;Slider Making&lt;/h2&gt;

&lt;p&gt;A Zipper Slider starts out
looking like this:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/30yzyuzpifdwl8e/IMG_0404.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Raw metal.&lt;/p&gt;

&lt;p&gt;The metal is melted down and sent to die casting molds.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/lqd42depoi45sb4/IMG_0408.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Die casting machines cranking out zips.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/03ie51qj76bhl2e/diecast.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Live die casting, metal refil pouring in the background.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/7dc639ray9w58j0/diecastscale.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
They make a lot of sliders!&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/jnowflshwct6sqc/IMG_0403.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Die cast pieces coming out of the mold.&lt;/p&gt;

&lt;p&gt;Then the pieces go through multiple polishing phases.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/heoqlh1027reqgn/IMG_0418.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Separated pieces going into the polisher. One of ~5 polish phases.&lt;/p&gt;

&lt;p&gt;Lastly, some assembly of the flap and the zip.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/vp2jjp6y839a0w6/zip_assemble.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Putting together the zipper metal components by hand.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/7n41t42b6q8mcfv/auto_assemble.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Less specialized zipper assemblies are automated.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/cv1pqe54yijs3fl/auto_assemble2.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
The alignment process involves a properly shaped “needle” and a vibrating, spinning bowl.&lt;/p&gt;

&lt;h2 id=&quot;packaging&quot;&gt;Packaging&lt;/h2&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/t64pz1vw0gthzk5/spindle2.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Chord spindling machine. Back and forth makes it tidy for sale!&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/194k2isakds9mq9/spindle.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Chord spindling machine release.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Leather Factory Tour</title>
   <link href="/shenzhen/2015/06/23/sz-adventure-17/"/>
   <updated>2015-06-23T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/23/sz-adventure-17</id>
   <content type="html">&lt;p&gt;Today we visited the &lt;a href=&quot;http://www.primeasialeather.com&quot;&gt;PrimeAsia Leather&lt;/a&gt; Factory.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/p6m1pr5llmmihbb/IMG_0298.JPG?raw=1&quot; alt=&quot;Welcome to PrimeAsia&quot; class=&quot;center-image&quot; /&gt;
A warm welcome.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/3hz414mnjf3inrt/IMG_0300.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
A ‘real’ welcome.&lt;/p&gt;

&lt;p&gt;The leather comes in to the factory pre-treated. The tannery is (typically) these days co-located with the slaughterhouse.
At the tannery they chrome treat the raw leather and then put it in a shipping container to wherever it is going.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/5gy8408la8tarxb/IMG_0305.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Pile of raw leather “wet blues”, waiting to be processed&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/3exymrt58a479wr/IMG_0303.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Quality Inspection&lt;/p&gt;

&lt;p&gt;The leather is then cut through the middle (ie, reducing the thickness) to a top-grain piece and a suede piece.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/otbddrkajga1cvg/splice.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The suede leather is then buffed down to standardize thickness. (the top-grain needs no buffing as it is cut to the right size).&lt;/p&gt;

&lt;p&gt;The leather dust is then captured and put into random products, like asphalt.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/eag7mdd45ckwwtf/IMG_0317.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Leather dust&lt;/p&gt;

&lt;p&gt;The leathers are then dyed in these big tumblers. They can do any color – they mix chemicals on site.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/i2f1j96qrmicvzt/dye.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oh that tumbler was just a baby, for color testing and sample runs. No. This is a tumbler:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/pdq54x61p517n0v/big_dye.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Look at the people to get a sense of scale&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/xhxmcjob73ktvm7/IMG_0346.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
The dyed leather comes off the line&lt;/p&gt;

&lt;h2 id=&quot;post-processing&quot;&gt;Post Processing&lt;/h2&gt;

&lt;p&gt;There’s a myriad of leather post processing steps depending on the finished product.&lt;/p&gt;

&lt;p&gt;You can turn a cow into a crocodile:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/kxvpjvd839l795m/IMG_0368.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is done by melting a plastic sheet into the leather.&lt;/p&gt;

&lt;p&gt;You can embed thermal-color change wax:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/qiw5brassdcsuvv/thermal_wax.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bright pink dyed and super soft suede:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ps2nuscf4uy7sia/IMG_0361.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Waterproofed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/lhd1pwenz7ymnoh/IMG_0366.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;A really cool section was the testing facilities. This ensures the quality of the finished product.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/m0gp4niqisne6eo/testing.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are machines that can test the rigidity, flexibility, waterproofness, etc.&lt;/p&gt;

&lt;h2 id=&quot;water-purification&quot;&gt;Water Purification&lt;/h2&gt;

&lt;p&gt;Leather is notorious for pollution. At PrimeAsia, they have a big and fancy water purification plant on-site.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/zxla0m2xis6xnhg/IMG_0382.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
We start our tour from the control panel&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/u6bfabjt9m9dqk4/IMG_0384.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Water starts out a bit frothy (I believe it’s a bacterial processing phase)&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/cj1sf134gs634nh/IMG_0387.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Water is cleaner!&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/6be038hipisdfzf/IMG_0389.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Clean water comes out here.&lt;/p&gt;

&lt;h2 id=&quot;trivia&quot;&gt;Trivia&lt;/h2&gt;

&lt;p&gt;Leather is cheaper than I thought. It was maybe $100 for a whole pelt.&lt;/p&gt;

&lt;p&gt;There’s no natural leather color. After chrome tanning, all leather is blue-gray.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Shenzhen Maker Faire</title>
   <link href="/shenzhen/2015/06/20/sz-adventure-14/"/>
   <updated>2015-06-20T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/20/sz-adventure-14</id>
   <content type="html">&lt;p&gt;We were lucky enough to overlap our stay with the Shenzhen Maker Faire!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/v00lmytnibmbqzf/IMG_0270.JPG?raw=1&quot; alt=&quot;Panorama of  the faire&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/dpl8xi72jf3i8pg/IMG_0268.JPG?raw=1&quot; alt=&quot;Panorama of  the faire&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There were a lot of drones…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/p4acqzacf4bpp1z/IMG_0252.JPG?raw=1&quot; alt=&quot;Drones! Drones everywhere&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I even ran into some friends!&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/ihnsvo6iu1ufcsx/IMG_0262.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
&lt;a href=&quot;https://twitter.com/mentisoasis&quot;&gt;Lizhou Sha&lt;/a&gt; MIT ‘18&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/n0urvuvezbx8odi/1972495_1615199928734038_5094817963364884169_n.jpg?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
&lt;a href=&quot;https://twitter.com/debweinswig&quot;&gt;Deb Weinswig&lt;/a&gt;, my cousin!&lt;/p&gt;

&lt;p&gt;We finished off the day at the &lt;a href=&quot;http://hackaday.com/2015/06/29/the-spirit-of-hackaday-shines-in-shenzhen/&quot;&gt;Hackaday pizza party&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What struck me most is that we were like an hour out of the city by subway but it still looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/5wxvgeb5j8pmdie/IMG_0267.JPG?raw=1&quot; alt=&quot;Skyscrapers&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The amount of construction in the region is insane.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>How is Shenzhen so green?</title>
   <link href="/shenzhen/2015/06/19/sz-adventure-13/"/>
   <updated>2015-06-19T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/19/sz-adventure-13</id>
   <content type="html">&lt;p&gt;Watering trucks! Saw this during a night out. They go around and spray
down all the fancy greenery.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/qmza1bv8utlid9z/IMG_0244.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ecvqb87fe50re94/IMG_0243.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Engineering Query at King Kredie</title>
   <link href="/shenzhen/2015/06/18/sz-adventure-12/"/>
   <updated>2015-06-18T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/18/sz-adventure-12</id>
   <content type="html">&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/90unrey3pm2fmft/engquer.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Inside the King Kredie Engineering Query room&lt;/p&gt;

&lt;p&gt;On Day 9 I mentioned that we had submitted our boards for Engineering Queries,
but I didn’t quite explain what those are.&lt;/p&gt;

&lt;p&gt;When you’re working with a good manufacturer, they don’t just blindly produce
what you tell them, they will go through and verify certain properties of the
design to make sure it will come out as expected, or even tell you ways you can
save costs that you may not have thought of. This is because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;they want your future business&lt;/li&gt;
  &lt;li&gt;they’re just good people&lt;/li&gt;
  &lt;li&gt;they don’t make more money on the more expensive process&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3 can happen because a different process may have no different labor cost, but
just a material cost which they don’t mark up. This is an important point to
keep in mind when working with various manufacturers – they will pass savings
on to you if possible!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Flex PCB Factory Tour at King Kredie</title>
   <link href="/shenzhen/2015/06/18/sz-adventure-12.1/"/>
   <updated>2015-06-18T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/18/sz-adventure-12.1</id>
   <content type="html">&lt;p&gt;While we were doing the Engineering Query at King Kredie, we also got a
special bonus tour: Flex PCB Manufacturing.&lt;/p&gt;

&lt;p&gt;Flex PCB is kind of the future – as devices get smaller, a thick-old-green PCB is
no longer practical unless it is also a structural element. Flex PCB’s, traditionally used 
more often as a custom connector, can be populated with components as well so are a really cool
technique to experiment with.&lt;/p&gt;

&lt;p&gt;The process is pretty different from traditional PCB etching.&lt;/p&gt;

&lt;p&gt;You start with a big roll of copper foil.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/bblzqgz89ygqe25/foil.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Punch out a pattern using a big press.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/vm0nhnl0zgvgifu/cut.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The die looks like this:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/mair9oscbir97ch/die.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then you laminate it. The laminate sheet has also been punch cut appropriately.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/huupl28achi91lm/laminate.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
An iron is used to bond the plastic laminate to the copper/backing laminate.&lt;/p&gt;

&lt;p&gt;Then you (optionally) silkscreen print on&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/s7dzg4g17f1qba1/silk.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Alignment is not critical here.&lt;/p&gt;

&lt;p&gt;Finished product:&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/b8jp50qy9ksxxxf/finished.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
This flexpcb has a stiff copper trace inside of it as well for rigidity on that axis&lt;/p&gt;

&lt;p&gt;Later on, these will need to be cut out/depanelized.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Tea Ceremony</title>
   <link href="/shenzhen/2015/06/17/sz-adventure-11.3/"/>
   <updated>2015-06-17T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/17/sz-adventure-11.3</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/uku47k5rpa0yndd/tea.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The printing press guys were really the best – so good, they get three posts
for one day!&lt;/p&gt;

&lt;p&gt;Following our visit, they taught us how to do – and appreciate – the
traditional tea ceremony.&lt;/p&gt;

&lt;p&gt;To make the tea ceremony, first you use hot water in
a little basin to wash out all of the tea cups. Then, you fill the teapot with
tealeaves, and use the basin (with fresh water) to pour hot water over the
leaves. You stir by gently shaking the tea for 30 seconds, and then pour out
the water. The first wash is thrown out traditionally to make sure the leaves
are clean. Then, you repeat and let steep for a few minutes. You drink all the
tea, and then repeat over multiple washes of the tea.&lt;/p&gt;

&lt;p&gt;The tea they were using was incredibly good; probably the best I’ve ever had.
When we asked where it came from, they told us their friend grew it!&lt;/p&gt;

&lt;h2 id=&quot;a-parting-gift&quot;&gt;A parting gift&lt;/h2&gt;

&lt;p&gt;The week we were set to leave Shenzhen, the guys from the printing press sent
us a big box of the tea we made the ceremony with. I’ve shared my stash of the
tea with friends and family, sharing my stories from Shenzhen, especially the
generosity of everyone who made us so welcome there!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Seaside Lunch and Opium War Museum</title>
   <link href="/shenzhen/2015/06/17/sz-adventure-11.2/"/>
   <updated>2015-06-17T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/17/sz-adventure-11.2</id>
   <content type="html">&lt;p&gt;With the guys from the printing press we got lunch in the middle of our tour.&lt;/p&gt;

&lt;p&gt;We went to this lovely restuarant by the sea that had really fantastic seafood.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/ux6lrbs6dpazdv7/restaurant.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
The sea is that color from sediment&lt;/p&gt;

&lt;p&gt;After lunch, we went to Shenzhen’s Opium war musuem and saw some of the
exhibits.  It was really interesting to see the Chinese perspective on this
era, and the museum itself was interesting architecturally.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/re9whccma38aa2f/thegang.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
The MIT Crew entering the museum&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/xl51f6s0lnrda3f/warroom.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/g8mm2umt8a67e3p/tig.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/eaerawd3m4tzhbc/zombies.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Printing Press Tour</title>
   <link href="/shenzhen/2015/06/17/sz-adventure-11.1/"/>
   <updated>2015-06-17T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/17/sz-adventure-11.1</id>
   <content type="html">&lt;p&gt;Today we got to see a printing press. Printing presses are pretty cool; they’re a pretty old technology which one might
argue was the driving force behind the renaissance.&lt;/p&gt;

&lt;h2 id=&quot;printing&quot;&gt;Printing&lt;/h2&gt;

&lt;p&gt;Printing presses are fast. If you’re looking to get something made at one of these factories, you need to order at least something
like 10,000 copies because it prints that many in about the time they can turn the machine on and off.&lt;/p&gt;

&lt;h2 id=&quot;gold-leafing&quot;&gt;Gold Leafing&lt;/h2&gt;

&lt;p&gt;One of the coolest processes we got to see at the factory was how they gold-leaf page edges.&lt;/p&gt;

&lt;p&gt;Basically, they sand down the edges of a block of paper to be super smooth.&lt;/p&gt;

&lt;p&gt;And then they press a piece of foil onto it.&lt;/p&gt;

&lt;p&gt;The result is very shiny!&lt;/p&gt;

&lt;h2 id=&quot;paper-cutter&quot;&gt;Paper Cutter&lt;/h2&gt;

&lt;p&gt;Imagine cutting a piece of paper. Now two pieces. Four? 16? 32? At a certain point, the paper becomes too thick to easily cut.&lt;/p&gt;

&lt;p&gt;Now imagine you aren’t just trying to cut it, but you’re try to make a perfect edge, uniformly.&lt;/p&gt;

&lt;p&gt;At a printing press, they cut thousands of sheets simultaneously. That requires a really sharp knife, a lot of pressure, and a highly attentive worker.&lt;/p&gt;

&lt;p&gt;At the factory, pages are typically cut twice. The first time is to cut to the general size of the job and the second time is done as a trim on the finished product to remove the edges.&lt;/p&gt;

&lt;h2 id=&quot;binding&quot;&gt;Binding&lt;/h2&gt;

&lt;p&gt;These big rotary machines are used to bind pages&lt;/p&gt;

&lt;h2 id=&quot;special-requests&quot;&gt;Special Requests&lt;/h2&gt;

&lt;p&gt;Printing presses – or at least this very awesome one – can accommodate a lot of special requests.&lt;/p&gt;

&lt;p&gt;Here are a few examples of special processes&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Adding a bookmark&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Plastic window&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bootcamp Project Update</title>
   <link href="/shenzhen/2015/06/15/sz-adventure-9/"/>
   <updated>2015-06-15T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/15/sz-adventure-9</id>
   <content type="html">&lt;p&gt;Today we wrapped up our electrical changes to the orchard board. At the end of
the day, we submitted our boards for Engineering Queries and price quotes.&lt;/p&gt;

&lt;p&gt;I also added some sweet graphics to my board, this is what is will look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://shenzhenadventure.files.wordpress.com/2015/06/boardtop.png?w=271&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://shenzhenadventure.files.wordpress.com/2015/06/boardbottom.png?w=261&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One thing people often ask is how bad the pollution is… Actually Shenzhen is
basically a physically greener city than any other I’ve been to and the air is
very clear. Of course, some days are better than others, today was particularly
clear. What does suck is that everyone is smoking everywhere; that is probably
worse for the air quality than other factors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://shenzhenadventure.files.wordpress.com/2015/06/img_0080.jpg?w=300&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bonus office selfie from Hax:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://shenzhenadventure.files.wordpress.com/2015/06/img_0079.jpg?w=225&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After work, we went out to dinner at Coco Park, the notorious clubbing part of
Shenzhen. We didn’t go clubbing, but we went to a pretty western-menued bar
&amp;amp; grill for beers and dinner.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Security via Glitter</title>
   <link href="/shenzhen/2015/06/15/sz-adventure-9.1/"/>
   <updated>2015-06-15T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/15/sz-adventure-9.1</id>
   <content type="html">&lt;p&gt;So you find yourself in China, and you want to go out in the evening. How can you be sure that your electronics aren’t tampered with?&lt;/p&gt;

&lt;p&gt;Use tamper evident seals!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/uo0cpvfybqm8j7m/glitter_sealed.jpeg?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Basically you go and buy a big plastic bin, tape over the edges,
paint glitter nailpolish over the tape, and take a picture. You can’t get into the box without destroying the seals/re-aligning them perfectly.&lt;/p&gt;

&lt;p&gt;“Reasonably Secure”&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hard Earned Day Off</title>
   <link href="/shenzhen/2015/06/14/sz-adventure-8/"/>
   <updated>2015-06-14T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/14/sz-adventure-8</id>
   <content type="html">&lt;p&gt;Today was basically a day off, I answered emails and worked on a small project,
as well as doing a couple edits to my board design to get feedback from Bunnie.&lt;/p&gt;

&lt;p&gt;In the evening, we went to get dinner at a Pakistani restaurant. After dinner,
Akiba led us on his ritual treat; Mango slushies and foot massages. I didn’t
get many photos of the massage, but it was pretty awesome. For about 10 USD,
you get an hour massage.&lt;/p&gt;

&lt;p&gt;First, you take a long tea-foot bath. After brewing for a few minutes, you plop
your feet out and the massage begins. They start by filing down your feet and
chiseling them to get rid of dead skin and callouses. Then you get some
standard massage-y stuff. Then, it gets interesting. The masseuse pulls out a
small torch and lights it on fire. Then, she quickly flips a glass cup over the
flame (which is held dangerously close…) and slips it on your foot and
suckers it off. This is the famed practice of cupping. After doing lots of
quick cups, some larger ones are placed on and left to sit for a few minutes.
These ones really hurt! Actually, come to think of it most of the massage
hurt… Anyways, after cupping the remainder of the massage was fairly normal.
My feet felt pretty fucking awesome afterwards, not bad for 65 RMB.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://shenzhenadventure.files.wordpress.com/2015/06/img_0077.jpg?w=225&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Intro to Bootcamp Project</title>
   <link href="/shenzhen/2015/06/13/sz-adventure-6/"/>
   <updated>2015-06-13T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/13/sz-adventure-6</id>
   <content type="html">&lt;p&gt;Friday and Saturday were free form days, we just worked on our projects for the most part.&lt;/p&gt;

&lt;p&gt;Our projects are basically to doing a small customization to the Orchard platform, which the instructors designed. In a nutshell:&lt;/p&gt;
&lt;blockquote&gt;Orchard is a low-power, multi-band radio-connected embedded computing solution. In other words, it's an IoT platform.

Orchard is open source hardware and software.

Orchard is also a supply chain solution. Derivatives of Orchard are meant to be prototyped easily and brought to volume manufacturing with less effort than typical. Unlike breadboard solutions like Arduino, Orchard is targeted toward prototyping through board spins. This is possible thanks to China's low-cost prototyping infrastructure. The effort to prototype is higher than a breadboard, but the on-ramp to scale production once you've got your design finished is also less steep.&lt;/blockquote&gt;

&lt;p&gt;Orchard is really cool, you can read more about it &lt;a href=&quot;http://www.kosagi.com/w/index.php?title=Orchard_Main_Page&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My customization is adding a sensor chip called an APDS 9960. It’s a hell of a sensor: it can do ambient light, proximity, and gesture sensing baked into a tiny tiny package and communicates over I2C.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://shenzhenadventure.files.wordpress.com/2015/06/apds9960.png&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Originally I was going to try to do a radio astronomy antenna on the board, so that you could chuck out a bunch of orchard boards in a field and make a radio telescope, but getting the RF engineering correct was going to be too difficult for the scope of the course and my background in said materials.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning the Ropes</title>
   <link href="/shenzhen/2015/06/11/sz-adventure-5/"/>
   <updated>2015-06-11T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/11/sz-adventure-5</id>
   <content type="html">&lt;p&gt;Today we were again mostly in-house.&lt;/p&gt;

&lt;p&gt;We kicked off the day with a lecture on how to use Altium (pcb design software)
by Bunnie.  Afterwards, we got lunch at this super awesome Thai restaurant
right by our office (they have very filling lunch specials for 45 RMB / 7.25
USD). I was going to go to another restaurant, but it started to pour (seems to
rain most days so far around noon).&lt;/p&gt;

&lt;p&gt;After lunch, it was mostly just working time. Artem and I decided to go to Seg,
the super large electronics market to get keyboards and mice so that we can
easily use Altium. We got super side tracked in segbuy and ended up walking
around for hours, but it was good because we also found inspiration in the
millions of parts available there.&lt;/p&gt;

&lt;p&gt;One funny thing I learned is that if you’re looking for a single item, and the
manufacturer is selling high quantity, saying you want a sample is a great way
to get one at a low cost, but it feels somewhat dishonest. Then again, Seg
doesn’t feel quite honest either…&lt;/p&gt;

&lt;p&gt;After burning far to much time visitng all 10 floors of Seg twice, we headed
back to the office, did some work thinking about our designs, and then headed
to dinner. Saquib and I decided to go to the restaurant we were going to go to
earlier – it’s a vegetarian restaurant so we were pretty excited to be able to
order anything off the menu! The place was a little bit dingy, but the food was
pretty great and not too expensive – 52 RMB / 8.4 USD comfortably fed us both
– usually vegetarian restaurants are pricey because of low demand. Was pumped
to finally be able to eat the famous ma po tofu! After dinner we went to Gong
Cha, a tea chain. Their teas are awesome, I had a kumquat limeade drink with
pearls and jelly that was super refreshing. Desipite being cheap already, they
had a buy one get one half off thing going so we got 2 large drinks for 22 RMB
/ 3.5 USD.&lt;/p&gt;

&lt;p&gt;I also learned that the word “chisu” I’ve been using for vegetarian sounds a
lot like “chizou” which means stall. That explains why everytime I ask for
vegetarian food they show me the bathroom. Could have been worse! I think the
right word is “su-shi”.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Toy Prototyping Factory Tour</title>
   <link href="/shenzhen/2015/06/10/sz-adventure-4.7/"/>
   <updated>2015-06-10T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/10/sz-adventure-4.7</id>
   <content type="html">&lt;p&gt;We visited a toy studio for a to-be-unnamed toy company (hence, no photos).
This place was really cool. Basically, big brands (and not just for toys,
clothes, electronics, etc) spec out a thing they want at a very high level,
such as “make me a toy that looks like a turtle”. They then send it to a
prototyping studio who makes a turtle toy prototype and sends it back for
feedback. So the brands essentially monitor markets and tell the protypers what
to build to meet it.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Assembly Line Factory Tour</title>
   <link href="/shenzhen/2015/06/10/sz-adventure-4.6/"/>
   <updated>2015-06-10T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/10/sz-adventure-4.6</id>
   <content type="html">&lt;p&gt;At the AQS plant we also got to see the final assembly of a printer. This was
really awesome. Printers are super complicated builds so they basically have to
be done by hand. Essentially what happens is they have stations with a couple
of tasks on them. A person performs the task, scans a barcode on the item, then
passes the cart to the next person. There were 100-200 stations for this
printer. The barcodes let them make sure each printer has had all steps and
also lets a control center monitor to make sure that they are on point for
meeting the quota for that day and hour. What’s cool is that each station has
an instruction booklet which sets the task. The entire line is essentially a
very long pipeline, so they have to carfully balance the pipeline to prevent
bottlenecks and keep throughput high. It takes multiple revisions to get it
right. Apparently setting up such a line, from end to end, is 3-6 months. Each
printer is also fully tested.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/h6z1g7u1eqbzhgh/IMG_0053.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/vi28mwp1lxy8buv/IMG_0055.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Automated Board Population/SMT Factory Tour</title>
   <link href="/shenzhen/2015/06/10/sz-adventure-4.5/"/>
   <updated>2015-06-10T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/10/sz-adventure-4.5</id>
   <content type="html">&lt;p&gt;We got to go to AQS to see one of their board population/smt lines. This was fucking awesome.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Solder Paste Machine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/uz87gw1hfqhuwjx/IMG_0040.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SMT Machine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/hlv509ncoejegyr/IMG_0043.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Pick and Place&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Inspection&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/rlg40ytvnwzhjyf/IMG_0046.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/09yxcxwh99cnuy9/screen.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Touch up&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/2op0w8yqc2ral4j/IMG_0047.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Solder machine ( a pool of solder grazes the board)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/9nrt7zu5jbqkvdh/IMG_0049.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>PCB Factory Tour</title>
   <link href="/shenzhen/2015/06/10/sz-adventure-4.4/"/>
   <updated>2015-06-10T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/10/sz-adventure-4.4</id>
   <content type="html">&lt;p&gt;First they hand check the design to conform with their capabilities. They will make minor changes if necessary.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/j4il6h2m1w3e6c1/IMG_0038.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next they drill out any holes needed in the boards. They very frequently check the bit quality, and bits are only used for 3000 holes before being swapped out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/j1901rd3d1di9j3/holes.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next they do some electroplating stages&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/0yxdwm3oeekmb14/dip.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here they do the photo chemical processing steps that are light sensitive&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/xs2m11p80pjqywv/IMG_0034.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then they do silkscreening (I’m missing a picture of this…)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/0tvj1gpxcdy4f9o/IMG_0027.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next is depanelization, or cutting out the individual boards from the panel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/3g8enfn3aixzio2/IMG_0025.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finished boards&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/wc6k185fml34nqi/IMG_0028.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next they have Quality Control:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chemical checks that boards have the correct properties&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/x6la9qn3a2yndru/IMG_0032.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inspecting the boards quality visually, they cut out a chunk of board, encase it in resin and then grind it down to the edge&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/cqpi9xtx3wacs9x/IMG_0031.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;They also digitally check every single board for continuity/impedance.  This machine essentially has two needles it touches between each point to test,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/jgfp1zp2uqg68we/tester2.gif?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Injection Mold Factory Tour</title>
   <link href="/shenzhen/2015/06/10/sz-adventure-4.3/"/>
   <updated>2015-06-10T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/10/sz-adventure-4.3</id>
   <content type="html">&lt;p&gt;At this place we got to see them designing and making the molds. This was
pretty crazy to me! Basically you can 3D-model your part and then ship it to
them and they design a mold around it which has all the mechanical parts needed
to make the mold. Once the design is there, they will CNC mill it out roughly.
For finer details, they will do what’s called Electric Deposition, where they
use a finely CNC’ed copper electrode in the mirror image of the design and
repeatedly tap it onto the mold with a massive current running. This eventually
cuts out the design layer by layer by blasting away the steel and copper.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Injection Molding Factory Tour</title>
   <link href="/shenzhen/2015/06/10/sz-adventure-4.2/"/>
   <updated>2015-06-10T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/10/sz-adventure-4.2</id>
   <content type="html">&lt;p&gt;This was fun! At the injection molder they had a massive pile of not being run molds&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/hj1nb7x8d7s7ugo/IMG_0015.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and about 20 machines which were cranking out parts. We got to see our mold for the class pried apart which was cool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/llkyy6q9898izvm/IMG_0017.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Molds are super complicated; I didn’t have an appreciation for how hard they are to make before.&lt;/p&gt;

&lt;p&gt;Here’s a run down:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tolerances are ridiculous. They need to be airtight metal with no gaskets so that the plastics don’t leak&lt;/li&gt;
  &lt;li&gt;For nice looking parts, the molds need to be basically mirror finish.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.dropbox.com/s/ciab2zcmuppm1vx/IMG_0018.JPG?raw=1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Molds can be made from Aluminium for lower cost but they basically don’t do it in China because Steel is cheap enough there.&lt;/li&gt;
  &lt;li&gt;A mold will run about $5000-$10000 USD for a reasonably sized design, and can do about 500,000 casts. This is mostly the price of the steel&lt;/li&gt;
  &lt;li&gt;You can modify your mold by welding on a block of steel and then re-carving out the features&lt;/li&gt;
  &lt;li&gt;Designs with overhangs or other features are much more complicated to build because the mod needs to essentially unfold itself to be able to release a part&lt;/li&gt;
  &lt;li&gt;A mold has a couple key properties, the points where the pins push the cast out and the fill points. Based on these, the finished product will have different flows of plastic through it which could cause different knit points (where two flows meet) or flow lines (artifacts of the plastic’s path). The points where the pins push out are those raised disks you sometimes see on plastic objects.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Day 4 Overview</title>
   <link href="/shenzhen/2015/06/10/sz-adventure-4.1/"/>
   <updated>2015-06-10T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/10/sz-adventure-4.1</id>
   <content type="html">&lt;p&gt;Today (Day 4) was awesome, we toured various manufacturers to see the “end to
end” development of a device. I’ve broken out the blogposts on each factory separately.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2015/06/10/sz-adventure-4.2/&quot;&gt;Injection Molding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2015/06/10/sz-adventure-4.3/&quot;&gt;Injection Mold Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2015/06/10/sz-adventure-4.4/&quot;&gt;PCB Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2015/06/10/sz-adventure-4.5/&quot;&gt;Automated SMT/Board Population&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2015/06/10/sz-adventure-4.6/&quot;&gt;Assembly Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2015/06/10/sz-adventure-4.7/&quot;&gt;Toy Prototyping Shop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Lunch:&lt;/strong&gt;
We went out to lunch with some of the guys from one of the factories to a local
place. The food was great, but a little unfilling as all I had was plain
veggies. Luckily, I decided to keep a jar of peanut butter with me at all times
so I had a couple spoonfuls in the car for protein. I was most intrigued by
eating Gingko in a dish. It’s a kind of “creamy peanut” texture, with a
potato-y taste. There were also these guys sitting near us who had the most
incredible raspy voices, they were speaking an unknown local dialect and were
basically shitfaced at noon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dinner:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jon Lee rejoined us for dinner which was awesome! Of course it meant getting
somewhat inebriated again (this time, baijiu and budweiser bombs). Again, they
made sure there were plenty of options for me to eat which was great! The
restaurant also had these amazing pots of tea, I drank a large volume of that.
I was particularly excited to eat a whole water chesnut (never seen them not
sliced).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Small Bootcamp Update</title>
   <link href="/shenzhen/2015/06/09/sz-adventure-3/"/>
   <updated>2015-06-09T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/09/sz-adventure-3</id>
   <content type="html">&lt;p&gt;Today was mostly an “in house day”.&lt;/p&gt;

&lt;p&gt;We had a lecture from Bunnie on the course and then we worked on getting our dev environments set up.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Shenzhen Electronics Market Tour</title>
   <link href="/shenzhen/2015/06/08/sz-adventure-2/"/>
   <updated>2015-06-08T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/08/sz-adventure-2</id>
   <content type="html">&lt;p&gt;I woke up around 7:30AM, although I didn’t have to be up till 9am. Checking
WeChat, I saw that another student was up and wanted to grab breakfast at 8am.
I responded, then got ready, and then headed out. However, I couldn’t find the
other person so I walked around a bit. I was, at this point, phone-less so I
had to run back up to my room to check messages and communicate. After finding
the other person, we went to a bakery cafe around the corner. I had a really
great “french toast bread”. Talking to the other student, it seemed that my
internet woes were not shared; indeed, trying her connection yielded great
bandwidth, even over vpn. Grumble grumble, I hope I can get mine fixed up a
bit!&lt;/p&gt;

&lt;p&gt;At 10am we all met up and went to a Japanese super market and got some basic
supplies (bananas, instant oatmeal, and soap for me). This place has a lot of
Western goods which is very nice, but was a little bit pricey.&lt;/p&gt;

&lt;p&gt;We then dropped off our bags back at the apartments and headed back out. We
stopped for lunch at a nice restaurant in the mall. I knew eating was going to
be really really hard for me, I was pretty worried. If you don’t know about my
eating restrictions, they’re relatively simple and I’m basically not picky at
all. I used to be vegetarian for a number of years, but I relaxed it for health
reasons. Now I try to avoid “sentient” animals. This basically entails to not
eating any mammals whatsoever and avoiding other intelligent animals such as
octopi or crows. I’m basically fine with any chicken or scaly/bony fish dish.
The other constraint is that I keep somewhat Kosher, so I try to avoid
shellfish. I made peace with the fact that I would likely have slip ups over
the trip. After one meal, let me say this: It’s looking tough. In China, pork
isn’t a meat. It’s a seasoning. Almost everything has pork (and a lot of things
are probably cooked in it regardless). Although there were a lot of things I
couldn’t eat, I ended up being able to have a really awesome ma-style (more on
that in a second) fish stew and spicy potatoes. Ma is a special type of
peppercorn which is really spicy, but also numbs your mouth so you can’t feel
it. It’s almost impossible to get in the States and it is awesome. I’ll have to
look into importing some back for personal use. The other really great thing is
Tea, the whole meal was cup after cup of delicious barley (I think?) tea. I
drank like a gallon of it (although I sweated that out later – Shenzhen is
HOT). When the waitress is pouring you tea, you are supposed to knock on the
table to say thanks. After the meal, the restaurant is supposed to give you tax
voucher slips. I still don’t get this all the way; probably because it makes no
sense. Basically, restaurants pre-pay their tax by purchasing these tax-bills
that they give to customers. Because they can get reimbursed for over
purchasing the tax forms, they would rather not give you them (to under-report
taxes). So instead they will offer you a drink at the restaurant in lieu of tax
form. To combat this, the government added a scratch off lottery ticket onto
the tax slips to incentivize people getting them. To me it seems like a double
down on a broken system, but who am I to judge? Definitely makes taxes more fun
than the states!&lt;/p&gt;

&lt;p&gt;After lunch, we went to hackerspace we’ll be calling home briefly to check it
out. The person we needed to talk to was on lunch break, so we went off to do
other things.  I don’t think words can do the next part justice.&lt;/p&gt;

&lt;p&gt;The electronics markets in Shenzhen are insane. There a skyscrapers on which
each floor is filled with vendors hawking components. The scale is enormous,
and the prices are dirt cheap.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/y0jymdoq4mrgyfa/IMG_0010.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
One floor…&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/6zeg8yehru2yxaz/IMG_0011.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Two floor, red floor, blue floor…&lt;/p&gt;

&lt;p&gt;Reels of 10,000 components can be had for less than it would cost to buy 5 of
them at Radio Shack. There are also these incredible “recycling” markets which
take old devices and tear them down and sell the parts. Walking around you can
see people sorting parts from devices. When you go to the next floor, they will
sell a slightly more put back together version and so on and so forth until you
can get ‘new’ devices. It’s hard to explain the bizzareness of these markets.
You can find phones, for example, in the shape of soccer balls, cars, miniature
iphones, phones with a reading light, phones with massive batteries to charge
other phones, and everything else under the sun. I just don’t get who makes the
market for these devices given that you never see them, and even the locals
seem to not have seen them either. For instance, I picked up (along with
several of the other students) the miniature iPhone which runs full android,
has 3g, and works quite well except for the fact that it is tiny as hell but
locals were just as amused as we all were at them.&lt;/p&gt;

&lt;p class=&quot;caption&quot;&gt;&lt;img src=&quot;https://www.dropbox.com/s/ke4j5zen5dafzdb/IMG_0014.JPG?raw=1&quot; alt=&quot;&quot; class=&quot;center-image&quot; /&gt;
Tiny phone, but runs full android and has 3g!&lt;/p&gt;

&lt;p&gt;Following the tour of the markets, we went back to the hackerspace, did our
errand (getting access cards), and then headed over to dinner with everyone
involved in the course. We went to a fancy Chinese Restaurant (that’s what it
was called) and had an all out feast with all the people supporting the course,
including John Lee (the owner of AQS, a big manufacturing company). This went a
lot better for me than lunch, although I couldn’t eat most things, two of the
guests were very kind in helping me order some tasty foods – having to explain
my dietary preferences is always a challenge, but they were very gracious. I
also had to explain some of my other prefernces, but you’ll have to ask me in
person for that story!&lt;/p&gt;

&lt;p&gt;There is an interesting drinking culture. I’m not sure I fully understand it
yet, but I drank a lot of beer and baijiu (a really great shot alchohol that
varies from either a sour candy/apple juice taste to pretty close to whisky).&lt;/p&gt;

&lt;p&gt;At this point, I started to get pretty tired (as were the other students) so we
headed home. I took a quick shower and then passed out for 2 or three hours and
woke up to write this blog post. I also learned some chinese expressions that
might come in handy tomorrow…&lt;/p&gt;

&lt;p&gt;“Wo chisu. Wo ju-ro nieu-ro be-lay guo-mean.”&lt;/p&gt;

&lt;p&gt;I am a vegetarian. I am allergic to pork, beef, and shellfish.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Arriving in Shenzhen</title>
   <link href="/shenzhen/2015/06/07/sz-adventure-1/"/>
   <updated>2015-06-07T00:00:00+00:00</updated>
   <id>/shenzhen/2015/06/07/sz-adventure-1</id>
   <content type="html">&lt;p&gt;The flight to Hong Kong was not bad at all! I think I slept most of the way. On
the flight I watched Chappie – definitely go see it if you’re a Die Antword
fan.&lt;/p&gt;

&lt;p&gt;Upon arrival, I met up with Sean Cross and another student from the program. We
took a taxi &amp;amp; the metro over to Shenzhen.&lt;/p&gt;

&lt;p&gt;We quickly checked into our rooms and then, after getting frustrated with the
internet, I went to sleep.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What the #?!* is Bitcoin?</title>
   <link href="/talks/2014/12/24/tedx-beacon-street-2014/"/>
   <updated>2014-12-24T00:00:00+00:00</updated>
   <id>/talks/2014/12/24/tedx-beacon-street-2014</id>
   <content type="html">&lt;p&gt;My TEDx talk is online!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Vzjtvt77mgc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
 </entry>
 
 <entry>
   <title>Directional Scope for Filtering Visual Data</title>
   <link href="/musings/2013/08/18/webcam-scope/"/>
   <updated>2013-08-18T00:00:00+00:00</updated>
   <id>/musings/2013/08/18/webcam-scope</id>
   <content type="html">&lt;p&gt;A telescope where you can look through and point/zoom in a closed environment.
The device will pull content from sources like webcams/google/shodan to provide
relevent content in that direction and zoom level.&lt;/p&gt;
</content>
 </entry>
 

</feed>
